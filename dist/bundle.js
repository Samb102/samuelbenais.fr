!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!x[e]||!w[e])return;for(var n in w[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(y[n]=t[n]);0==--m&&0===b&&_()}(e,n),t&&t(e,n)};var n,r=!0,i="ec9d0c081f82d60aa681",o=1e4,a={},l=[],s=[];function u(e){var t=S[e];if(!t)return P;var r=function(r){return t.hot.active?(S[r]?-1===S[r].parents.indexOf(e)&&S[r].parents.push(e):(l=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),l=[]),P(r)},i=function(e){return{configurable:!0,enumerable:!0,get:function(){return P[e]},set:function(t){P[e]=t}}};for(var o in P)Object.prototype.hasOwnProperty.call(P,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(r,o,i(o));return r.e=function(e){return"ready"===d&&p("prepare"),b++,P.e(e).then(t,(function(e){throw t(),e}));function t(){b--,"prepare"===d&&(g[e]||k(e),0===b&&0===m&&_())}},r.t=function(e,t){return 1&t&&(e=r(e)),P.t(e,-2&t)},r}function c(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:C,apply:E,status:function(e){if(!e)return d;f.push(e)},addStatusHandler:function(e){f.push(e)},removeStatusHandler:function(e){var t=f.indexOf(e);t>=0&&f.splice(t,1)},data:a[e]};return n=void 0,t}var f=[],d="idle";function p(e){d=e;for(var t=0;t<f.length;t++)f[t].call(null,e)}var h,y,v,m=0,b=0,g={},w={},x={};function A(e){return+e+""===e?+e:e}function C(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return r=e,p("check"),(t=o,t=t||1e4,new Promise((function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=P.p+""+i+".hot-update.json";r.open("GET",o,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}}))).then((function(e){if(!e)return p("idle"),null;w={},g={},x=e.c,v=e.h,p("prepare");var t=new Promise((function(e,t){h={resolve:e,reject:t}}));y={};return k(0),"prepare"===d&&0===b&&0===m&&_(),t}));var t}function k(e){x[e]?(w[e]=!0,m++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=P.p+""+e+"."+i+".hot-update.js",document.head.appendChild(t)}(e)):g[e]=!0}function _(){p("ready");var e=h;if(h=null,e)if(r)Promise.resolve().then((function(){return E(r)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in y)Object.prototype.hasOwnProperty.call(y,n)&&t.push(A(n));e.resolve(t)}}function E(t){if("ready"!==d)throw new Error("apply() is only allowed in ready status");var n,r,o,s,u;function c(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var i=r.pop(),o=i.id,a=i.chain;if((s=S[o])&&!s.hot._selfAccepted){if(s.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(s.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var l=0;l<s.parents.length;l++){var u=s.parents[l],c=S[u];if(c){if(c.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([u]),moduleId:o,parentId:u};-1===t.indexOf(u)&&(c.hot._acceptedDependencies[o]?(n[u]||(n[u]=[]),f(n[u],[o])):(delete n[u],t.push(u),r.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var h={},m=[],b={},g=function(){console.warn("[HMR] unexpected require("+C.moduleId+") to disposed module")};for(var w in y)if(Object.prototype.hasOwnProperty.call(y,w)){var C;u=A(w);var k=!1,_=!1,E=!1,T="";switch((C=y[w]?c(u):{type:"disposed",moduleId:w}).chain&&(T="\nUpdate propagation: "+C.chain.join(" -> ")),C.type){case"self-declined":t.onDeclined&&t.onDeclined(C),t.ignoreDeclined||(k=new Error("Aborted because of self decline: "+C.moduleId+T));break;case"declined":t.onDeclined&&t.onDeclined(C),t.ignoreDeclined||(k=new Error("Aborted because of declined dependency: "+C.moduleId+" in "+C.parentId+T));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(C),t.ignoreUnaccepted||(k=new Error("Aborted because "+u+" is not accepted"+T));break;case"accepted":t.onAccepted&&t.onAccepted(C),_=!0;break;case"disposed":t.onDisposed&&t.onDisposed(C),E=!0;break;default:throw new Error("Unexception type "+C.type)}if(k)return p("abort"),Promise.reject(k);if(_)for(u in b[u]=y[u],f(m,C.outdatedModules),C.outdatedDependencies)Object.prototype.hasOwnProperty.call(C.outdatedDependencies,u)&&(h[u]||(h[u]=[]),f(h[u],C.outdatedDependencies[u]));E&&(f(m,[C.moduleId]),b[u]=g)}var O,M=[];for(r=0;r<m.length;r++)u=m[r],S[u]&&S[u].hot._selfAccepted&&b[u]!==g&&M.push({module:u,errorHandler:S[u].hot._selfAccepted});p("dispose"),Object.keys(x).forEach((function(e){!1===x[e]&&function(e){delete installedChunks[e]}(e)}));for(var I,B,j=m.slice();j.length>0;)if(u=j.pop(),s=S[u]){var R={},N=s.hot._disposeHandlers;for(o=0;o<N.length;o++)(n=N[o])(R);for(a[u]=R,s.hot.active=!1,delete S[u],delete h[u],o=0;o<s.children.length;o++){var D=S[s.children[o]];D&&((O=D.parents.indexOf(u))>=0&&D.parents.splice(O,1))}}for(u in h)if(Object.prototype.hasOwnProperty.call(h,u)&&(s=S[u]))for(B=h[u],o=0;o<B.length;o++)I=B[o],(O=s.children.indexOf(I))>=0&&s.children.splice(O,1);for(u in p("apply"),i=v,b)Object.prototype.hasOwnProperty.call(b,u)&&(e[u]=b[u]);var z=null;for(u in h)if(Object.prototype.hasOwnProperty.call(h,u)&&(s=S[u])){B=h[u];var U=[];for(r=0;r<B.length;r++)if(I=B[r],n=s.hot._acceptedDependencies[I]){if(-1!==U.indexOf(n))continue;U.push(n)}for(r=0;r<U.length;r++){n=U[r];try{n(B)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:B[r],error:e}),t.ignoreErrored||z||(z=e)}}}for(r=0;r<M.length;r++){var L=M[r];u=L.module,l=[u];try{P(u)}catch(e){if("function"==typeof L.errorHandler)try{L.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||z||(z=n),z||(z=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||z||(z=e)}}return z?(p("fail"),Promise.reject(z)):(p("idle"),new Promise((function(e){e(m)})))}var S={};function P(t){if(S[t])return S[t].exports;var n=S[t]={i:t,l:!1,exports:{},hot:c(t),parents:(s=l,l=[],s),children:[]};return e[t].call(n.exports,n,n.exports,u(t)),n.l=!0,n.exports}P.m=e,P.c=S,P.d=function(e,t,n){P.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},P.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},P.t=function(e,t){if(1&t&&(e=P(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(P.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)P.d(n,r,function(t){return e[t]}.bind(null,r));return n},P.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return P.d(t,"a",t),t},P.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},P.p="",P.h=function(){return i},u(5)(P.s=5)}([function(e,t,n){"use strict";e.exports=n(13)},function(e,t,n){"use strict";(function(e,r){n.d(t,"a",(function(){return _})),n.d(t,"b",(function(){return Be})),n.d(t,"c",(function(){return he})),n.d(t,"d",(function(){return Ye})),n.d(t,"e",(function(){return P})),n.d(t,"f",(function(){return zt})),n.d(t,"g",(function(){return xt})),n.d(t,"h",(function(){return _t})),n.d(t,"i",(function(){return Rt})),n.d(t,"j",(function(){return Le})),n.d(t,"k",(function(){return ae}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};var o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function a(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}function l(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}var s="An invariant failed, however the error is obfuscated because this is an production build.",u=[];Object.freeze(u);var c={};function f(){return++Ce.mobxGuid}function d(e){throw p(!1,e),"X"}function p(e,t){if(!e)throw new Error("[mobx] "+(t||s))}Object.freeze(c);function h(e){var t=!1;return function(){if(!t)return t=!0,e.apply(this,arguments)}}var y=function(){};function v(e){return null!==e&&"object"==typeof e}function m(e){if(null===e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return t===Object.prototype||null===t}function b(e,t,n){Object.defineProperty(e,t,{enumerable:!1,writable:!0,configurable:!0,value:n})}function g(e,t){var n="isMobX"+e;return t.prototype[n]=!0,function(e){return v(e)&&!0===e[n]}}function w(e){return e instanceof Map}function x(e){return e instanceof Set}function A(e){var t=new Set;for(var n in e)t.add(n);return Object.getOwnPropertySymbols(e).forEach((function(n){Object.getOwnPropertyDescriptor(e,n).enumerable&&t.add(n)})),Array.from(t)}function C(e){return e&&e.toString?e.toString():new String(e).toString()}function k(e){return null===e?null:"object"==typeof e?""+e:e}var _=Symbol("mobx administration"),E=function(){function e(e){void 0===e&&(e="Atom@"+f()),this.name=e,this.isPendingUnobservation=!1,this.isBeingObserved=!1,this.observers=new Set,this.diffValue=0,this.lastAccessedBy=0,this.lowestObserverState=Y.NOT_TRACKING}return e.prototype.onBecomeObserved=function(){this.onBecomeObservedListeners&&this.onBecomeObservedListeners.forEach((function(e){return e()}))},e.prototype.onBecomeUnobserved=function(){this.onBecomeUnobservedListeners&&this.onBecomeUnobservedListeners.forEach((function(e){return e()}))},e.prototype.reportObserved=function(){return Me(this)},e.prototype.reportChanged=function(){Te(),function(e){if(e.lowestObserverState===Y.STALE)return;e.lowestObserverState=Y.STALE,e.observers.forEach((function(t){t.dependenciesState===Y.UP_TO_DATE&&(t.isTracing!==J.NONE&&Ie(t,e),t.onBecomeStale()),t.dependenciesState=Y.STALE}))}(this),Oe()},e.prototype.toString=function(){return this.name},e}(),S=g("Atom",E);function P(e,t,n){void 0===t&&(t=y),void 0===n&&(n=y);var r,i=new E(e);return t!==y&&Xe("onBecomeObserved",i,t,r),n!==y&&Qe(i,n),i}var T={identity:function(e,t){return e===t},structural:function(e,t){return Lt(e,t)},default:function(e,t){return Object.is(e,t)}},O=Symbol("mobx did run lazy initializers"),M=Symbol("mobx pending decorators"),I={},B={};function j(e,t){var n=t?I:B;return n[e]||(n[e]={configurable:!0,enumerable:t,get:function(){return R(this),this[e]},set:function(t){R(this),this[e]=t}})}function R(e){if(!0!==e[O]){var t=e[M];if(t)for(var n in b(e,O,!0),t){var r=t[n];r.propertyCreator(e,r.prop,r.descriptor,r.decoratorTarget,r.decoratorArguments)}}}function N(e,t){return function(){var n,r=function(r,i,a,l){if(!0===l)return t(r,i,a,r,n),null;if(!Object.prototype.hasOwnProperty.call(r,M)){var s=r[M];b(r,M,o({},s))}return r[M][i]={prop:i,propertyCreator:t,descriptor:a,decoratorTarget:r,decoratorArguments:n},j(i,e)};return D(arguments)?(n=u,r.apply(null,arguments)):(n=Array.prototype.slice.call(arguments),r)}}function D(e){return(2===e.length||3===e.length)&&"string"==typeof e[1]||4===e.length&&!0===e[3]}function z(e,t,n){return rt(e)?e:Array.isArray(e)?Q.array(e,{name:n}):m(e)?Q.object(e,void 0,{name:n}):w(e)?Q.map(e,{name:n}):x(e)?Q.set(e,{name:n}):e}function U(e){return e}function L(t){p(t);var n=N(!0,(function(e,n,r,i,o){var a=r?r.initializer?r.initializer.call(e):r.value:void 0;Ot(e).addObservableProp(n,a,t)})),r=(void 0!==e&&e.env,n);return r.enhancer=t,r}var V={deep:!0,name:void 0,defaultDecorator:void 0,proxy:!0};function F(e){return null==e?V:"string"==typeof e?{name:e,deep:!0,proxy:!0}:e}Object.freeze(V);var W=L(z),G=L((function(e,t,n){return null==e?e:Rt(e)||xt(e)||_t(e)||Pt(e)?e:Array.isArray(e)?Q.array(e,{name:n,deep:!1}):m(e)?Q.object(e,void 0,{name:n,deep:!1}):w(e)?Q.map(e,{name:n,deep:!1}):x(e)?Q.set(e,{name:n,deep:!1}):d(!1)})),H=L(U),$=L((function(e,t,n){return Lt(e,t)?t:e}));function q(e){return e.defaultDecorator?e.defaultDecorator.enhancer:!1===e.deep?U:z}var K={box:function(e,t){arguments.length>2&&X("box");var n=F(t);return new me(e,q(n),n.name,!0,n.equals)},array:function(e,t){arguments.length>2&&X("array");var n=F(t);return vt(e,q(n),n.name)},map:function(e,t){arguments.length>2&&X("map");var n=F(t);return new kt(e,q(n),n.name)},set:function(e,t){arguments.length>2&&X("set");var n=F(t);return new St(e,q(n),n.name)},object:function(e,t,n){"string"==typeof arguments[1]&&X("object");var r=F(n);if(!1===r.proxy)return Je({},e,t,r);var i=Ze(r),o=Je({},void 0,void 0,r),a=st(o);return et(a,e,t,i),a},ref:H,shallow:G,deep:W,struct:$},Q=function(e,t,n){if("string"==typeof arguments[1])return W.apply(null,arguments);if(rt(e))return e;var r=m(e)?Q.object(e,t,n):Array.isArray(e)?Q.array(e,t):w(e)?Q.map(e,t):x(e)?Q.set(e,t):e;if(r!==e)return r;d(!1)};function X(e){d("Expected one or two arguments to observable."+e+". Did you accidentally try to use observable."+e+" as decorator?")}Object.keys(K).forEach((function(e){return Q[e]=K[e]}));var Y,J,Z=N(!1,(function(e,t,n,r,i){var a=n.get,l=n.set,s=i[0]||{};Ot(e).addComputedProp(e,t,o({get:a,set:l,context:e},s))}));Z({equals:T.structural});!function(e){e[e.NOT_TRACKING=-1]="NOT_TRACKING",e[e.UP_TO_DATE=0]="UP_TO_DATE",e[e.POSSIBLY_STALE=1]="POSSIBLY_STALE",e[e.STALE=2]="STALE"}(Y||(Y={})),function(e){e[e.NONE=0]="NONE",e[e.LOG=1]="LOG",e[e.BREAK=2]="BREAK"}(J||(J={}));var ee=function(e){this.cause=e};function te(e){return e instanceof ee}function ne(e){switch(e.dependenciesState){case Y.UP_TO_DATE:return!1;case Y.NOT_TRACKING:case Y.STALE:return!0;case Y.POSSIBLY_STALE:for(var t=le(),n=e.observing,r=n.length,i=0;i<r;i++){var o=n[i];if(ge(o)){if(Ce.disableErrorBoundaries)o.get();else try{o.get()}catch(e){return se(t),!0}if(e.dependenciesState===Y.STALE)return se(t),!0}}return fe(e),se(t),!1}}function re(e){var t=e.observers.size>0;Ce.computationDepth>0&&t&&d(!1),Ce.allowStateChanges||!t&&"strict"!==Ce.enforceActions||d(!1)}function ie(e,t,n){var r=ue(!0);fe(e),e.newObserving=new Array(e.observing.length+100),e.unboundDepsCount=0,e.runId=++Ce.runId;var i,o=Ce.trackingDerivation;if(Ce.trackingDerivation=e,!0===Ce.disableErrorBoundaries)i=t.call(n);else try{i=t.call(n)}catch(e){i=new ee(e)}return Ce.trackingDerivation=o,function(e){for(var t=e.observing,n=e.observing=e.newObserving,r=Y.UP_TO_DATE,i=0,o=e.unboundDepsCount,a=0;a<o;a++){0===(l=n[a]).diffValue&&(l.diffValue=1,i!==a&&(n[i]=l),i++),l.dependenciesState>r&&(r=l.dependenciesState)}n.length=i,e.newObserving=null,o=t.length;for(;o--;){0===(l=t[o]).diffValue&&Se(l,e),l.diffValue=0}for(;i--;){var l;1===(l=n[i]).diffValue&&(l.diffValue=0,Ee(l,e))}r!==Y.UP_TO_DATE&&(e.dependenciesState=r,e.onBecomeStale())}(e),ce(r),i}function oe(e){var t=e.observing;e.observing=[];for(var n=t.length;n--;)Se(t[n],e);e.dependenciesState=Y.NOT_TRACKING}function ae(e){var t=le();try{return e()}finally{se(t)}}function le(){var e=Ce.trackingDerivation;return Ce.trackingDerivation=null,e}function se(e){Ce.trackingDerivation=e}function ue(e){var t=Ce.allowStateReads;return Ce.allowStateReads=e,t}function ce(e){Ce.allowStateReads=e}function fe(e){if(e.dependenciesState!==Y.UP_TO_DATE){e.dependenciesState=Y.UP_TO_DATE;for(var t=e.observing,n=t.length;n--;)t[n].lowestObserverState=Y.UP_TO_DATE}}function de(e,t,n){var r=function(){return pe(e,t,n||this,arguments)};return r.isMobxAction=!0,r}function pe(e,t,n,r){var i=function(e,t,n){var r=0;var i=le();Te();var o=ye(!0),a=ue(!0),l={prevDerivation:i,prevAllowStateChanges:o,prevAllowStateReads:a,notifySpy:!1,startTime:r,actionId:Ce.nextActionId++,parentActionId:Ce.currentActionId};return Ce.currentActionId=l.actionId,l}();try{return t.apply(n,r)}catch(e){throw i.error=e,e}finally{!function(e){Ce.currentActionId!==e.actionId&&d("invalid action stack. did you forget to finish an action?");Ce.currentActionId=e.parentActionId,void 0!==e.error&&(Ce.suppressReactionErrors=!0);ve(e.prevAllowStateChanges),ce(e.prevAllowStateReads),Oe(),se(e.prevDerivation),e.notifySpy&&!1;Ce.suppressReactionErrors=!1}(i)}}function he(e,t){var n,r=ye(e);try{n=t()}finally{ve(r)}return n}function ye(e){var t=Ce.allowStateChanges;return Ce.allowStateChanges=e,t}function ve(e){Ce.allowStateChanges=e}var me=function(e){function t(t,n,r,i,o){void 0===r&&(r="ObservableValue@"+f()),void 0===i&&(i=!0),void 0===o&&(o=T.default);var a=e.call(this,r)||this;return a.enhancer=n,a.name=r,a.equals=o,a.hasUnreportedChange=!1,a.value=n(t,void 0,r),a}return function(e,t){function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}(t,e),t.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.prototype.set=function(e){this.value;if((e=this.prepareNewValue(e))!==Ce.UNCHANGED){0,this.setNewValue(e)}},t.prototype.prepareNewValue=function(e){if(re(this),ut(this)){var t=ft(this,{object:this,type:"update",newValue:e});if(!t)return Ce.UNCHANGED;e=t.newValue}return e=this.enhancer(e,this.value,this.name),this.equals(this.value,e)?Ce.UNCHANGED:e},t.prototype.setNewValue=function(e){var t=this.value;this.value=e,this.reportChanged(),dt(this)&&ht(this,{type:"update",object:this,newValue:e,oldValue:t})},t.prototype.get=function(){return this.reportObserved(),this.dehanceValue(this.value)},t.prototype.intercept=function(e){return ct(this,e)},t.prototype.observe=function(e,t){return t&&e({object:this,type:"update",newValue:this.value,oldValue:void 0}),pt(this,e)},t.prototype.toJSON=function(){return this.get()},t.prototype.toString=function(){return this.name+"["+this.value+"]"},t.prototype.valueOf=function(){return k(this.get())},t.prototype[Symbol.toPrimitive]=function(){return this.valueOf()},t}(E),be=(g("ObservableValue",me),function(){function e(e){this.dependenciesState=Y.NOT_TRACKING,this.observing=[],this.newObserving=null,this.isBeingObserved=!1,this.isPendingUnobservation=!1,this.observers=new Set,this.diffValue=0,this.runId=0,this.lastAccessedBy=0,this.lowestObserverState=Y.UP_TO_DATE,this.unboundDepsCount=0,this.__mapid="#"+f(),this.value=new ee(null),this.isComputing=!1,this.isRunningSetter=!1,this.isTracing=J.NONE,this.derivation=e.get,this.name=e.name||"ComputedValue@"+f(),e.set&&(this.setter=de(this.name+"-setter",e.set)),this.equals=e.equals||(e.compareStructural||e.struct?T.structural:T.default),this.scope=e.context,this.requiresReaction=!!e.requiresReaction,this.keepAlive=!!e.keepAlive}return e.prototype.onBecomeStale=function(){!function(e){if(e.lowestObserverState!==Y.UP_TO_DATE)return;e.lowestObserverState=Y.POSSIBLY_STALE,e.observers.forEach((function(t){t.dependenciesState===Y.UP_TO_DATE&&(t.dependenciesState=Y.POSSIBLY_STALE,t.isTracing!==J.NONE&&Ie(t,e),t.onBecomeStale())}))}(this)},e.prototype.onBecomeObserved=function(){this.onBecomeObservedListeners&&this.onBecomeObservedListeners.forEach((function(e){return e()}))},e.prototype.onBecomeUnobserved=function(){this.onBecomeUnobservedListeners&&this.onBecomeUnobservedListeners.forEach((function(e){return e()}))},e.prototype.get=function(){this.isComputing&&d("Cycle detected in computation "+this.name+": "+this.derivation),0!==Ce.inBatch||0!==this.observers.size||this.keepAlive?(Me(this),ne(this)&&this.trackAndCompute()&&function(e){if(e.lowestObserverState===Y.STALE)return;e.lowestObserverState=Y.STALE,e.observers.forEach((function(t){t.dependenciesState===Y.POSSIBLY_STALE?t.dependenciesState=Y.STALE:t.dependenciesState===Y.UP_TO_DATE&&(e.lowestObserverState=Y.UP_TO_DATE)}))}(this)):ne(this)&&(this.warnAboutUntrackedRead(),Te(),this.value=this.computeValue(!1),Oe());var e=this.value;if(te(e))throw e.cause;return e},e.prototype.peek=function(){var e=this.computeValue(!1);if(te(e))throw e.cause;return e},e.prototype.set=function(e){if(this.setter){p(!this.isRunningSetter,"The setter of computed value '"+this.name+"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?"),this.isRunningSetter=!0;try{this.setter.call(this.scope,e)}finally{this.isRunningSetter=!1}}else p(!1,!1)},e.prototype.trackAndCompute=function(){var e=this.value,t=this.dependenciesState===Y.NOT_TRACKING,n=this.computeValue(!0),r=t||te(e)||te(n)||!this.equals(e,n);return r&&(this.value=n),r},e.prototype.computeValue=function(e){var t;if(this.isComputing=!0,Ce.computationDepth++,e)t=ie(this,this.derivation,this.scope);else if(!0===Ce.disableErrorBoundaries)t=this.derivation.call(this.scope);else try{t=this.derivation.call(this.scope)}catch(e){t=new ee(e)}return Ce.computationDepth--,this.isComputing=!1,t},e.prototype.suspend=function(){this.keepAlive||(oe(this),this.value=void 0)},e.prototype.observe=function(e,t){var n=this,r=!0,i=void 0;return $e((function(){var o=n.get();if(!r||t){var a=le();e({type:"update",object:n,newValue:o,oldValue:i}),se(a)}r=!1,i=o}))},e.prototype.warnAboutUntrackedRead=function(){},e.prototype.toJSON=function(){return this.get()},e.prototype.toString=function(){return this.name+"["+this.derivation.toString()+"]"},e.prototype.valueOf=function(){return k(this.get())},e.prototype[Symbol.toPrimitive]=function(){return this.valueOf()},e}()),ge=g("ComputedValue",be),we=function(){this.version=5,this.UNCHANGED={},this.trackingDerivation=null,this.computationDepth=0,this.runId=0,this.mobxGuid=0,this.inBatch=0,this.pendingUnobservations=[],this.pendingReactions=[],this.isRunningReactions=!1,this.allowStateChanges=!0,this.allowStateReads=!0,this.enforceActions=!1,this.spyListeners=[],this.globalReactionErrorHandlers=[],this.computedRequiresReaction=!1,this.reactionRequiresObservable=!1,this.observableRequiresReaction=!1,this.computedConfigurable=!1,this.disableErrorBoundaries=!1,this.suppressReactionErrors=!1,this.currentActionId=0,this.nextActionId=1},xe=!0,Ae=!1,Ce=function(){var e=_e();return e.__mobxInstanceCount>0&&!e.__mobxGlobals&&(xe=!1),e.__mobxGlobals&&e.__mobxGlobals.version!==(new we).version&&(xe=!1),xe?e.__mobxGlobals?(e.__mobxInstanceCount+=1,e.__mobxGlobals.UNCHANGED||(e.__mobxGlobals.UNCHANGED={}),e.__mobxGlobals):(e.__mobxInstanceCount=1,e.__mobxGlobals=new we):(setTimeout((function(){Ae||d("There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`")}),1),new we)}();var ke={};function _e(){return"undefined"!=typeof window?window:void 0!==r?r:ke}function Ee(e,t){e.observers.add(t),e.lowestObserverState>t.dependenciesState&&(e.lowestObserverState=t.dependenciesState)}function Se(e,t){e.observers.delete(t),0===e.observers.size&&Pe(e)}function Pe(e){!1===e.isPendingUnobservation&&(e.isPendingUnobservation=!0,Ce.pendingUnobservations.push(e))}function Te(){Ce.inBatch++}function Oe(){if(0==--Ce.inBatch){Ne();for(var e=Ce.pendingUnobservations,t=0;t<e.length;t++){var n=e[t];n.isPendingUnobservation=!1,0===n.observers.size&&(n.isBeingObserved&&(n.isBeingObserved=!1,n.onBecomeUnobserved()),n instanceof be&&n.suspend())}Ce.pendingUnobservations=[]}}function Me(e){var t=Ce.trackingDerivation;return null!==t?(t.runId!==e.lastAccessedBy&&(e.lastAccessedBy=t.runId,t.newObserving[t.unboundDepsCount++]=e,e.isBeingObserved||(e.isBeingObserved=!0,e.onBecomeObserved())),!0):(0===e.observers.size&&Ce.inBatch>0&&Pe(e),!1)}function Ie(e,t){if(console.log("[mobx.trace] '"+e.name+"' is invalidated due to a change in: '"+t.name+"'"),e.isTracing===J.BREAK){var n=[];!function e(t,n,r){if(n.length>=1e3)return void n.push("(and many more)");n.push(""+new Array(r).join("\t")+t.name);t.dependencies&&t.dependencies.forEach((function(t){return e(t,n,r+1)}))}((r=e,tt(Nt(r,i))),n,1),new Function("debugger;\n/*\nTracing '"+e.name+"'\n\nYou are entering this break point because derivation '"+e.name+"' is being traced and '"+t.name+"' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n"+(e instanceof be?e.derivation.toString().replace(/[*]\//g,"/"):"")+"\n\nThe dependencies for this derivation are:\n\n"+n.join("\n")+"\n*/\n    ")()}var r,i}var Be=function(){function e(e,t,n,r){void 0===e&&(e="Reaction@"+f()),void 0===r&&(r=!1),this.name=e,this.onInvalidate=t,this.errorHandler=n,this.requiresObservable=r,this.observing=[],this.newObserving=[],this.dependenciesState=Y.NOT_TRACKING,this.diffValue=0,this.runId=0,this.unboundDepsCount=0,this.__mapid="#"+f(),this.isDisposed=!1,this._isScheduled=!1,this._isTrackPending=!1,this._isRunning=!1,this.isTracing=J.NONE}return e.prototype.onBecomeStale=function(){this.schedule()},e.prototype.schedule=function(){this._isScheduled||(this._isScheduled=!0,Ce.pendingReactions.push(this),Ne())},e.prototype.isScheduled=function(){return this._isScheduled},e.prototype.runReaction=function(){if(!this.isDisposed){if(Te(),this._isScheduled=!1,ne(this)){this._isTrackPending=!0;try{this.onInvalidate(),this._isTrackPending}catch(e){this.reportExceptionInDerivation(e)}}Oe()}},e.prototype.track=function(e){if(!this.isDisposed){Te();0,this._isRunning=!0;var t=ie(this,e,void 0);this._isRunning=!1,this._isTrackPending=!1,this.isDisposed&&oe(this),te(t)&&this.reportExceptionInDerivation(t.cause),Oe()}},e.prototype.reportExceptionInDerivation=function(e){var t=this;if(this.errorHandler)this.errorHandler(e,this);else{if(Ce.disableErrorBoundaries)throw e;var n="[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '"+this+"'";Ce.suppressReactionErrors?console.warn("[mobx] (error in reaction '"+this.name+"' suppressed, fix error of causing action below)"):console.error(n,e),Ce.globalReactionErrorHandlers.forEach((function(n){return n(e,t)}))}},e.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this._isRunning||(Te(),oe(this),Oe()))},e.prototype.getDisposer=function(){var e=this.dispose.bind(this);return e[_]=this,e},e.prototype.toString=function(){return"Reaction["+this.name+"]"},e.prototype.trace=function(e){void 0===e&&(e=!1),function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=!1;"boolean"==typeof e[e.length-1]&&(n=e.pop());var r=function(e){switch(e.length){case 0:return Ce.trackingDerivation;case 1:return Nt(e[0]);case 2:return Nt(e[0],e[1])}}(e);if(!r)return d(!1);r.isTracing===J.NONE&&console.log("[mobx.trace] '"+r.name+"' tracing enabled");r.isTracing=n?J.BREAK:J.LOG}(this,e)},e}();var je=100,Re=function(e){return e()};function Ne(){Ce.inBatch>0||Ce.isRunningReactions||Re(De)}function De(){Ce.isRunningReactions=!0;for(var e=Ce.pendingReactions,t=0;e.length>0;){++t===je&&(console.error("Reaction doesn't converge to a stable state after "+je+" iterations. Probably there is a cycle in the reactive function: "+e[0]),e.splice(0));for(var n=e.splice(0),r=0,i=n.length;r<i;r++)n[r].runReaction()}Ce.isRunningReactions=!1}var ze=g("Reaction",Be);function Ue(e){var t=Re;Re=function(n){return e((function(){return t(n)}))}}function Le(e){return console.warn("[mobx.spy] Is a no-op in production builds"),function(){}}function Ve(){d(!1)}function Fe(e){return function(t,n,r){if(r){if(r.value)return{value:de(e,r.value),enumerable:!1,configurable:!0,writable:!0};var i=r.initializer;return{enumerable:!1,configurable:!0,writable:!0,initializer:function(){return de(e,i.call(this))}}}return We(e).apply(this,arguments)}}function We(e){return function(t,n,r){Object.defineProperty(t,n,{configurable:!0,enumerable:!1,get:function(){},set:function(t){b(this,n,Ge(e,t))}})}}var Ge=function(e,t,n,r){return 1===arguments.length&&"function"==typeof e?de(e.name||"<unnamed action>",e):2===arguments.length&&"function"==typeof t?de(e,t):1===arguments.length&&"string"==typeof e?Fe(e):!0!==r?Fe(t).apply(null,arguments):void b(e,t,de(e.name||t,n.value,this))};function He(e,t,n){b(e,t,de(t,n.bind(e)))}function $e(e,t){void 0===t&&(t=c);var n,r=t&&t.name||e.name||"Autorun@"+f();if(!t.scheduler&&!t.delay)n=new Be(r,(function(){this.track(a)}),t.onError,t.requiresObservable);else{var i=Ke(t),o=!1;n=new Be(r,(function(){o||(o=!0,i((function(){o=!1,n.isDisposed||n.track(a)})))}),t.onError,t.requiresObservable)}function a(){e(n)}return n.schedule(),n.getDisposer()}Ge.bound=function(e,t,n,r){return!0===r?(He(e,t,n.value),null):n?{configurable:!0,enumerable:!1,get:function(){return He(this,t,n.value||n.initializer.call(this)),this[t]},set:Ve}:{enumerable:!1,configurable:!0,set:function(e){He(this,t,e)},get:function(){}}};var qe=function(e){return e()};function Ke(e){return e.scheduler?e.scheduler:e.delay?function(t){return setTimeout(t,e.delay)}:qe}function Qe(e,t,n){return Xe("onBecomeUnobserved",e,t,n)}function Xe(e,t,n,r){var i="function"==typeof r?Nt(t,n):Nt(t),o="function"==typeof r?r:n,a=e+"Listeners";return i[a]?i[a].add(o):i[a]=new Set([o]),"function"!=typeof i[e]?d(!1):function(){var e=i[a];e&&(e.delete(o),0===e.size&&delete i[a])}}function Ye(e){var t=e.enforceActions,n=e.computedRequiresReaction,r=e.computedConfigurable,i=e.disableErrorBoundaries,o=e.reactionScheduler,a=e.reactionRequiresObservable,l=e.observableRequiresReaction;if(!0===e.isolateGlobalState&&((Ce.pendingReactions.length||Ce.inBatch||Ce.isRunningReactions)&&d("isolateGlobalState should be called before MobX is running any reactions"),Ae=!0,xe&&(0==--_e().__mobxInstanceCount&&(_e().__mobxGlobals=void 0),Ce=new we)),void 0!==t){var s=void 0;switch(t){case!0:case"observed":s=!0;break;case!1:case"never":s=!1;break;case"strict":case"always":s="strict";break;default:d("Invalid value for 'enforceActions': '"+t+"', expected 'never', 'always' or 'observed'")}Ce.enforceActions=s,Ce.allowStateChanges=!0!==s&&"strict"!==s}void 0!==n&&(Ce.computedRequiresReaction=!!n),void 0!==a&&(Ce.reactionRequiresObservable=!!a),void 0!==l&&(Ce.observableRequiresReaction=!!l,Ce.allowStateReads=!Ce.observableRequiresReaction),void 0!==r&&(Ce.computedConfigurable=!!r),void 0!==i&&(!0===i&&console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled."),Ce.disableErrorBoundaries=!!i),o&&Ue(o)}function Je(e,t,n,r){var i=Ze(r=F(r));return R(e),Ot(e,r.name,i.enhancer),t&&et(e,t,n,i),e}function Ze(e){return e.defaultDecorator||(!1===e.deep?H:W)}function et(e,t,n,r){var i,o;Te();try{var l=A(t);try{for(var s=a(l),u=s.next();!u.done;u=s.next()){var c=u.value,f=Object.getOwnPropertyDescriptor(t,c);0;var d=(n&&c in n?n[c]:f.get?Z:r)(e,c,f,!0);d&&Object.defineProperty(e,c,d)}}catch(e){i={error:e}}finally{try{u&&!u.done&&(o=s.return)&&o.call(s)}finally{if(i)throw i.error}}}finally{Oe()}}function tt(e){var t,n,r={name:e.name};return e.observing&&e.observing.length>0&&(r.dependencies=(t=e.observing,n=[],t.forEach((function(e){-1===n.indexOf(e)&&n.push(e)})),n).map(tt)),r}function nt(e,t){return null!=e&&(void 0!==t?!!Rt(e)&&e[_].values.has(t):Rt(e)||!!e[_]||S(e)||ze(e)||ge(e))}function rt(e){return 1!==arguments.length&&d(!1),nt(e)}function it(e,t){void 0===t&&(t=void 0),Te();try{return e.apply(t)}finally{Oe()}}function ot(e){return e[_]}function at(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e}var lt={has:function(e,t){if(t===_||"constructor"===t||t===O)return!0;var n=ot(e);return at(t)?n.has(t):t in e},get:function(e,t){if(t===_||"constructor"===t||t===O)return e[t];var n=ot(e),r=n.values.get(t);if(r instanceof E){var i=r.get();return void 0===i&&n.has(t),i}return at(t)&&n.has(t),e[t]},set:function(e,t,n){return!!at(t)&&(function e(t,n,r){if(2!==arguments.length||Pt(t))if(Rt(t)){var i=t[_];i.values.get(n)?i.write(n,r):i.addObservableProp(n,r,i.defaultEnhancer)}else if(_t(t))t.set(n,r);else if(Pt(t))t.add(n);else{if(!xt(t))return d(!1);"number"!=typeof n&&(n=parseInt(n,10)),p(n>=0,"Not a valid index: '"+n+"'"),Te(),n>=t.length&&(t.length=n+1),t[n]=r,Oe()}else{Te();var o=n;try{for(var a in o)e(t,a,o[a])}finally{Oe()}}}(e,t,n),!0)},deleteProperty:function(e,t){return!!at(t)&&(ot(e).remove(t),!0)},ownKeys:function(e){return ot(e).keysAtom.reportObserved(),Reflect.ownKeys(e)},preventExtensions:function(e){return d("Dynamic observable objects cannot be frozen"),!1}};function st(e){var t=new Proxy(e,lt);return e[_].proxy=t,t}function ut(e){return void 0!==e.interceptors&&e.interceptors.length>0}function ct(e,t){var n=e.interceptors||(e.interceptors=[]);return n.push(t),h((function(){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}))}function ft(e,t){var n=le();try{var r=e.interceptors;if(r)for(var i=0,o=r.length;i<o&&(p(!(t=r[i](t))||t.type,"Intercept handlers should return nothing or a change object"),t);i++);return t}finally{se(n)}}function dt(e){return void 0!==e.changeListeners&&e.changeListeners.length>0}function pt(e,t){var n=e.changeListeners||(e.changeListeners=[]);return n.push(t),h((function(){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}))}function ht(e,t){var n=le(),r=e.changeListeners;if(r){for(var i=0,o=(r=r.slice()).length;i<o;i++)r[i](t);se(n)}}var yt={get:function(e,t){return t===_?e[_]:"length"===t?e[_].getArrayLength():"number"==typeof t?bt.get.call(e,t):"string"!=typeof t||isNaN(t)?bt.hasOwnProperty(t)?bt[t]:e[t]:bt.get.call(e,parseInt(t))},set:function(e,t,n){return"length"===t&&e[_].setArrayLength(n),"number"==typeof t&&bt.set.call(e,t,n),"symbol"==typeof t||isNaN(t)?e[t]=n:bt.set.call(e,parseInt(t),n),!0},preventExtensions:function(e){return d("Observable arrays cannot be frozen"),!1}};function vt(e,t,n,r){void 0===n&&(n="ObservableArray@"+f()),void 0===r&&(r=!1);var i,o,a,l=new mt(n,t,r);i=l.values,o=_,a=l,Object.defineProperty(i,o,{enumerable:!1,writable:!1,configurable:!0,value:a});var s=new Proxy(l.values,yt);if(l.proxy=s,e&&e.length){var u=ye(!0);l.spliceWithArray(0,0,e),ve(u)}return s}var mt=function(){function e(e,t,n){this.owned=n,this.values=[],this.proxy=void 0,this.lastKnownLength=0,this.atom=new E(e||"ObservableArray@"+f()),this.enhancer=function(n,r){return t(n,r,e+"[..]")}}return e.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},e.prototype.dehanceValues=function(e){return void 0!==this.dehancer&&e.length>0?e.map(this.dehancer):e},e.prototype.intercept=function(e){return ct(this,e)},e.prototype.observe=function(e,t){return void 0===t&&(t=!1),t&&e({object:this.proxy,type:"splice",index:0,added:this.values.slice(),addedCount:this.values.length,removed:[],removedCount:0}),pt(this,e)},e.prototype.getArrayLength=function(){return this.atom.reportObserved(),this.values.length},e.prototype.setArrayLength=function(e){if("number"!=typeof e||e<0)throw new Error("[mobx.array] Out of range: "+e);var t=this.values.length;if(e!==t)if(e>t){for(var n=new Array(e-t),r=0;r<e-t;r++)n[r]=void 0;this.spliceWithArray(t,0,n)}else this.spliceWithArray(e,t-e)},e.prototype.updateArrayLength=function(e,t){if(e!==this.lastKnownLength)throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed.");this.lastKnownLength+=t},e.prototype.spliceWithArray=function(e,t,n){var r=this;re(this.atom);var i=this.values.length;if(void 0===e?e=0:e>i?e=i:e<0&&(e=Math.max(0,i+e)),t=1===arguments.length?i-e:null==t?0:Math.max(0,Math.min(t,i-e)),void 0===n&&(n=u),ut(this)){var o=ft(this,{object:this.proxy,type:"splice",index:e,removedCount:t,added:n});if(!o)return u;t=o.removedCount,n=o.added}n=0===n.length?n:n.map((function(e){return r.enhancer(e,void 0)}));var a=this.spliceItemsIntoValues(e,t,n);return 0===t&&0===n.length||this.notifyArraySplice(e,n,a),this.dehanceValues(a)},e.prototype.spliceItemsIntoValues=function(e,t,n){var r;if(n.length<1e4)return(r=this.values).splice.apply(r,function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(l(arguments[t]));return e}([e,t],n));var i=this.values.slice(e,e+t);return this.values=this.values.slice(0,e).concat(n,this.values.slice(e+t)),i},e.prototype.notifyArrayChildUpdate=function(e,t,n){var r=!this.owned&&!1,i=dt(this),o=i||r?{object:this.proxy,type:"update",index:e,newValue:t,oldValue:n}:null;this.atom.reportChanged(),i&&ht(this,o)},e.prototype.notifyArraySplice=function(e,t,n){var r=!this.owned&&!1,i=dt(this),o=i||r?{object:this.proxy,type:"splice",index:e,removed:n,added:t,removedCount:n.length,addedCount:t.length}:null;this.atom.reportChanged(),i&&ht(this,o)},e}(),bt={intercept:function(e){return this[_].intercept(e)},observe:function(e,t){return void 0===t&&(t=!1),this[_].observe(e,t)},clear:function(){return this.splice(0)},replace:function(e){var t=this[_];return t.spliceWithArray(0,t.values.length,e)},toJS:function(){return this.slice()},toJSON:function(){return this.toJS()},splice:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=this[_];switch(arguments.length){case 0:return[];case 1:return i.spliceWithArray(e);case 2:return i.spliceWithArray(e,t)}return i.spliceWithArray(e,t,n)},spliceWithArray:function(e,t,n){return this[_].spliceWithArray(e,t,n)},push:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this[_];return n.spliceWithArray(n.values.length,0,e),n.values.length},pop:function(){return this.splice(Math.max(this[_].values.length-1,0),1)[0]},shift:function(){return this.splice(0,1)[0]},unshift:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this[_];return n.spliceWithArray(0,0,e),n.values.length},reverse:function(){var e=this.slice();return e.reverse.apply(e,arguments)},sort:function(e){var t=this.slice();return t.sort.apply(t,arguments)},remove:function(e){var t=this[_],n=t.dehanceValues(t.values).indexOf(e);return n>-1&&(this.splice(n,1),!0)},get:function(e){var t=this[_];if(t){if(e<t.values.length)return t.atom.reportObserved(),t.dehanceValue(t.values[e]);console.warn("[mobx.array] Attempt to read an array index ("+e+") that is out of bounds ("+t.values.length+"). Please check length first. Out of bound indices will not be tracked by MobX")}},set:function(e,t){var n=this[_],r=n.values;if(e<r.length){re(n.atom);var i=r[e];if(ut(n)){var o=ft(n,{type:"update",object:n.proxy,index:e,newValue:t});if(!o)return;t=o.newValue}(t=n.enhancer(t,i))!==i&&(r[e]=t,n.notifyArrayChildUpdate(e,t,i))}else{if(e!==r.length)throw new Error("[mobx.array] Index out of bounds, "+e+" is larger than "+r.length);n.spliceWithArray(e,0,[t])}}};["concat","every","filter","forEach","indexOf","join","lastIndexOf","map","reduce","reduceRight","slice","some","toString","toLocaleString"].forEach((function(e){bt[e]=function(){var t=this[_];t.atom.reportObserved();var n=t.dehanceValues(t.values);return n[e].apply(n,arguments)}}));var gt,wt=g("ObservableArrayAdministration",mt);function xt(e){return v(e)&&wt(e[_])}var At,Ct={},kt=function(){function e(e,t,n){if(void 0===t&&(t=z),void 0===n&&(n="ObservableMap@"+f()),this.enhancer=t,this.name=n,this[gt]=Ct,this._keysAtom=P(this.name+".keys()"),this[Symbol.toStringTag]="Map","function"!=typeof Map)throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js");this._data=new Map,this._hasMap=new Map,this.merge(e)}return e.prototype._has=function(e){return this._data.has(e)},e.prototype.has=function(e){var t=this;if(!Ce.trackingDerivation)return this._has(e);var n=this._hasMap.get(e);if(!n){var r=n=new me(this._has(e),U,this.name+"."+C(e)+"?",!1);this._hasMap.set(e,r),Qe(r,(function(){return t._hasMap.delete(e)}))}return n.get()},e.prototype.set=function(e,t){var n=this._has(e);if(ut(this)){var r=ft(this,{type:n?"update":"add",object:this,newValue:t,name:e});if(!r)return this;t=r.newValue}return n?this._updateValue(e,t):this._addValue(e,t),this},e.prototype.delete=function(e){var t=this;if(ut(this)&&!(r=ft(this,{type:"delete",object:this,name:e})))return!1;if(this._has(e)){var n=dt(this),r=n?{type:"delete",object:this,oldValue:this._data.get(e).value,name:e}:null;return it((function(){t._keysAtom.reportChanged(),t._updateHasMapEntry(e,!1),t._data.get(e).setNewValue(void 0),t._data.delete(e)})),n&&ht(this,r),!0}return!1},e.prototype._updateHasMapEntry=function(e,t){var n=this._hasMap.get(e);n&&n.setNewValue(t)},e.prototype._updateValue=function(e,t){var n=this._data.get(e);if((t=n.prepareNewValue(t))!==Ce.UNCHANGED){var r=dt(this),i=r?{type:"update",object:this,oldValue:n.value,name:e,newValue:t}:null;0,n.setNewValue(t),r&&ht(this,i)}},e.prototype._addValue=function(e,t){var n=this;re(this._keysAtom),it((function(){var r=new me(t,n.enhancer,n.name+"."+C(e),!1);n._data.set(e,r),t=r.value,n._updateHasMapEntry(e,!0),n._keysAtom.reportChanged()}));var r=dt(this),i=r?{type:"add",object:this,name:e,newValue:t}:null;r&&ht(this,i)},e.prototype.get=function(e){return this.has(e)?this.dehanceValue(this._data.get(e).get()):this.dehanceValue(void 0)},e.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},e.prototype.keys=function(){return this._keysAtom.reportObserved(),this._data.keys()},e.prototype.values=function(){var e=this,t=0,n=Array.from(this.keys());return Gt({next:function(){return t<n.length?{value:e.get(n[t++]),done:!1}:{done:!0}}})},e.prototype.entries=function(){var e=this,t=0,n=Array.from(this.keys());return Gt({next:function(){if(t<n.length){var r=n[t++];return{value:[r,e.get(r)],done:!1}}return{done:!0}}})},e.prototype[(gt=_,Symbol.iterator)]=function(){return this.entries()},e.prototype.forEach=function(e,t){var n,r;try{for(var i=a(this),o=i.next();!o.done;o=i.next()){var s=l(o.value,2),u=s[0],c=s[1];e.call(t,c,u,this)}}catch(e){n={error:e}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}},e.prototype.merge=function(e){var t=this;return _t(e)&&(e=e.toJS()),it((function(){m(e)?A(e).forEach((function(n){return t.set(n,e[n])})):Array.isArray(e)?e.forEach((function(e){var n=l(e,2),r=n[0],i=n[1];return t.set(r,i)})):w(e)?(e.constructor!==Map&&d("Cannot initialize from classes that inherit from Map: "+e.constructor.name),e.forEach((function(e,n){return t.set(n,e)}))):null!=e&&d("Cannot initialize map from "+e)})),this},e.prototype.clear=function(){var e=this;it((function(){ae((function(){var t,n;try{for(var r=a(e.keys()),i=r.next();!i.done;i=r.next()){var o=i.value;e.delete(o)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}}))}))},e.prototype.replace=function(e){var t=this;return it((function(){var n,r=m(n=e)?Object.keys(n):Array.isArray(n)?n.map((function(e){return l(e,1)[0]})):w(n)||_t(n)?Array.from(n.keys()):d("Cannot get keys from '"+n+"'");Array.from(t.keys()).filter((function(e){return-1===r.indexOf(e)})).forEach((function(e){return t.delete(e)})),t.merge(e)})),this},Object.defineProperty(e.prototype,"size",{get:function(){return this._keysAtom.reportObserved(),this._data.size},enumerable:!0,configurable:!0}),e.prototype.toPOJO=function(){var e,t,n={};try{for(var r=a(this),i=r.next();!i.done;i=r.next()){var o=l(i.value,2),s=o[0],u=o[1];n["symbol"==typeof s?s:C(s)]=u}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}return n},e.prototype.toJS=function(){return new Map(this)},e.prototype.toJSON=function(){return this.toPOJO()},e.prototype.toString=function(){var e=this;return this.name+"[{ "+Array.from(this.keys()).map((function(t){return C(t)+": "+e.get(t)})).join(", ")+" }]"},e.prototype.observe=function(e,t){return pt(this,e)},e.prototype.intercept=function(e){return ct(this,e)},e}(),_t=g("ObservableMap",kt),Et={},St=function(){function e(e,t,n){if(void 0===t&&(t=z),void 0===n&&(n="ObservableSet@"+f()),this.name=n,this[At]=Et,this._data=new Set,this._atom=P(this.name),this[Symbol.toStringTag]="Set","function"!=typeof Set)throw new Error("mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js");this.enhancer=function(e,r){return t(e,r,n)},e&&this.replace(e)}return e.prototype.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},e.prototype.clear=function(){var e=this;it((function(){ae((function(){var t,n;try{for(var r=a(e._data.values()),i=r.next();!i.done;i=r.next()){var o=i.value;e.delete(o)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}}))}))},e.prototype.forEach=function(e,t){var n,r;try{for(var i=a(this),o=i.next();!o.done;o=i.next()){var l=o.value;e.call(t,l,l,this)}}catch(e){n={error:e}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}},Object.defineProperty(e.prototype,"size",{get:function(){return this._atom.reportObserved(),this._data.size},enumerable:!0,configurable:!0}),e.prototype.add=function(e){var t=this;if((re(this._atom),ut(this))&&!(r=ft(this,{type:"add",object:this,newValue:e})))return this;if(!this.has(e)){it((function(){t._data.add(t.enhancer(e,void 0)),t._atom.reportChanged()}));var n=dt(this),r=n?{type:"add",object:this,newValue:e}:null;0,n&&ht(this,r)}return this},e.prototype.delete=function(e){var t=this;if(ut(this)&&!(r=ft(this,{type:"delete",object:this,oldValue:e})))return!1;if(this.has(e)){var n=dt(this),r=n?{type:"delete",object:this,oldValue:e}:null;return it((function(){t._atom.reportChanged(),t._data.delete(e)})),n&&ht(this,r),!0}return!1},e.prototype.has=function(e){return this._atom.reportObserved(),this._data.has(this.dehanceValue(e))},e.prototype.entries=function(){var e=0,t=Array.from(this.keys()),n=Array.from(this.values());return Gt({next:function(){var r=e;return e+=1,r<n.length?{value:[t[r],n[r]],done:!1}:{done:!0}}})},e.prototype.keys=function(){return this.values()},e.prototype.values=function(){this._atom.reportObserved();var e=this,t=0,n=Array.from(this._data.values());return Gt({next:function(){return t<n.length?{value:e.dehanceValue(n[t++]),done:!1}:{done:!0}}})},e.prototype.replace=function(e){var t=this;return Pt(e)&&(e=e.toJS()),it((function(){Array.isArray(e)?(t.clear(),e.forEach((function(e){return t.add(e)}))):x(e)?(t.clear(),e.forEach((function(e){return t.add(e)}))):null!=e&&d("Cannot initialize set from "+e)})),this},e.prototype.observe=function(e,t){return pt(this,e)},e.prototype.intercept=function(e){return ct(this,e)},e.prototype.toJS=function(){return new Set(this)},e.prototype.toString=function(){return this.name+"[ "+Array.from(this).join(", ")+" ]"},e.prototype[(At=_,Symbol.iterator)]=function(){return this.values()},e}(),Pt=g("ObservableSet",St),Tt=function(){function e(e,t,n,r){void 0===t&&(t=new Map),this.target=e,this.values=t,this.name=n,this.defaultEnhancer=r,this.keysAtom=new E(n+".keys")}return e.prototype.read=function(e){return this.values.get(e).get()},e.prototype.write=function(e,t){var n=this.target,r=this.values.get(e);if(r instanceof be)r.set(t);else{if(ut(this)){if(!(o=ft(this,{type:"update",object:this.proxy||n,name:e,newValue:t})))return;t=o.newValue}if((t=r.prepareNewValue(t))!==Ce.UNCHANGED){var i=dt(this),o=i?{type:"update",object:this.proxy||n,oldValue:r.value,name:e,newValue:t}:null;0,r.setNewValue(t),i&&ht(this,o)}}},e.prototype.has=function(e){var t=this.pendingKeys||(this.pendingKeys=new Map),n=t.get(e);if(n)return n.get();var r=!!this.values.get(e);return n=new me(r,U,this.name+"."+C(e)+"?",!1),t.set(e,n),n.get()},e.prototype.addObservableProp=function(e,t,n){void 0===n&&(n=this.defaultEnhancer);var r=this.target;if(ut(this)){var i=ft(this,{object:this.proxy||r,name:e,type:"add",newValue:t});if(!i)return;t=i.newValue}var o=new me(t,n,this.name+"."+C(e),!1);this.values.set(e,o),t=o.value,Object.defineProperty(r,e,function(e){return Mt[e]||(Mt[e]={configurable:!0,enumerable:!0,get:function(){return this[_].read(e)},set:function(t){this[_].write(e,t)}})}(e)),this.notifyPropertyAddition(e,t)},e.prototype.addComputedProp=function(e,t,n){var r,i,o,a=this.target;n.name=n.name||this.name+"."+C(t),this.values.set(t,new be(n)),(e===a||(r=e,i=t,!(o=Object.getOwnPropertyDescriptor(r,i))||!1!==o.configurable&&!1!==o.writable))&&Object.defineProperty(e,t,function(e){return It[e]||(It[e]={configurable:Ce.computedConfigurable,enumerable:!1,get:function(){return Bt(this).read(e)},set:function(t){Bt(this).write(e,t)}})}(t))},e.prototype.remove=function(e){if(this.values.has(e)){var t=this.target;if(ut(this))if(!(a=ft(this,{object:this.proxy||t,name:e,type:"remove"})))return;try{Te();var n=dt(this),r=this.values.get(e),i=r&&r.get();if(r&&r.set(void 0),this.keysAtom.reportChanged(),this.values.delete(e),this.pendingKeys){var o=this.pendingKeys.get(e);o&&o.set(!1)}delete this.target[e];var a=n?{type:"remove",object:this.proxy||t,oldValue:i,name:e}:null;0,n&&ht(this,a)}finally{Oe()}}},e.prototype.illegalAccess=function(e,t){console.warn("Property '"+t+"' of '"+e+"' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner")},e.prototype.observe=function(e,t){return pt(this,e)},e.prototype.intercept=function(e){return ct(this,e)},e.prototype.notifyPropertyAddition=function(e,t){var n=dt(this),r=n?{type:"add",object:this.proxy||this.target,name:e,newValue:t}:null;if(n&&ht(this,r),this.pendingKeys){var i=this.pendingKeys.get(e);i&&i.set(!0)}this.keysAtom.reportChanged()},e.prototype.getKeys=function(){var e,t;this.keysAtom.reportObserved();var n=[];try{for(var r=a(this.values),i=r.next();!i.done;i=r.next()){var o=l(i.value,2),s=o[0];o[1]instanceof me&&n.push(s)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}return n},e}();function Ot(e,t,n){if(void 0===t&&(t=""),void 0===n&&(n=z),Object.prototype.hasOwnProperty.call(e,_))return e[_];m(e)||(t=(e.constructor.name||"ObservableObject")+"@"+f()),t||(t="ObservableObject@"+f());var r=new Tt(e,new Map,C(t),n);return b(e,_,r),r}var Mt=Object.create(null),It=Object.create(null);function Bt(e){var t=e[_];return t||(R(e),e[_])}var jt=g("ObservableObjectAdministration",Tt);function Rt(e){return!!v(e)&&(R(e),jt(e[_]))}function Nt(e,t){if("object"==typeof e&&null!==e){if(xt(e))return void 0!==t&&d(!1),e[_].atom;if(Pt(e))return e[_];if(_t(e)){var n=e;return void 0===t?n._keysAtom:((r=n._data.get(t)||n._hasMap.get(t))||d(!1),r)}var r;if(R(e),t&&!e[_]&&e[t],Rt(e))return t?((r=e[_].values.get(t))||d(!1),r):d(!1);if(S(e)||ge(e)||ze(e))return e}else if("function"==typeof e&&ze(e[_]))return e[_];return d(!1)}function Dt(e,t){return e||d("Expecting some object"),void 0!==t?Dt(Nt(e,t)):S(e)||ge(e)||ze(e)?e:_t(e)||Pt(e)?e:(R(e),e[_]?e[_]:void d(!1))}function zt(e,t){return(void 0!==t?Nt(e,t):Rt(e)||_t(e)||Pt(e)?Dt(e):Nt(e)).name}var Ut=Object.prototype.toString;function Lt(e,t){return Vt(e,t)}function Vt(e,t,n,r){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if(e!=e)return t!=t;var i=typeof e;return("function"===i||"object"===i||"object"==typeof t)&&function(e,t,n,r){e=Ft(e),t=Ft(t);var i=Ut.call(e);if(i!==Ut.call(t))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t;case"[object Symbol]":return"undefined"!=typeof Symbol&&Symbol.valueOf.call(e)===Symbol.valueOf.call(t)}var o="[object Array]"===i;if(!o){if("object"!=typeof e||"object"!=typeof t)return!1;var a=e.constructor,l=t.constructor;if(a!==l&&!("function"==typeof a&&a instanceof a&&"function"==typeof l&&l instanceof l)&&"constructor"in e&&"constructor"in t)return!1}r=r||[];var s=(n=n||[]).length;for(;s--;)if(n[s]===e)return r[s]===t;if(n.push(e),r.push(t),o){if((s=e.length)!==t.length)return!1;for(;s--;)if(!Vt(e[s],t[s],n,r))return!1}else{var u=Object.keys(e),c=void 0;if(s=u.length,Object.keys(t).length!==s)return!1;for(;s--;)if(c=u[s],!Wt(t,c)||!Vt(e[c],t[c],n,r))return!1}return n.pop(),r.pop(),!0}(e,t,n,r)}function Ft(e){return xt(e)?e.slice():w(e)||_t(e)?Array.from(e.entries()):x(e)||Pt(e)?Array.from(e.entries()):e}function Wt(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function Gt(e){return e[Symbol.iterator]=Ht,e}function Ht(){return this}if("undefined"==typeof Proxy||"undefined"==typeof Symbol)throw new Error("[mobx] MobX 5+ requires Proxy and Symbol objects. If your environment doesn't support Symbol or Proxy objects, please downgrade to MobX 4. For React Native Android, consider upgrading JSCore.");"object"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__&&__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({spy:Le,extras:{getDebugName:zt},$mobx:_})}).call(this,n(19),n(20))},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(14)},function(e,t,n){t=e.exports=n(8)(!0);var r=n(9),i=r(n(10)),o=r(n(11));t.push([e.i,'@-webkit-keyframes fadeInRight{from{opacity:0;-webkit-transform:translate3d(100%, 0, 0);transform:translate3d(100%, 0, 0)}to{opacity:1;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes fadeInRight{from{opacity:0;-webkit-transform:translate3d(100%, 0, 0);transform:translate3d(100%, 0, 0)}to{opacity:1;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@-webkit-keyframes fadeInLeft{from{opacity:0;-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}to{opacity:1;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes fadeInLeft{from{opacity:0;-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}to{opacity:1;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@-webkit-keyframes bodyGradient{0%{background-position:0% 50%}50%{background-position:100% 50%}100%{background-position:0% 50%}}@keyframes bodyGradient{0%{background-position:0% 50%}50%{background-position:100% 50%}100%{background-position:0% 50%}}/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:0.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type="checkbox"],[type="radio"]{box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}.clearfix:after{visibility:hidden;display:block;content:"";clear:both;height:0}html{box-sizing:border-box}*,*:before,*:after{box-sizing:inherit}@font-face{font-family:\'Coolvetica\';src:url('+i+")}@font-face{font-family:'Fleltex';src:url("+o+")}html{font-size:62.5%}body{font-family:\"Fleltex\";font-size:1.6rem;color:#09090e}h1{font-family:\"Fleltex\",serif;font-size:1.7rem;font-weight:400}*::-moz-selection{background:#fff0f5}*::selection{background:#fff0f5}html,body{height:100%}body{width:100%;min-height:100%;margin:0;font-family:'Fleltex';background:#3d3b3b;height:100vh;color:#f7f7f7;overflow:hidden;background:linear-gradient(-45deg, #011638, #3E4348, #2E294E, #011638);background-size:400% 400%;-webkit-animation:bodyGradient 15s ease infinite;animation:bodyGradient 15s ease infinite}.wrapper{max-width:100%}h1,h2,h3,h4,h5,h6{margin:0}p{margin:0}a{text-decoration:none;color:#2c638f}img{display:block}ul{padding:0;list-style:none}#sb-pane{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;min-height:100%;font-size:2em;text-align:center;text-shadow:2px 2px 4px rgba(0,0,0,0.6)}#sb{-webkit-animation:fadeInRight 1s;animation:fadeInRight 1s}#sb-title{margin-top:10px;font-size:0.5em}@media (max-width: 650px){#sb-title{margin-top:30px}#sb{font-size:4em}#sb-social{margin-top:30px}}.ReactBash{-webkit-animation:fadeInRight 1s;animation:fadeInRight 1s;width:400px;height:200px !important;margin:20px;box-shadow:3px 4px 4px rgba(0,0,0,0.2);text-shadow:none !important}.ReactBash>div:first-child{padding:5px 10px 4px !important}.ReactBash>div:last-child{overflow-y:hidden !important}.ReactBash span{font-family:'Fleltex'}.ReactBash input{outline:none !important}#sb-social{display:-webkit-box;display:flex;-webkit-animation:fadeInLeft 1s;animation:fadeInLeft 1s;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards;-webkit-animation-delay:0.70s;animation-delay:0.70s;opacity:0}#sb-social>.sb-social-network{margin-top:20px;width:60px;height:60px}#sb-social>.sb-social-network>.sb-social-network-container{width:51px;height:50px;border-radius:50%;background:white;position:absolute;box-shadow:3px 4px 4px rgba(0,0,0,0.2)}#sb-social>.sb-social-network>.sb-social-network-container>img{position:relative;top:5px;left:6px;height:40px;width:40px}#sb-social>.sb-social-network>.sb-social-network-container>img#stack-overflow{top:10px;left:11px;width:30px;height:30px}#sb-social>.sb-social-network>.sb-social-network-container>img#root-me{top:7px;left:8px;height:35px;width:35px}\n","",{version:3,sources:["/home/samuel/workspace/samuelbenais.fr/src/styles/utils/_keyframes.scss","/home/samuel/workspace/samuelbenais.fr/src/styles/setup/_normalize.scss","/home/samuel/workspace/samuelbenais.fr/src/styles/setup/_clearfix.scss","/home/samuel/workspace/samuelbenais.fr/src/styles/setup/_border-box.scss","/home/samuel/workspace/samuelbenais.fr/src/styles/global/_typography.scss","/home/samuel/workspace/samuelbenais.fr/src/styles/utils/_variables.scss","/home/samuel/workspace/samuelbenais.fr/src/styles/global/_global.scss","/home/samuel/workspace/samuelbenais.fr/src/styles/global/_terminal.scss","/home/samuel/workspace/samuelbenais.fr/src/styles/global/_social.scss"],names:[],mappings:"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",file:"index.scss",sourcesContent:["@keyframes fadeInRight {\n    from {\n      opacity: 0;\n      transform: translate3d(100%, 0, 0);\n    }\n  \n    to {\n      opacity: 1;\n      transform: translate3d(0, 0, 0);\n    }\n  }\n  \n  @keyframes fadeInLeft {\n    from {\n      opacity: 0;\n      transform: translate3d(-100%, 0, 0);\n    }\n  \n    to {\n      opacity: 1;\n      transform: translate3d(0, 0, 0);\n    }\n  }\n  \n  @keyframes bodyGradient {\n      0% {\n          background-position: 0% 50%;\n      }\n      50% {\n          background-position: 100% 50%;\n      }\n      100% {\n          background-position: 0% 50%;\n      }\n  }\n  ",'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15;\n  /* 1 */\n  -webkit-text-size-adjust: 100%;\n  /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box;\n  /* 1 */\n  height: 0;\n  /* 1 */\n  overflow: visible;\n  /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace;\n  /* 1 */\n  font-size: 1em;\n  /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none;\n  /* 1 */\n  text-decoration: underline;\n  /* 2 */\n  text-decoration: underline dotted;\n  /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace;\n  /* 1 */\n  font-size: 1em;\n  /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit;\n  /* 1 */\n  font-size: 100%;\n  /* 1 */\n  line-height: 1.15;\n  /* 1 */\n  margin: 0;\n  /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput {\n  /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect {\n  /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box;\n  /* 1 */\n  color: inherit;\n  /* 2 */\n  display: table;\n  /* 1 */\n  max-width: 100%;\n  /* 1 */\n  padding: 0;\n  /* 3 */\n  white-space: normal;\n  /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box;\n  /* 1 */\n  padding: 0;\n  /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield;\n  /* 1 */\n  outline-offset: -2px;\n  /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  /* 1 */\n  font: inherit;\n  /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}','.clearfix:after {\n  visibility: hidden;\n  display: block;\n  content: "";\n  clear: both;\n  height: 0;\n}',"html {\n  box-sizing: border-box;\n}\n\n*, *:before, *:after {\n  box-sizing: inherit;\n}","@font-face {\n  font-family: 'Coolvetica';\n  src: url('./fonts/coolvetica.ttf')\n}\n\n@font-face {\n  font-family: 'Fleltex';\n  src: url('./fonts/fleltex.ttf')\n}\n\n\n//! set font variables\n$font-heading: 'Fleltex';\n$font-body: 'Fleltex';\n\n\nhtml {\n  font-size: 62.5%; // 1rem = 10px, 3.5rem = 35px;\n}\n\nbody {\n  font-family: $font-body;\n  font-size: 1.6rem;\n  color: $black;\n}\n\nh1 {\n  font-family: $font-heading, serif;\n  font-size: 1.7rem;\n  font-weight: 400;\n}\n","$white: #fff;\n$light-grey: #fafafa;\n$grey: #d7d7d7;\n$black-soft: #444;\n$black: #09090e;\n$blue: #2c638f;\n$pink: #fff0f5;\n$yellow: #fffacd;\n\n$sb-primary: $blue;\n$sb-secondary: $pink;\n$sb-tertiary: $yellow;","*::selection {\n  background: $pink;\n}\n\nhtml,\nbody {\n  height: 100%;\n}\n\nbody {\n  width: 100%;\n  min-height: 100%;\n  margin: 0;\n  font-family: 'Fleltex';\n  background: #3d3b3b;\n  height: 100vh;\n  color: #f7f7f7;\n  overflow: hidden;\n  background: linear-gradient(-45deg, #011638, #3E4348, #2E294E, #011638);\n\tbackground-size: 400% 400%;\n\tanimation: bodyGradient 15s ease infinite;\n}\n\n.wrapper {\n  max-width: 100%;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  margin: 0;\n}\n\np {\n  margin: 0;\n}\n\na {\n  text-decoration: none;\n  color: $blue;\n}\n\nimg {\n  display: block;\n}\n\nul {\n  padding: 0;\n  list-style: none;\n}\n\n#sb-pane {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  min-height: 100%;\n  font-size: 2em;\n  text-align: center;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6);\n}\n\n#sb {\n  animation: fadeInRight 1s;\n}\n\n#sb-title {\n  margin-top: 10px;\n  font-size: 0.5em;\n}\n@media (max-width: 650px) {\n  #sb-title {\n    margin-top: 30px;\n  }\n  \n  #sb {\n    font-size:4em;\n  }\n  #sb-social {\n    margin-top: 30px;\n  }\n}\n",".ReactBash {\n    animation: fadeInRight 1s;\n    width: 400px;\n    height: 200px !important;\n    margin: 20px;\n    box-shadow: 3px 4px 4px rgba(0, 0, 0, 0.2);\n    text-shadow: none !important;\n    & > div:first-child {\n        padding: 5px 10px 4px !important;\n     }\n\n     & > div:last-child {\n         overflow-y: hidden !important;\n     }\n\n     span { font-family : 'Fleltex'; }\n     input {\n         outline: none !important;\n     }\n   \n}","\n#sb-social {\n    display: flex;\n    animation: fadeInLeft 1s;\n    animation-fill-mode: forwards;\n    animation-delay: 0.70s;\n    opacity: 0;\n  \n    & > .sb-social-network {\n      margin-top: 20px;\n      width: 60px;\n      height: 60px;\n  \n      & > .sb-social-network-container {\n        width: 51px;\n        height: 50px;\n        border-radius: 50%;\n        background: white;\n        position: absolute;\n        box-shadow: 3px 4px 4px rgba(0, 0, 0, 0.2);\n  \n        & > img {\n          position: relative;\n          top: 5px;\n          left: 6px;\n          height: 40px;\n          width: 40px;\n  \n          &#stack-overflow {\n            top: 10px;\n            left: 11px;\n            width: 30px;\n            height: 30px;\n          }\n  \n          // &#github {\n            \n          // }\n    \n          // &#linkedin {\n            \n          // }\n\n            &#root-me {\n              top: 7px;\n              left: 8px;\n              height: 35px;\n              width: 35px;\n            }\n        }\n      }\n    }\n  }"]}])},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,s=a(e),u=1;u<arguments.length;u++){for(var c in n=Object(arguments[u]))i.call(n,c)&&(s[c]=n[c]);if(r){l=r(n);for(var f=0;f<l.length;f++)o.call(n,l[f])&&(s[l[f]]=n[l[f]])}}return s}},function(e,t,n){e.exports=n(6)},function(e,t,n){"use strict";n(7);var r=a(n(0)),i=n(2),o=a(n(17));function a(e){return e&&e.__esModule?e:{default:e}}(0,i.render)(r.default.createElement("div",null,r.default.createElement(o.default,{store:{}})),document.getElementById("root"))},function(e,t,n){var r=n(3);"string"==typeof r&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1},o=n(12)(r,i);r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(3,(function(){var t=n(3);"string"==typeof t&&(t=[[e.i,t,""]]),o(t)})),e.hot.dispose((function(){o()}))},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(a=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(s," */")),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}var a,l,s;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];null!=o&&(r[o]=!0)}for(var a=0;a<e.length;a++){var l=e[a];null!=l[0]&&r[l[0]]||(n&&!l[2]?l[2]=n:n&&(l[2]="(".concat(l[2],") and (").concat(n,")")),t.push(l))}},t}},function(e,t,n){"use strict";e.exports=function(e,t){return"string"!=typeof(e=e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),/["'() \t\n]/.test(e)||t?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},function(e,t,n){e.exports=n.p+"5d474fd2ebc6ef77c9bf3219391bed9c.ttf"},function(e,t,n){e.exports=n.p+"871f7dc73f773e7178810d3f605b6d55.ttf"},function(e,t,n){"use strict";var r,i={},o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function l(e,t){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],a=t.base?o[0]+t.base:o[0],l={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(l):n.push(r[a]={id:a,parts:[l]})}return n}function s(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id],a=0;if(o){for(o.refs++;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(v(r.parts[a],t))}else{for(var l=[];a<r.parts.length;a++)l.push(v(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:l}}}}function u(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var r=n.nc;r&&(e.attributes.nonce=r)}if(Object.keys(e.attributes).forEach((function(n){t.setAttribute(n,e.attributes[n])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var c,f=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function d(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function p(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i&&e.setAttribute("media",i),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,y=0;function v(e,t){var n,r,i;if(t.singleton){var o=y++;n=h||(h=u(t)),r=d.bind(null,n,o,!1),i=d.bind(null,n,o,!0)}else n=u(t),r=p.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=l(e,t);return s(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o],u=i[a.id];u&&(u.refs--,r.push(u))}e&&s(l(e,t),t);for(var c=0;c<r.length;c++){var f=r[c];if(0===f.refs){for(var d=0;d<f.parts.length;d++)f.parts[d]();delete i[f.id]}}}}},function(e,t,n){"use strict";
/** @license React v16.10.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(4),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,l=i?Symbol.for("react.fragment"):60107,s=i?Symbol.for("react.strict_mode"):60108,u=i?Symbol.for("react.profiler"):60114,c=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.forward_ref"):60112,p=i?Symbol.for("react.suspense"):60113,h=i?Symbol.for("react.suspense_list"):60120,y=i?Symbol.for("react.memo"):60115,v=i?Symbol.for("react.lazy"):60116;i&&Symbol.for("react.fundamental"),i&&Symbol.for("react.responder"),i&&Symbol.for("react.scope");var m="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function x(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||g}function A(){}function C(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||g}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw b(Error(85));this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},A.prototype=x.prototype;var k=C.prototype=new A;k.constructor=C,r(k,x.prototype),k.isPureReactComponent=!0;var _={current:null},E={suspense:null},S={current:null},P=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r,i={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)P.call(t,r)&&!T.hasOwnProperty(r)&&(i[r]=t[r]);var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===i[r]&&(i[r]=s[r]);return{$$typeof:o,type:e,key:a,ref:l,props:i,_owner:S.current}}function M(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var I=/\/+/g,B=[];function j(e,t,n,r){if(B.length){var i=B.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>B.length&&B.push(e)}function N(e,t,n){return null==e?0:function e(t,n,r,i){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var s=!1;if(null===t)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case o:case a:s=!0}}if(s)return r(i,t,""===n?"."+D(t,0):n),1;if(s=0,n=""===n?".":n+":",Array.isArray(t))for(var u=0;u<t.length;u++){var c=n+D(l=t[u],u);s+=e(l,c,r,i)}else if(null===t||"object"!=typeof t?c=null:c="function"==typeof(c=m&&t[m]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),u=0;!(l=t.next()).done;)s+=e(l=l.value,c=n+D(l,u++),r,i);else if("object"===l)throw r=""+t,b(Error(31),"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return s}(e,"",t,n)}function D(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function z(e,t){e.func.call(e.context,t,e.count++)}function U(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,(function(e){return e})):null!=e&&(M(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(I,"$&/")+"/")+n)),r.push(e))}function L(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(I,"$&/")+"/"),N(e,U,t=j(t,o,r,i)),R(t)}function V(){var e=_.current;if(null===e)throw b(Error(321));return e}var F={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;N(e,z,t=j(null,null,t,n)),R(t)},count:function(e){return N(e,(function(){return null}),null)},toArray:function(e){var t=[];return L(e,t,null,(function(e){return e})),t},only:function(e){if(!M(e))throw b(Error(143));return e}},createRef:function(){return{current:null}},Component:x,PureComponent:C,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:y,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return V().useCallback(e,t)},useContext:function(e,t){return V().useContext(e,t)},useEffect:function(e,t){return V().useEffect(e,t)},useImperativeHandle:function(e,t,n){return V().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return V().useLayoutEffect(e,t)},useMemo:function(e,t){return V().useMemo(e,t)},useReducer:function(e,t,n){return V().useReducer(e,t,n)},useRef:function(e){return V().useRef(e)},useState:function(e){return V().useState(e)},Fragment:l,Profiler:u,StrictMode:s,Suspense:p,unstable_SuspenseList:h,createElement:O,cloneElement:function(e,t,n){if(null==e)throw b(Error(267),e);var i=r({},e.props),a=e.key,l=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,s=S.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)P.call(t,c)&&!T.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){u=Array(c);for(var f=0;f<c;f++)u[f]=arguments[f+2];i.children=u}return{$$typeof:o,type:e.type,key:a,ref:l,props:i,_owner:s}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:M,version:"16.10.1",unstable_withSuspenseConfig:function(e,t){var n=E.suspense;E.suspense=void 0===t?null:t;try{e()}finally{E.suspense=n}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:_,ReactCurrentBatchConfig:E,ReactCurrentOwner:S,IsSomeRendererActing:{current:!1},assign:r}},W={default:F},G=W&&F||W;e.exports=G.default||G},function(e,t,n){"use strict";
/** @license React v16.10.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),i=n(4),o=n(15);function a(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}if(!r)throw a(Error(227));var l=null,s={};function u(){if(l)for(var e in s){var t=s[e],n=l.indexOf(e);if(!(-1<n))throw a(Error(96),e);if(!f[n]){if(!t.extractEvents)throw a(Error(97),e);for(var r in f[n]=t,n=t.eventTypes){var i=void 0,o=n[r],u=t,p=r;if(d.hasOwnProperty(p))throw a(Error(99),p);d[p]=o;var h=o.phasedRegistrationNames;if(h){for(i in h)h.hasOwnProperty(i)&&c(h[i],u,p);i=!0}else o.registrationName?(c(o.registrationName,u,p),i=!0):i=!1;if(!i)throw a(Error(98),r,e)}}}}function c(e,t,n){if(p[e])throw a(Error(100),e);p[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],d={},p={},h={};function y(e,t,n,r,i,o,a,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var v=!1,m=null,b=!1,g=null,w={onError:function(e){v=!0,m=e}};function x(e,t,n,r,i,o,a,l,s){v=!1,m=null,y.apply(w,arguments)}var A=null,C=null,k=null;function _(e,t,n){var r=e.type||"unknown-event";e.currentTarget=k(n),function(e,t,n,r,i,o,l,s,u){if(x.apply(this,arguments),v){if(!v)throw a(Error(198));var c=m;v=!1,m=null,b||(b=!0,g=c)}}(r,t,void 0,e),e.currentTarget=null}function E(e,t){if(null==t)throw a(Error(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function S(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var P=null;function T(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)_(e,t[r],n[r]);else t&&_(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function O(e){if(null!==e&&(P=E(P,e)),e=P,P=null,e){if(S(e,T),P)throw a(Error(95));if(b)throw e=g,b=!1,g=null,e}}var M={injectEventPluginOrder:function(e){if(l)throw a(Error(101));l=Array.prototype.slice.call(e),u()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!s.hasOwnProperty(t)||s[t]!==r){if(s[t])throw a(Error(102),t);s[t]=r,n=!0}}n&&u()}};function I(e,t){var n=e.stateNode;if(!n)return null;var r=A(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw a(Error(231),t,typeof n);return n}var B=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;B.hasOwnProperty("ReactCurrentDispatcher")||(B.ReactCurrentDispatcher={current:null}),B.hasOwnProperty("ReactCurrentBatchConfig")||(B.ReactCurrentBatchConfig={suspense:null});var j=/^(.*)[\\\/]/,R="function"==typeof Symbol&&Symbol.for,N=R?Symbol.for("react.element"):60103,D=R?Symbol.for("react.portal"):60106,z=R?Symbol.for("react.fragment"):60107,U=R?Symbol.for("react.strict_mode"):60108,L=R?Symbol.for("react.profiler"):60114,V=R?Symbol.for("react.provider"):60109,F=R?Symbol.for("react.context"):60110,W=R?Symbol.for("react.concurrent_mode"):60111,G=R?Symbol.for("react.forward_ref"):60112,H=R?Symbol.for("react.suspense"):60113,$=R?Symbol.for("react.suspense_list"):60120,q=R?Symbol.for("react.memo"):60115,K=R?Symbol.for("react.lazy"):60116;R&&Symbol.for("react.fundamental"),R&&Symbol.for("react.responder"),R&&Symbol.for("react.scope");var Q="function"==typeof Symbol&&Symbol.iterator;function X(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=Q&&e[Q]||e["@@iterator"])?e:null}function Y(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case z:return"Fragment";case D:return"Portal";case L:return"Profiler";case U:return"StrictMode";case H:return"Suspense";case $:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case F:return"Context.Consumer";case V:return"Context.Provider";case G:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case q:return Y(e.type);case K:if(e=1===e._status?e._result:null)return Y(e)}return null}function J(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=Y(e.type);n=null,r&&(n=Y(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(j,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}var Z=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),ee=null,te=null,ne=null;function re(e){if(e=C(e)){if("function"!=typeof ee)throw a(Error(280));var t=A(e.stateNode);ee(e.stateNode,e.type,t)}}function ie(e){te?ne?ne.push(e):ne=[e]:te=e}function oe(){if(te){var e=te,t=ne;if(ne=te=null,re(e),t)for(e=0;e<t.length;e++)re(t[e])}}function ae(e,t){return e(t)}function le(e,t,n,r){return e(t,n,r)}function se(){}var ue=ae,ce=!1,fe=!1;function de(){null===te&&null===ne||(se(),oe())}new Map,new Map,new Map;var pe=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,he=Object.prototype.hasOwnProperty,ye={},ve={};function me(e,t,n,r,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var be={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){be[e]=new me(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];be[t]=new me(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){be[e]=new me(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){be[e]=new me(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){be[e]=new me(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){be[e]=new me(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){be[e]=new me(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){be[e]=new me(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){be[e]=new me(e,5,!1,e.toLowerCase(),null,!1)}));var ge=/[\-:]([a-z])/g;function we(e){return e[1].toUpperCase()}function xe(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Ae(e,t,n,r){var i=be.hasOwnProperty(t)?be[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!he.call(ve,e)||!he.call(ye,e)&&(pe.test(e)?ve[e]=!0:(ye[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Ce(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ke(e){e._valueTracker||(e._valueTracker=function(e){var t=Ce(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function _e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ce(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Ee(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Se(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=xe(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Pe(e,t){null!=(t=t.checked)&&Ae(e,"checked",t,!1)}function Te(e,t){Pe(e,t);var n=xe(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Me(e,t.type,n):t.hasOwnProperty("defaultValue")&&Me(e,t.type,xe(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Oe(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Me(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ie(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Be(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+xe(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function je(e,t){if(null!=t.dangerouslySetInnerHTML)throw a(Error(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Re(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw a(Error(92));if(Array.isArray(t)){if(!(1>=t.length))throw a(Error(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:xe(n)}}function Ne(e,t){var n=xe(t.value),r=xe(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function De(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(ge,we);be[t]=new me(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(ge,we);be[t]=new me(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(ge,we);be[t]=new me(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){be[e]=new me(e,1,!1,e.toLowerCase(),null,!1)})),be.xlinkHref=new me("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){be[e]=new me(e,1,!1,e.toLowerCase(),null,!0)}));var ze={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Ue(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ue(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Ve,Fe=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==ze.svg||"innerHTML"in e)e.innerHTML=t;else{for((Ve=Ve||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Ve.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function We(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ge(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var He={animationend:Ge("Animation","AnimationEnd"),animationiteration:Ge("Animation","AnimationIteration"),animationstart:Ge("Animation","AnimationStart"),transitionend:Ge("Transition","TransitionEnd")},$e={},qe={};function Ke(e){if($e[e])return $e[e];if(!He[e])return e;var t,n=He[e];for(t in n)if(n.hasOwnProperty(t)&&t in qe)return $e[e]=n[t];return e}Z&&(qe=document.createElement("div").style,"AnimationEvent"in window||(delete He.animationend.animation,delete He.animationiteration.animation,delete He.animationstart.animation),"TransitionEvent"in window||delete He.transitionend.transition);var Qe=Ke("animationend"),Xe=Ke("animationiteration"),Ye=Ke("animationstart"),Je=Ke("transitionend"),Ze="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),et=!1,tt=[],nt=null,rt=null,it=null,ot=new Map,at=new Map,lt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),st="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function ut(e,t,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r}}function ct(e,t){switch(e){case"focus":case"blur":nt=null;break;case"dragenter":case"dragleave":rt=null;break;case"mouseover":case"mouseout":it=null;break;case"pointerover":case"pointerout":ot.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":at.delete(t.pointerId)}}function ft(e,t,n,r,i){return null===e||e.nativeEvent!==i?ut(t,n,r,i):(e.eventSystemFlags|=r,e)}function dt(e){if(null!==e.blockedOn)return!1;var t=En(e.topLevelType,e.eventSystemFlags,e.nativeEvent);return null===t||(e.blockedOn=t,!1)}function pt(e,t,n){dt(e)&&n.delete(t)}function ht(){for(et=!1;0<tt.length;){var e=tt[0];if(null!==e.blockedOn)break;var t=En(e.topLevelType,e.eventSystemFlags,e.nativeEvent);null!==t?e.blockedOn=t:tt.shift()}null!==nt&&dt(nt)&&(nt=null),null!==rt&&dt(rt)&&(rt=null),null!==it&&dt(it)&&(it=null),ot.forEach(pt),at.forEach(pt)}function yt(e,t){e.blockedOn===t&&(e.blockedOn=null,et||(et=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,ht)))}function vt(e){function t(t){return yt(t,e)}if(0<tt.length){yt(tt[0],e);for(var n=1;n<tt.length;n++){var r=tt[n];r.blockedOn===e&&(r.blockedOn=null)}}null!==nt&&yt(nt,e),null!==rt&&yt(rt,e),null!==it&&yt(it,e),ot.forEach(t),at.forEach(t)}var mt=0,bt=2,gt=1024;function wt(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{((t=e).effectTag&(bt|gt))!==mt&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function xt(e){if(wt(e)!==e)throw a(Error(188))}function At(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=wt(e)))throw a(Error(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return xt(i),e;if(o===r)return xt(i),t;o=o.sibling}throw a(Error(188))}if(n.return!==r.return)n=i,r=o;else{for(var l=!1,s=i.child;s;){if(s===n){l=!0,n=i,r=o;break}if(s===r){l=!0,r=i,n=o;break}s=s.sibling}if(!l){for(s=o.child;s;){if(s===n){l=!0,n=o,r=i;break}if(s===r){l=!0,r=o,n=i;break}s=s.sibling}if(!l)throw a(Error(189))}}if(n.alternate!==r)throw a(Error(190))}if(3!==n.tag)throw a(Error(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ct(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function kt(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function _t(e,t,n){(t=I(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=E(n._dispatchListeners,t),n._dispatchInstances=E(n._dispatchInstances,e))}function Et(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=kt(t);for(t=n.length;0<t--;)_t(n[t],"captured",e);for(t=0;t<n.length;t++)_t(n[t],"bubbled",e)}}function St(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=I(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=E(n._dispatchListeners,t),n._dispatchInstances=E(n._dispatchInstances,e))}function Pt(e){e&&e.dispatchConfig.registrationName&&St(e._targetInst,null,e)}function Tt(e){S(e,Et)}function Ot(){return!0}function Mt(){return!1}function It(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Ot:Mt,this.isPropagationStopped=Mt,this}function Bt(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function jt(e){if(!(e instanceof this))throw a(Error(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Rt(e){e.eventPool=[],e.getPooled=Bt,e.release=jt}i(It.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Ot)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Ot)},persist:function(){this.isPersistent=Ot},isPersistent:Mt,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Mt,this._dispatchInstances=this._dispatchListeners=null}}),It.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},It.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,Rt(n),n},Rt(It);var Nt=It.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Dt=It.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),zt=It.extend({view:null,detail:null}),Ut=zt.extend({relatedTarget:null});function Lt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Vt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Ft={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Gt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function Ht(){return Gt}for(var $t=zt.extend({key:function(e){if(e.key){var t=Vt[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Lt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Ft[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Ht,charCode:function(e){return"keypress"===e.type?Lt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Lt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),qt=0,Kt=0,Qt=!1,Xt=!1,Yt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Ht,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=qt;return qt=e.screenX,Qt?"mousemove"===e.type?e.screenX-t:0:(Qt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Kt;return Kt=e.screenY,Xt?"mousemove"===e.type?e.screenY-t:0:(Xt=!0,0)}}),Jt=Yt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Zt=Yt.extend({dataTransfer:null}),en=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Ht}),tn=It.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),nn=Yt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),rn=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Qe,"animationEnd",2],[Xe,"animationIteration",2],[Ye,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[Je,"transitionEnd",2],["waiting","waiting",2]],on={},an={},ln=0;ln<rn.length;ln++){var sn=rn[ln],un=sn[0],cn=sn[1],fn=sn[2],dn="on"+(cn[0].toUpperCase()+cn.slice(1)),pn={phasedRegistrationNames:{bubbled:dn,captured:dn+"Capture"},dependencies:[un],eventPriority:fn};on[cn]=pn,an[un]=pn}var hn={eventTypes:on,getEventPriority:function(e){return void 0!==(e=an[e])?e.eventPriority:2},extractEvents:function(e,t,n,r,i){if(!(t=an[e]))return null;switch(e){case"keypress":if(0===Lt(r))return null;case"keydown":case"keyup":e=$t;break;case"blur":case"focus":e=Ut;break;case"click":if(2===r.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Yt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=Zt;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=en;break;case Qe:case Xe:case Ye:e=Nt;break;case Je:e=tn;break;case"scroll":e=zt;break;case"wheel":e=nn;break;case"copy":case"cut":case"paste":e=Dt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Jt;break;default:e=It}return Tt(n=e.getPooled(t,n,r,i)),n}},yn=hn.getEventPriority,vn=10,mn=[];function bn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;var i=n.tag;5!==i&&6!==i||e.ancestors.push(n),n=lr(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Ct(e.nativeEvent);r=e.topLevelType,i=e.eventSystemFlags;for(var a=e.nativeEvent,l=null,s=0;s<f.length;s++){var u=f[s];u&&(u=u.extractEvents(r,i,t,a,o))&&(l=E(l,u))}O(l)}}var gn=!0;function wn(e,t){xn(t,e,!1)}function xn(e,t,n){switch(yn(t)){case 0:var r=An.bind(null,t,1);break;case 1:r=Cn.bind(null,t,1);break;default:r=_n.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function An(e,t,n){ce||se();var r=_n,i=ce;ce=!0;try{le(r,e,t,n)}finally{(ce=i)||de()}}function Cn(e,t,n){_n(e,t,n)}function kn(e,t,n,r){if(mn.length){var i=mn.pop();i.topLevelType=e,i.eventSystemFlags=t,i.nativeEvent=n,i.targetInst=r,e=i}else e={topLevelType:e,eventSystemFlags:t,nativeEvent:n,targetInst:r,ancestors:[]};try{if(t=bn,n=e,fe)t(n,void 0);else{fe=!0;try{ue(t,n,void 0)}finally{fe=!1,de()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,mn.length<vn&&mn.push(e)}}function _n(e,t,n){if(gn)if(0<tt.length&&-1<lt.indexOf(e))e=ut(null,e,t,n),tt.push(e);else{var r=En(e,t,n);null===r?ct(e,n):-1<lt.indexOf(e)?(e=ut(r,e,t,n),tt.push(e)):function(e,t,n,r){switch(t){case"focus":return nt=ft(nt,e,t,n,r),!0;case"dragenter":return rt=ft(rt,e,t,n,r),!0;case"mouseover":return it=ft(it,e,t,n,r),!0;case"pointerover":var i=r.pointerId;return ot.set(i,ft(ot.get(i)||null,e,t,n,r)),!0;case"gotpointercapture":return i=r.pointerId,at.set(i,ft(at.get(i)||null,e,t,n,r)),!0}return!1}(r,e,t,n)||(ct(e,n),kn(e,t,n,null))}}function En(e,t,n){var r=Ct(n),i=lr(r);if(null!==i)if(null===(r=wt(i)))i=null;else{var o=r.tag;if(13===o){if(null!==(r=13!==r.tag||(null===(i=r.memoizedState)&&(null!==(r=r.alternate)&&(i=r.memoizedState)),null===i)?null:i.dehydrated))return r;i=null}else if(3===o){if(r.stateNode.hydrate)return 3===r.tag?r.stateNode.containerInfo:null;i=null}else r!==i&&(i=null)}return kn(e,t,n,i),null}function Sn(e){if(!Z)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var Pn=new("function"==typeof WeakMap?WeakMap:Map);function Tn(e){var t=Pn.get(e);return void 0===t&&(t=new Set,Pn.set(e,t)),t}function On(e,t,n){if(!n.has(e)){switch(e){case"scroll":xn(t,"scroll",!0);break;case"focus":case"blur":xn(t,"focus",!0),xn(t,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":Sn(e)&&xn(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ze.indexOf(e)&&wn(e,t)}n.add(e)}}var Mn={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},In=["Webkit","ms","Moz","O"];function Bn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Mn.hasOwnProperty(e)&&Mn[e]?(""+t).trim():t+"px"}function jn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=Bn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(Mn).forEach((function(e){In.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Mn[t]=Mn[e]}))}));var Rn=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Nn(e,t){if(t){if(Rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw a(Error(137),e,"");if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw a(Error(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw a(Error(61))}if(null!=t.style&&"object"!=typeof t.style)throw a(Error(62),"")}}function Dn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function zn(e,t){var n=Tn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++)On(t[r],e,n)}function Un(){}function Ln(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Vn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Fn(e,t){var n,r=Vn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Vn(r)}}function Wn(){for(var e=window,t=Ln();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Ln((e=t.contentWindow).document)}return t}function Gn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Hn="$",$n="/$",qn="$?",Kn="$!",Qn=null,Xn=null;function Yn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Jn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Zn="function"==typeof setTimeout?setTimeout:void 0,er="function"==typeof clearTimeout?clearTimeout:void 0;function tr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function nr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===Hn||n===Kn||n===qn){if(0===t)return e;t--}else n===$n&&t++}e=e.previousSibling}return null}var rr=Math.random().toString(36).slice(2),ir="__reactInternalInstance$"+rr,or="__reactEventHandlers$"+rr,ar="__reactContainere$"+rr;function lr(e){var t=e[ir];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ar]||n[ir]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=nr(e);null!==e;){if(n=e[ir])return n;e=nr(e)}return t}n=(e=n).parentNode}return null}function sr(e){return!(e=e[ir]||e[ar])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ur(e){if(5===e.tag||6===e.tag)return e.stateNode;throw a(Error(33))}function cr(e){return e[or]||null}var fr=null,dr=null,pr=null;function hr(){if(pr)return pr;var e,t,n=dr,r=n.length,i="value"in fr?fr.value:fr.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return pr=i.slice(e,1<t?1-t:void 0)}var yr=It.extend({data:null}),vr=It.extend({data:null}),mr=[9,13,27,32],br=Z&&"CompositionEvent"in window,gr=null;Z&&"documentMode"in document&&(gr=document.documentMode);var wr=Z&&"TextEvent"in window&&!gr,xr=Z&&(!br||gr&&8<gr&&11>=gr),Ar=String.fromCharCode(32),Cr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},kr=!1;function _r(e,t){switch(e){case"keyup":return-1!==mr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Er(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Sr=!1;var Pr={eventTypes:Cr,extractEvents:function(e,t,n,r,i){var o;if(br)e:{switch(e){case"compositionstart":var a=Cr.compositionStart;break e;case"compositionend":a=Cr.compositionEnd;break e;case"compositionupdate":a=Cr.compositionUpdate;break e}a=void 0}else Sr?_r(e,r)&&(a=Cr.compositionEnd):"keydown"===e&&229===r.keyCode&&(a=Cr.compositionStart);return a?(xr&&"ko"!==r.locale&&(Sr||a!==Cr.compositionStart?a===Cr.compositionEnd&&Sr&&(o=hr()):(dr="value"in(fr=i)?fr.value:fr.textContent,Sr=!0)),t=yr.getPooled(a,n,r,i),o?t.data=o:null!==(o=Er(r))&&(t.data=o),Tt(t),o=t):o=null,(e=wr?function(e,t){switch(e){case"compositionend":return Er(t);case"keypress":return 32!==t.which?null:(kr=!0,Ar);case"textInput":return(e=t.data)===Ar&&kr?null:e;default:return null}}(e,r):function(e,t){if(Sr)return"compositionend"===e||!br&&_r(e,t)?(e=hr(),pr=dr=fr=null,Sr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return xr&&"ko"!==t.locale?null:t.data;default:return null}}(e,r))?((n=vr.getPooled(Cr.beforeInput,n,r,i)).data=e,Tt(n)):n=null,null===o?n:null===n?o:[o,n]}},Tr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Or(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Tr[e.type]:"textarea"===t}var Mr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ir(e,t,n){return(e=It.getPooled(Mr.change,e,t,n)).type="change",ie(n),Tt(e),e}var Br=null,jr=null;function Rr(e){O(e)}function Nr(e){if(_e(ur(e)))return e}function Dr(e,t){if("change"===e)return t}var zr=!1;function Ur(){Br&&(Br.detachEvent("onpropertychange",Lr),jr=Br=null)}function Lr(e){if("value"===e.propertyName&&Nr(jr))if(e=Ir(jr,e,Ct(e)),ce)O(e);else{ce=!0;try{ae(Rr,e)}finally{ce=!1,de()}}}function Vr(e,t,n){"focus"===e?(Ur(),jr=n,(Br=t).attachEvent("onpropertychange",Lr)):"blur"===e&&Ur()}function Fr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Nr(jr)}function Wr(e,t){if("click"===e)return Nr(t)}function Gr(e,t){if("input"===e||"change"===e)return Nr(t)}Z&&(zr=Sn("input")&&(!document.documentMode||9<document.documentMode));var Hr={eventTypes:Mr,_isInputEventSupported:zr,extractEvents:function(e,t,n,r,i){var o=(t=n?ur(n):window).nodeName&&t.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===t.type)var a=Dr;else if(Or(t))if(zr)a=Gr;else{a=Fr;var l=Vr}else(o=t.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===t.type||"radio"===t.type)&&(a=Wr);if(a&&(a=a(e,n)))return Ir(a,r,i);l&&l(e,t,n),"blur"===e&&(e=t._wrapperState)&&e.controlled&&"number"===t.type&&Me(t,"number",t.value)}},$r={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},qr={eventTypes:$r,extractEvents:function(e,t,n,r,i){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&0==(32&t)&&(r.relatedTarget||r.fromElement)||!a&&!o)return null;if(t=i.window===i?i:(t=i.ownerDocument)?t.defaultView||t.parentWindow:window,a?(a=n,null!==(n=(n=r.relatedTarget||r.toElement)?lr(n):null)&&(n!==(o=wt(n))||5!==n.tag&&6!==n.tag)&&(n=null)):a=null,a===n)return null;if("mouseout"===e||"mouseover"===e)var l=Yt,s=$r.mouseLeave,u=$r.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Jt,s=$r.pointerLeave,u=$r.pointerEnter,c="pointer");if(e=null==a?t:ur(a),t=null==n?t:ur(n),(s=l.getPooled(s,a,r,i)).type=c+"leave",s.target=e,s.relatedTarget=t,(r=l.getPooled(u,n,r,i)).type=c+"enter",r.target=t,r.relatedTarget=e,c=n,(i=a)&&c)e:{for(u=c,e=0,a=l=i;a;a=kt(a))e++;for(a=0,n=u;n;n=kt(n))a++;for(;0<e-a;)l=kt(l),e--;for(;0<a-e;)u=kt(u),a--;for(;e--;){if(l===u||l===u.alternate)break e;l=kt(l),u=kt(u)}l=null}else l=null;for(u=l,l=[];i&&i!==u&&(null===(e=i.alternate)||e!==u);)l.push(i),i=kt(i);for(i=[];c&&c!==u&&(null===(e=c.alternate)||e!==u);)i.push(c),c=kt(c);for(c=0;c<l.length;c++)St(l[c],"bubbled",s);for(c=i.length;0<c--;)St(i[c],"captured",r);return[s,r]}};var Kr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Qr=Object.prototype.hasOwnProperty;function Xr(e,t){if(Kr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Qr.call(t,n[r])||!Kr(e[n[r]],t[n[r]]))return!1;return!0}var Yr=Z&&"documentMode"in document&&11>=document.documentMode,Jr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Zr=null,ei=null,ti=null,ni=!1;function ri(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return ni||null==Zr||Zr!==Ln(n)?null:("selectionStart"in(n=Zr)&&Gn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},ti&&Xr(ti,n)?null:(ti=n,(e=It.getPooled(Jr.select,ei,e,t)).type="select",e.target=Zr,Tt(e),e))}var ii={eventTypes:Jr,extractEvents:function(e,t,n,r,i){var o;if(!(o=!(t=i.window===i?i.document:9===i.nodeType?i:i.ownerDocument))){e:{t=Tn(t),o=h.onSelect;for(var a=0;a<o.length;a++)if(!t.has(o[a])){t=!1;break e}t=!0}o=!t}if(o)return null;switch(t=n?ur(n):window,e){case"focus":(Or(t)||"true"===t.contentEditable)&&(Zr=t,ei=n,ti=null);break;case"blur":ti=ei=Zr=null;break;case"mousedown":ni=!0;break;case"contextmenu":case"mouseup":case"dragend":return ni=!1,ri(r,i);case"selectionchange":if(Yr)break;case"keydown":case"keyup":return ri(r,i)}return null}};M.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),A=cr,C=sr,k=ur,M.injectEventPluginsByName({SimpleEventPlugin:hn,EnterLeaveEventPlugin:qr,ChangeEventPlugin:Hr,SelectEventPlugin:ii,BeforeInputEventPlugin:Pr}),new Set;var oi=[],ai=-1;function li(e){0>ai||(e.current=oi[ai],oi[ai]=null,ai--)}function si(e,t){oi[++ai]=e.current,e.current=t}var ui={},ci={current:ui},fi={current:!1},di=ui;function pi(e,t){var n=e.type.contextTypes;if(!n)return ui;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function hi(e){return null!=(e=e.childContextTypes)}function yi(e){li(fi),li(ci)}function vi(e){li(fi),li(ci)}function mi(e,t,n){if(ci.current!==ui)throw a(Error(168));si(ci,t),si(fi,n)}function bi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw a(Error(108),Y(t)||"Unknown",o);return i({},n,{},r)}function gi(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||ui,di=ci.current,si(ci,t),si(fi,fi.current),!0}function wi(e,t,n){var r=e.stateNode;if(!r)throw a(Error(169));n?(t=bi(e,t,di),r.__reactInternalMemoizedMergedChildContext=t,li(fi),li(ci),si(ci,t)):li(fi),si(fi,n)}var xi=o.unstable_runWithPriority,Ai=o.unstable_scheduleCallback,Ci=o.unstable_cancelCallback,ki=o.unstable_shouldYield,_i=o.unstable_requestPaint,Ei=o.unstable_now,Si=o.unstable_getCurrentPriorityLevel,Pi=o.unstable_ImmediatePriority,Ti=o.unstable_UserBlockingPriority,Oi=o.unstable_NormalPriority,Mi=o.unstable_LowPriority,Ii=o.unstable_IdlePriority,Bi={},ji=void 0!==_i?_i:function(){},Ri=null,Ni=null,Di=!1,zi=Ei(),Ui=1e4>zi?Ei:function(){return Ei()-zi};function Li(){switch(Si()){case Pi:return 99;case Ti:return 98;case Oi:return 97;case Mi:return 96;case Ii:return 95;default:throw a(Error(332))}}function Vi(e){switch(e){case 99:return Pi;case 98:return Ti;case 97:return Oi;case 96:return Mi;case 95:return Ii;default:throw a(Error(332))}}function Fi(e,t){return e=Vi(e),xi(e,t)}function Wi(e,t,n){return e=Vi(e),Ai(e,t,n)}function Gi(e){return null===Ri?(Ri=[e],Ni=Ai(Pi,$i)):Ri.push(e),Bi}function Hi(){if(null!==Ni){var e=Ni;Ni=null,Ci(e)}$i()}function $i(){if(!Di&&null!==Ri){Di=!0;var e=0;try{var t=Ri;Fi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ri=null}catch(t){throw null!==Ri&&(Ri=Ri.slice(e+1)),Ai(Pi,Hi),t}finally{Di=!1}}}function qi(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Ki={current:null},Qi=null,Xi=null,Yi=null;function Ji(){Yi=Xi=Qi=null}function Zi(e,t){var n=e.type._context;si(Ki,n._currentValue),n._currentValue=t}function eo(e){var t=Ki.current;li(Ki),e.type._context._currentValue=t}function to(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function no(e,t){Qi=e,Yi=Xi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Oa=!0),e.firstContext=null)}function ro(e,t){if(Yi!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Yi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xi){if(null===Qi)throw a(Error(308));Xi=t,Qi.dependencies={expirationTime:0,firstContext:t,responders:null}}else Xi=Xi.next=t;return e._currentValue}var io=!1;function oo(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function ao(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function lo(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function so(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function uo(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,i=null;null===r&&(r=e.updateQueue=oo(e.memoizedState))}else r=e.updateQueue,i=n.updateQueue,null===r?null===i?(r=e.updateQueue=oo(e.memoizedState),i=n.updateQueue=oo(n.memoizedState)):r=e.updateQueue=ao(i):null===i&&(i=n.updateQueue=ao(r));null===i||r===i?so(r,t):null===r.lastUpdate||null===i.lastUpdate?(so(r,t),so(i,t)):(so(r,t),i.lastUpdate=t)}function co(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=oo(e.memoizedState):fo(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function fo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=ao(t)),t}function po(e,t,n,r,o,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,o):e;case 3:e.effectTag=-4097&e.effectTag|64;case 0:if(null==(o="function"==typeof(e=n.payload)?e.call(a,r,o):e))break;return i({},r,o);case 2:io=!0}return r}function ho(e,t,n,r,i){io=!1;for(var o=(t=fo(e,t)).baseState,a=null,l=0,s=t.firstUpdate,u=o;null!==s;){var c=s.expirationTime;c<i?(null===a&&(a=s,o=u),l<c&&(l=c)):(vs(c,s.suspenseConfig),u=po(e,0,s,u,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=s:(t.lastEffect.nextEffect=s,t.lastEffect=s))),s=s.next}for(c=null,s=t.firstCapturedUpdate;null!==s;){var f=s.expirationTime;f<i?(null===c&&(c=s,null===a&&(o=u)),l<f&&(l=f)):(u=po(e,0,s,u,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=s:(t.lastCapturedEffect.nextEffect=s,t.lastCapturedEffect=s))),s=s.next}null===a&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===c&&(o=u),t.baseState=o,t.firstUpdate=a,t.firstCapturedUpdate=c,ms(l),e.expirationTime=l,e.memoizedState=u}function yo(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),vo(t.firstEffect,n),t.firstEffect=t.lastEffect=null,vo(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function vo(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw a(Error(191),n);n.call(r)}e=e.nextEffect}}var mo=B.ReactCurrentBatchConfig,bo=(new r.Component).refs;function go(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var wo={isMounted:function(e){return!!(e=e._reactInternalFiber)&&wt(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Jl(),i=mo.suspense;(i=lo(r=Zl(r,e,i),i)).payload=t,null!=n&&(i.callback=n),uo(e,i),ns(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Jl(),i=mo.suspense;(i=lo(r=Zl(r,e,i),i)).tag=1,i.payload=t,null!=n&&(i.callback=n),uo(e,i),ns(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Jl(),r=mo.suspense;(r=lo(n=Zl(n,e,r),r)).tag=2,null!=t&&(r.callback=t),uo(e,r),ns(e,n)}};function xo(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!Xr(n,r)||!Xr(i,o))}function Ao(e,t,n){var r=!1,i=ui,o=t.contextType;return"object"==typeof o&&null!==o?o=ro(o):(i=hi(t)?di:ci.current,o=(r=null!=(r=t.contextTypes))?pi(e,i):ui),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=wo,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function Co(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&wo.enqueueReplaceState(t,t.state,null)}function ko(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=bo;var o=t.contextType;"object"==typeof o&&null!==o?i.context=ro(o):(o=hi(t)?di:ci.current,i.context=pi(e,o)),null!==(o=e.updateQueue)&&(ho(e,o,n,i,r),i.state=e.memoizedState),"function"==typeof(o=t.getDerivedStateFromProps)&&(go(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&wo.enqueueReplaceState(i,i.state,null),null!==(o=e.updateQueue)&&(ho(e,o,n,i,r),i.state=e.memoizedState)),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var _o=Array.isArray;function Eo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw a(Error(309));var r=n.stateNode}if(!r)throw a(Error(147),e);var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===bo&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw a(Error(284));if(!n._owner)throw a(Error(290),e)}return e}function So(e,t){if("textarea"!==e.type)throw a(Error(31),"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Po(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,n){return(e=Ds(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=bt,n):r:(t.effectTag=bt,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=bt),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Ls(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=Eo(e,t,n),r.return=e,r):((r=zs(n.type,n.key,n.props,null,e.mode,r)).ref=Eo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Vs(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Us(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ls(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case N:return(n=zs(t.type,t.key,t.props,null,e.mode,n)).ref=Eo(e,null,t),n.return=e,n;case D:return(t=Vs(t,e.mode,n)).return=e,t}if(_o(t)||X(t))return(t=Us(t,e.mode,n,null)).return=e,t;So(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case N:return n.key===i?n.type===z?f(e,t,n.props.children,r,i):u(e,t,n,r):null;case D:return n.key===i?c(e,t,n,r):null}if(_o(n)||X(n))return null!==i?null:f(e,t,n,r,null);So(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case N:return e=e.get(null===r.key?n:r.key)||null,r.type===z?f(t,e,r.props.children,i,r.key):u(t,e,r,i);case D:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(_o(r)||X(r))return f(t,e=e.get(n)||null,r,i,null);So(t,r)}return null}function y(i,a,l,s){for(var u=null,c=null,f=a,y=a=0,v=null;null!==f&&y<l.length;y++){f.index>y?(v=f,f=null):v=f.sibling;var m=p(i,f,l[y],s);if(null===m){null===f&&(f=v);break}e&&f&&null===m.alternate&&t(i,f),a=o(m,a,y),null===c?u=m:c.sibling=m,c=m,f=v}if(y===l.length)return n(i,f),u;if(null===f){for(;y<l.length;y++)null!==(f=d(i,l[y],s))&&(a=o(f,a,y),null===c?u=f:c.sibling=f,c=f);return u}for(f=r(i,f);y<l.length;y++)null!==(v=h(f,i,y,l[y],s))&&(e&&null!==v.alternate&&f.delete(null===v.key?y:v.key),a=o(v,a,y),null===c?u=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(i,e)})),u}function v(i,l,s,u){var c=X(s);if("function"!=typeof c)throw a(Error(150));if(null==(s=c.call(s)))throw a(Error(151));for(var f=c=null,y=l,v=l=0,m=null,b=s.next();null!==y&&!b.done;v++,b=s.next()){y.index>v?(m=y,y=null):m=y.sibling;var g=p(i,y,b.value,u);if(null===g){null===y&&(y=m);break}e&&y&&null===g.alternate&&t(i,y),l=o(g,l,v),null===f?c=g:f.sibling=g,f=g,y=m}if(b.done)return n(i,y),c;if(null===y){for(;!b.done;v++,b=s.next())null!==(b=d(i,b.value,u))&&(l=o(b,l,v),null===f?c=b:f.sibling=b,f=b);return c}for(y=r(i,y);!b.done;v++,b=s.next())null!==(b=h(y,i,v,b.value,u))&&(e&&null!==b.alternate&&y.delete(null===b.key?v:b.key),l=o(b,l,v),null===f?c=b:f.sibling=b,f=b);return e&&y.forEach((function(e){return t(i,e)})),c}return function(e,r,o,s){var u="object"==typeof o&&null!==o&&o.type===z&&null===o.key;u&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case N:e:{for(c=o.key,u=r;null!==u;){if(u.key===c){if(7===u.tag?o.type===z:u.elementType===o.type){n(e,u.sibling),(r=i(u,o.type===z?o.props.children:o.props)).ref=Eo(e,u,o),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}o.type===z?((r=Us(o.props.children,e.mode,s,o.key)).return=e,e=r):((s=zs(o.type,o.key,o.props,null,e.mode,s)).ref=Eo(e,r,o),s.return=e,e=s)}return l(e);case D:e:{for(u=o.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Vs(o,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=Ls(o,e.mode,s)).return=e,e=r),l(e);if(_o(o))return y(e,r,o,s);if(X(o))return v(e,r,o,s);if(c&&So(e,o),void 0===o&&!u)switch(e.tag){case 1:case 0:throw e=e.type,a(Error(152),e.displayName||e.name||"Component")}return n(e,r)}}var To=Po(!0),Oo=Po(!1),Mo={},Io={current:Mo},Bo={current:Mo},jo={current:Mo};function Ro(e){if(e===Mo)throw a(Error(174));return e}function No(e,t){si(jo,t),si(Bo,e),si(Io,Mo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Le(null,"");break;default:t=Le(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}li(Io),si(Io,t)}function Do(e){li(Io),li(Bo),li(jo)}function zo(e){Ro(jo.current);var t=Ro(Io.current),n=Le(t,e.type);t!==n&&(si(Bo,e),si(Io,n))}function Uo(e){Bo.current===e&&(li(Io),li(Bo))}var Lo={current:0};function Vo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===qn||n.data===Kn))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if((64&t.effectTag)!==mt)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Fo(e,t){return{responder:e,props:t}}var Wo=B.ReactCurrentDispatcher,Go=0,Ho=null,$o=null,qo=null,Ko=null,Qo=null,Xo=null,Yo=0,Jo=null,Zo=0,ea=!1,ta=null,na=0;function ra(){throw a(Error(321))}function ia(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Kr(e[n],t[n]))return!1;return!0}function oa(e,t,n,r,i,o){if(Go=o,Ho=t,qo=null!==e?e.memoizedState:null,Wo.current=null===qo?ba:ga,t=n(r,i),ea){do{ea=!1,na+=1,qo=null!==e?e.memoizedState:null,Xo=Ko,Jo=Qo=$o=null,Wo.current=ga,t=n(r,i)}while(ea);ta=null,na=0}if(Wo.current=ma,(e=Ho).memoizedState=Ko,e.expirationTime=Yo,e.updateQueue=Jo,e.effectTag|=Zo,e=null!==$o&&null!==$o.next,Go=0,Xo=Qo=Ko=qo=$o=Ho=null,Yo=0,Jo=null,Zo=0,e)throw a(Error(300));return t}function aa(){Wo.current=ma,Go=0,Xo=Qo=Ko=qo=$o=Ho=null,Yo=0,Jo=null,Zo=0,ea=!1,ta=null,na=0}function la(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Qo?Ko=Qo=e:Qo=Qo.next=e,Qo}function sa(){if(null!==Xo)Xo=(Qo=Xo).next,qo=null!==($o=qo)?$o.next:null;else{if(null===qo)throw a(Error(310));var e={memoizedState:($o=qo).memoizedState,baseState:$o.baseState,queue:$o.queue,baseUpdate:$o.baseUpdate,next:null};Qo=null===Qo?Ko=e:Qo.next=e,qo=$o.next}return Qo}function ua(e,t){return"function"==typeof t?t(e):t}function ca(e){var t=sa(),n=t.queue;if(null===n)throw a(Error(311));if(n.lastRenderedReducer=e,0<na){var r=n.dispatch;if(null!==ta){var i=ta.get(n);if(void 0!==i){ta.delete(n);var o=t.memoizedState;do{o=e(o,i.action),i=i.next}while(null!==i);return Kr(o,t.memoizedState)||(Oa=!0),t.memoizedState=o,t.baseUpdate===n.last&&(t.baseState=o),n.lastRenderedState=o,[o,r]}}return[t.memoizedState,r]}r=n.last;var l=t.baseUpdate;if(o=t.baseState,null!==l?(null!==r&&(r.next=null),r=l.next):r=null!==r?r.next:null,null!==r){var s=i=null,u=r,c=!1;do{var f=u.expirationTime;f<Go?(c||(c=!0,s=l,i=o),f>Yo&&ms(Yo=f)):(vs(f,u.suspenseConfig),o=u.eagerReducer===e?u.eagerState:e(o,u.action)),l=u,u=u.next}while(null!==u&&u!==r);c||(s=l,i=o),Kr(o,t.memoizedState)||(Oa=!0),t.memoizedState=o,t.baseUpdate=s,t.baseState=i,n.lastRenderedState=o}return[t.memoizedState,n.dispatch]}function fa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Jo?(Jo={lastEffect:null}).lastEffect=e.next=e:null===(t=Jo.lastEffect)?Jo.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Jo.lastEffect=e),e}function da(e,t,n,r){var i=la();Zo|=e,i.memoizedState=fa(t,n,void 0,void 0===r?null:r)}function pa(e,t,n,r){var i=sa();r=void 0===r?null:r;var o=void 0;if(null!==$o){var a=$o.memoizedState;if(o=a.destroy,null!==r&&ia(r,a.deps))return void fa(0,n,o,r)}Zo|=e,i.memoizedState=fa(t,n,o,r)}function ha(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ya(){}function va(e,t,n){if(!(25>na))throw a(Error(301));var r=e.alternate;if(e===Ho||null!==r&&r===Ho)if(ea=!0,e={expirationTime:Go,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===ta&&(ta=new Map),void 0===(n=ta.get(t)))ta.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var i=Jl(),o=mo.suspense;o={expirationTime:i=Zl(i,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var l=t.last;if(null===l)o.next=o;else{var s=l.next;null!==s&&(o.next=s),l.next=o}if(t.last=o,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var u=t.lastRenderedState,c=r(u,n);if(o.eagerReducer=r,o.eagerState=c,Kr(c,u))return}catch(e){}ns(e,i)}}var ma={readContext:ro,useCallback:ra,useContext:ra,useEffect:ra,useImperativeHandle:ra,useLayoutEffect:ra,useMemo:ra,useReducer:ra,useRef:ra,useState:ra,useDebugValue:ra,useResponder:ra},ba={readContext:ro,useCallback:function(e,t){return la().memoizedState=[e,void 0===t?null:t],e},useContext:ro,useEffect:function(e,t){return da(516,192,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,da(4,36,ha.bind(null,t,e),n)},useLayoutEffect:function(e,t){return da(4,36,e,t)},useMemo:function(e,t){var n=la();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=la();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=va.bind(null,Ho,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},la().memoizedState=e},useState:function(e){var t=la();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ua,lastRenderedState:e}).dispatch=va.bind(null,Ho,e),[t.memoizedState,e]},useDebugValue:ya,useResponder:Fo},ga={readContext:ro,useCallback:function(e,t){var n=sa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ia(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:ro,useEffect:function(e,t){return pa(516,192,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,pa(4,36,ha.bind(null,t,e),n)},useLayoutEffect:function(e,t){return pa(4,36,e,t)},useMemo:function(e,t){var n=sa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ia(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ca,useRef:function(){return sa().memoizedState},useState:function(e){return ca(ua)},useDebugValue:ya,useResponder:Fo},wa=null,xa=null,Aa=!1;function Ca(e,t){var n=Rs(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function ka(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function _a(e){if(Aa){var t=xa;if(t){var n=t;if(!ka(e,t)){if(!(t=tr(n.nextSibling))||!ka(e,t))return e.effectTag=e.effectTag&~gt|bt,Aa=!1,void(wa=e);Ca(wa,n)}wa=e,xa=tr(t.firstChild)}else e.effectTag=e.effectTag&~gt|bt,Aa=!1,wa=e}}function Ea(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wa=e}function Sa(e){if(e!==wa)return!1;if(!Aa)return Ea(e),Aa=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Jn(t,e.memoizedProps))for(t=xa;t;)Ca(e,t),t=tr(t.nextSibling);if(Ea(e),13===e.tag)if(null===(e=null!==(e=e.memoizedState)?e.dehydrated:null))e=xa;else e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if(n===$n){if(0===t){e=tr(e.nextSibling);break e}t--}else n!==Hn&&n!==Kn&&n!==qn||t++}e=e.nextSibling}e=null}else e=wa?tr(e.stateNode.nextSibling):null;return xa=e,!0}function Pa(){xa=wa=null,Aa=!1}var Ta=B.ReactCurrentOwner,Oa=!1;function Ma(e,t,n,r){t.child=null===e?Oo(t,null,n,r):To(t,e.child,n,r)}function Ia(e,t,n,r,i){n=n.render;var o=t.ref;return no(t,i),r=oa(e,t,n,r,o,i),null===e||Oa?(t.effectTag|=1,Ma(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Ka(e,t,i))}function Ba(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Ns(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=zs(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ja(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:Xr)(i,r)&&e.ref===t.ref)?Ka(e,t,o):(t.effectTag|=1,(e=Ds(a,r)).ref=t.ref,e.return=t,t.child=e)}function ja(e,t,n,r,i,o){return null!==e&&Xr(e.memoizedProps,r)&&e.ref===t.ref&&(Oa=!1,i<o)?Ka(e,t,o):Na(e,t,n,r,o)}function Ra(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Na(e,t,n,r,i){var o=hi(n)?di:ci.current;return o=pi(t,o),no(t,i),n=oa(e,t,n,r,o,i),null===e||Oa?(t.effectTag|=1,Ma(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Ka(e,t,i))}function Da(e,t,n,r,i){if(hi(n)){var o=!0;gi(t)}else o=!1;if(no(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=bt),Ao(t,n,r),ko(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var s=a.context,u=n.contextType;"object"==typeof u&&null!==u?u=ro(u):u=pi(t,u=hi(n)?di:ci.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==u)&&Co(t,a,r,u),io=!1;var d=t.memoizedState;s=a.state=d;var p=t.updateQueue;null!==p&&(ho(t,p,r,a,i),s=t.memoizedState),l!==r||d!==s||fi.current||io?("function"==typeof c&&(go(t,n,c,r),s=t.memoizedState),(l=io||xo(t,n,l,r,d,s,u))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=u,r=l):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,l=t.memoizedProps,a.props=t.type===t.elementType?l:qi(t.type,l),s=a.context,"object"==typeof(u=n.contextType)&&null!==u?u=ro(u):u=pi(t,u=hi(n)?di:ci.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==u)&&Co(t,a,r,u),io=!1,s=t.memoizedState,d=a.state=s,null!==(p=t.updateQueue)&&(ho(t,p,r,a,i),d=t.memoizedState),l!==r||s!==d||fi.current||io?("function"==typeof c&&(go(t,n,c,r),d=t.memoizedState),(c=io||xo(t,n,l,r,s,d,u))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,u)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=u,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return za(e,t,n,r,o,i)}function za(e,t,n,r,i,o){Ra(e,t);var a=(64&t.effectTag)!==mt;if(!r&&!a)return i&&wi(t,n,!1),Ka(e,t,o);r=t.stateNode,Ta.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=To(t,e.child,null,o),t.child=To(t,null,l,o)):Ma(e,t,l,o),t.memoizedState=r.state,i&&wi(t,n,!0),t.child}function Ua(e){var t=e.stateNode;t.pendingContext?mi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mi(0,t.context,!1),No(e,t.containerInfo)}var La,Va,Fa,Wa,Ga={dehydrated:null,retryTime:1};function Ha(e,t,n){var r,i=t.mode,o=t.pendingProps,a=Lo.current,l=!1;if((r=(64&t.effectTag)!==mt)||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),si(Lo,1&a),null===e){if(l){if(l=o.fallback,(o=Us(null,i,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Us(l,i,n,null)).return=t,o.sibling=n,t.memoizedState=Ga,t.child=o,n}return i=o.children,t.memoizedState=null,t.child=Oo(t,null,i,n)}if(null!==e.memoizedState){if(i=(e=e.child).sibling,l){if(o=o.fallback,(n=Ds(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(i=Ds(i,o,i.expirationTime)).return=t,n.sibling=i,n.childExpirationTime=0,t.memoizedState=Ga,t.child=n,i}return n=To(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=o.fallback,(o=Us(null,i,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Us(l,i,n,null)).return=t,o.sibling=n,n.effectTag|=bt,o.childExpirationTime=0,t.memoizedState=Ga,t.child=o,n}return t.memoizedState=null,t.child=To(t,e,o.children,n)}function $a(e,t,n,r,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:i}:(o.isBackwards=t,o.rendering=null,o.last=r,o.tail=n,o.tailExpiration=0,o.tailMode=i)}function qa(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(Ma(e,t,r.children,n),0!=(2&(r=Lo.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&(64&e.effectTag)!==mt)e:for(e=t.child;null!==e;){if(13===e.tag){if(null!==e.memoizedState){e.expirationTime<n&&(e.expirationTime=n);var a=e.alternate;null!==a&&a.expirationTime<n&&(a.expirationTime=n),to(e.return,n)}}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(si(Lo,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(r=n.alternate)&&null===Vo(r)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),$a(t,!1,i,n,o);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(r=i.alternate)&&null===Vo(r)){t.child=i;break}r=i.sibling,i.sibling=n,n=i,i=r}$a(t,!0,n,null,o);break;case"together":$a(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ka(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&ms(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw a(Error(153));if(null!==t.child){for(n=Ds(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ds(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Qa(e){e.effectTag|=4}function Xa(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ya(e){switch(e.tag){case 1:hi(e.type)&&yi();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Do(),vi(),(64&(t=e.effectTag))!==mt)throw a(Error(285));return e.effectTag=-4097&t|64,e;case 5:return Uo(e),null;case 13:return li(Lo),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return li(Lo),null;case 4:return Do(),null;case 10:return eo(e),null;default:return null}}function Ja(e,t){return{value:e,source:t,stack:J(t)}}La=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Va=function(){},Fa=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var l,s,u=t.stateNode;switch(Ro(Io.current),e=null,n){case"input":a=Ee(u,a),r=Ee(u,r),e=[];break;case"option":a=Ie(u,a),r=Ie(u,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=je(u,a),r=je(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=Un)}for(l in Nn(n,r),n=null,a)if(!r.hasOwnProperty(l)&&a.hasOwnProperty(l)&&null!=a[l])if("style"===l)for(s in u=a[l])u.hasOwnProperty(s)&&(n||(n={}),n[s]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(p.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var c=r[l];if(u=null!=a?a[l]:void 0,r.hasOwnProperty(l)&&c!==u&&(null!=c||null!=u))if("style"===l)if(u){for(s in u)!u.hasOwnProperty(s)||c&&c.hasOwnProperty(s)||(n||(n={}),n[s]="");for(s in c)c.hasOwnProperty(s)&&u[s]!==c[s]&&(n||(n={}),n[s]=c[s])}else n||(e||(e=[]),e.push(l,n)),n=c;else"dangerouslySetInnerHTML"===l?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(e=e||[]).push(l,""+c)):"children"===l?u===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(l,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(p.hasOwnProperty(l)?(null!=c&&zn(o,l),e||u===c||(e=[])):(e=e||[]).push(l,c))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&Qa(t)}},Wa=function(e,t,n,r){n!==r&&Qa(t)};var Za="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=J(n)),null!==n&&Y(n.type),t=t.value,null!==e&&1===e.tag&&Y(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ts(e,t)}else t.current=null}function nl(e,t){switch(t.tag){case 0:case 11:case 15:rl(2,0,t);break;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:qi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:case 17:break;default:throw a(Error(163))}}function rl(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!=(r.tag&e)){var i=r.destroy;r.destroy=void 0,void 0!==i&&i()}0!=(r.tag&t)&&(i=r.create,r.destroy=i()),r=r.next}while(r!==n)}}function il(e,t,n){switch("function"==typeof Bs&&Bs(t),t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Fi(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var i=t;try{n()}catch(e){Ts(i,e)}}e=e.next}while(e!==r)}))}break;case 1:tl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Ts(e,t)}}(t,n);break;case 5:tl(t);break;case 4:sl(e,t,n)}}function ol(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,null!==t&&ol(t)}function al(e){return 5===e.tag||3===e.tag||4===e.tag}function ll(e){e:{for(var t=e.return;null!==t;){if(al(t)){var n=t;break e}t=t.return}throw a(Error(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw a(Error(161))}16&n.effectTag&&(We(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||al(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(n.effectTag&bt)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(n.effectTag&bt)){n=n.stateNode;break e}}for(var i=e;;){var o=5===i.tag||6===i.tag;if(o){var l=o?i.stateNode:i.stateNode.instance;if(n)if(r){var s=l;l=n,8===(o=t).nodeType?o.parentNode.insertBefore(s,l):o.insertBefore(s,l)}else t.insertBefore(l,n);else r?(8===(s=t).nodeType?(o=s.parentNode).insertBefore(l,s):(o=s).appendChild(l),null!=(s=s._reactRootContainer)||null!==o.onclick||(o.onclick=Un)):t.appendChild(l)}else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function sl(e,t,n){for(var r,i,o=t,l=!1;;){if(!l){l=o.return;e:for(;;){if(null===l)throw a(Error(160));switch(r=l.stateNode,l.tag){case 5:i=!1;break e;case 3:case 4:r=r.containerInfo,i=!0;break e}l=l.return}l=!0}if(5===o.tag||6===o.tag){e:for(var s=e,u=o,c=n,f=u;;)if(il(s,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===u)break;for(;null===f.sibling;){if(null===f.return||f.return===u)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}i?(s=r,u=o.stateNode,8===s.nodeType?s.parentNode.removeChild(u):s.removeChild(u)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,i=!0,o.child.return=o,o=o.child;continue}}else if(il(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(l=!1)}o.sibling.return=o.return,o=o.sibling}}function ul(e,t){switch(t.tag){case 0:case 11:case 14:case 15:rl(4,8,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[or]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Pe(n,r),Dn(e,i),t=Dn(e,r),i=0;i<o.length;i+=2){var l=o[i],s=o[i+1];"style"===l?jn(n,s):"dangerouslySetInnerHTML"===l?Fe(n,s):"children"===l?We(n,s):Ae(n,l,s,t)}switch(e){case"input":Te(n,r);break;case"textarea":Ne(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Be(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Be(n,!!r.multiple,r.defaultValue,!0):Be(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw a(Error(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:(t=t.stateNode).hydrate&&(t.hydrate=!1,vt(t.containerInfo));break;case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Ul=Ui()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,o.style.display=Bn("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}cl(t);break;case 19:cl(t);break;case 17:case 20:case 21:break;default:throw a(Error(163))}}function cl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Za),t.forEach((function(t){var r=Ms.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var fl="function"==typeof WeakMap?WeakMap:Map;function dl(e,t,n){(n=lo(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Fl||(Fl=!0,Wl=r),el(e,t)},n}function pl(e,t,n){(n=lo(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return el(e,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Gl?Gl=new Set([this]):Gl.add(this),el(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var hl=Math.ceil,yl=B.ReactCurrentDispatcher,vl=B.ReactCurrentOwner,ml=0,bl=8,gl=16,wl=32,xl=0,Al=1,Cl=2,kl=3,_l=4,El=5,Sl=6,Pl=ml,Tl=null,Ol=null,Ml=0,Il=xl,Bl=null,jl=1073741823,Rl=1073741823,Nl=null,Dl=0,zl=!1,Ul=0,Ll=500,Vl=null,Fl=!1,Wl=null,Gl=null,Hl=!1,$l=null,ql=90,Kl=null,Ql=0,Xl=null,Yl=0;function Jl(){return(Pl&(gl|wl))!==ml?1073741821-(Ui()/10|0):0!==Yl?Yl:Yl=1073741821-(Ui()/10|0)}function Zl(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Li();if(0==(4&t))return 99===r?1073741823:1073741822;if((Pl&gl)!==ml)return Ml;if(null!==n)e=1073741821-25*(1+((1073741821-e+(0|n.timeoutMs||5e3)/10)/25|0));else switch(r){case 99:e=1073741823;break;case 98:e=1073741821-10*(1+((1073741821-e+15)/10|0));break;case 97:case 96:e=1073741821-25*(1+((1073741821-e+500)/25|0));break;case 95:e=2;break;default:throw a(Error(326))}return null!==Tl&&e===Ml&&--e,e}var es,ts=0;function ns(e,t){if(50<Ql)throw Ql=0,Xl=null,a(Error(185));if(null!==(e=rs(e,t))){var n=Li();1073741823===t?(Pl&bl)!==ml&&(Pl&(gl|wl))===ml?ls(e):(os(e),Pl===ml&&Hi()):os(e),(4&Pl)===ml||98!==n&&99!==n||(null===Kl?Kl=new Map([[e,t]]):(void 0===(n=Kl.get(e))||n>t)&&Kl.set(e,t))}}function rs(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(Tl===i&&(ms(t),Il===_l&&Gs(i,Ml)),Hs(i,t)),i}function is(e){var t=e.lastExpiredTime;return 0!==t?t:Ws(e,t=e.firstPendingTime)?(t=e.lastPingedTime)>(e=e.nextKnownPendingLevel)?t:e:t}function os(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Gi(ls.bind(null,e));else{var t=is(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Jl();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var i=e.callbackPriority;if(e.callbackExpirationTime===t&&i>=r)return;n!==Bi&&Ci(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Gi(ls.bind(null,e)):Wi(r,as.bind(null,e),{timeout:10*(1073741821-t)-Ui()}),e.callbackNode=t}}}function as(e,t){if(Yl=0,t)return $s(e,t=Jl()),os(e),null;var n=is(e);if(0!==n){if(t=e.callbackNode,(Pl&(gl|wl))!==ml)throw a(Error(327));if(Es(),e===Tl&&n===Ml||ps(e,n),null!==Ol){var r=Pl;Pl|=gl;for(var i=ys();;)try{gs();break}catch(t){hs(e,t)}if(Ji(),Pl=r,yl.current=i,Il===Al)throw t=Bl,ps(e,n),Gs(e,n),os(e),t;if(null===Ol)switch(i=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,us(e,n),r=Il,Tl=null,r){case xl:case Al:throw a(Error(345));case Cl:if(2!==n){$s(e,2);break}Cs(e);break;case kl:if(Gs(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=As(i)),1073741823===jl&&10<(i=Ul+Ll-Ui())){if(zl){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,ps(e,n);break}}if(0!==(o=is(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=Zn(Cs.bind(null,e),i);break}Cs(e);break;case _l:if(Gs(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=As(i)),zl&&(0===(i=e.lastPingedTime)||i>=n)){e.lastPingedTime=n,ps(e,n);break}if(0!==(i=is(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Rl?r=10*(1073741821-Rl)-Ui():1073741823===jl?r=0:(r=10*(1073741821-jl)-5e3,0>(r=(i=Ui())-r)&&(r=0),(n=10*(1073741821-n)-i)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*hl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=Zn(Cs.bind(null,e),r);break}Cs(e);break;case El:if(1073741823!==jl&&null!==Nl){o=jl;var l=Nl;if(0>=(r=0|l.busyMinDurationMs)?r=0:(i=0|l.busyDelayMs,r=(o=Ui()-(10*(1073741821-o)-(0|l.timeoutMs||5e3)))<=i?0:i+r-o),10<r){Gs(e,n),e.timeoutHandle=Zn(Cs.bind(null,e),r);break}}Cs(e);break;case Sl:Gs(e,n);break;default:throw a(Error(329))}if(os(e),e.callbackNode===t)return as.bind(null,e)}}return null}function ls(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,e.finishedExpirationTime===t)Cs(e);else{if((Pl&(gl|wl))!==ml)throw a(Error(327));if(Es(),e===Tl&&t===Ml||ps(e,t),null!==Ol){var n=Pl;Pl|=gl;for(var r=ys();;)try{bs();break}catch(t){hs(e,t)}if(Ji(),Pl=n,yl.current=r,Il===Al)throw n=Bl,ps(e,t),Gs(e,t),os(e),n;if(null!==Ol)throw a(Error(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,us(e,t),Il===Sl?Gs(e,t):(Tl=null,Cs(e)),os(e)}}return null}function ss(){(Pl&(1|gl|wl))===ml&&(function(){if(null!==Kl){var e=Kl;Kl=null,e.forEach((function(e,t){$s(t,e),os(t)})),Hi()}}(),Es())}function us(e,t){var n=e.firstBatch;null!==n&&n._defer&&n._expirationTime>=t&&(Wi(97,(function(){return n._onComplete(),null})),Il=Sl)}function cs(e,t){var n=Pl;Pl|=1;try{return e(t)}finally{(Pl=n)===ml&&Hi()}}function fs(e,t,n,r){var i=Pl;Pl|=4;try{return Fi(98,e.bind(null,t,n,r))}finally{(Pl=i)===ml&&Hi()}}function ds(e,t){var n=Pl;Pl&=-2,Pl|=bl;try{return e(t)}finally{(Pl=n)===ml&&Hi()}}function ps(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,er(n)),null!==Ol)for(n=Ol.return;null!==n;){var r=n;switch(r.tag){case 1:var i=r.type.childContextTypes;null!=i&&yi();break;case 3:Do(),vi();break;case 5:Uo(r);break;case 4:Do();break;case 13:case 19:li(Lo);break;case 10:eo(r)}n=n.return}Tl=e,Ol=Ds(e.current,null),Ml=t,Il=xl,Bl=null,Rl=jl=1073741823,Nl=null,Dl=0,zl=!1}function hs(e,t){for(;;){try{if(Ji(),aa(),null===Ol||null===Ol.return)return Il=Al,Bl=t,null;e:{var n=e,r=Ol.return,i=Ol,o=t;if(t=Ml,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==o&&"object"==typeof o&&"function"==typeof o.then){var a=o,l=0!=(1&Lo.current),s=r;do{var u;if(u=13===s.tag){var c=s.memoizedState;if(null!==c)u=null!==c.dehydrated;else{var f=s.memoizedProps;u=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!l)}}if(u){var d=s.updateQueue;if(null===d){var p=new Set;p.add(a),s.updateQueue=p}else d.add(a);if(0==(2&s.mode)){if(s.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var h=lo(1073741823,null);h.tag=2,uo(i,h)}i.expirationTime=1073741823;break e}o=void 0,i=t;var y=n.pingCache;if(null===y?(y=n.pingCache=new fl,o=new Set,y.set(a,o)):void 0===(o=y.get(a))&&(o=new Set,y.set(a,o)),!o.has(i)){o.add(i);var v=Os.bind(null,n,a,i);a.then(v,v)}s.effectTag|=4096,s.expirationTime=t;break e}s=s.return}while(null!==s);o=Error((Y(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+J(i))}Il!==El&&(Il=Cl),o=Ja(o,i),s=r;do{switch(s.tag){case 3:a=o,s.effectTag|=4096,s.expirationTime=t,co(s,dl(s,a,t));break e;case 1:a=o;var m=s.type,b=s.stateNode;if((64&s.effectTag)===mt&&("function"==typeof m.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Gl||!Gl.has(b)))){s.effectTag|=4096,s.expirationTime=t,co(s,pl(s,a,t));break e}}s=s.return}while(null!==s)}Ol=xs(Ol)}catch(e){t=e;continue}break}}function ys(){var e=yl.current;return yl.current=ma,null===e?ma:e}function vs(e,t){e<jl&&2<e&&(jl=e),null!==t&&e<Rl&&2<e&&(Rl=e,Nl=t)}function ms(e){e>Dl&&(Dl=e)}function bs(){for(;null!==Ol;)Ol=ws(Ol)}function gs(){for(;null!==Ol&&!ki();)Ol=ws(Ol)}function ws(e){var t=es(e.alternate,e,Ml);return e.memoizedProps=e.pendingProps,null===t&&(t=xs(e)),vl.current=null,t}function xs(e){Ol=e;do{var t=Ol.alternate;if(e=Ol.return,(2048&Ol.effectTag)===mt){e:{var n=t,r=Ml,o=(t=Ol).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:hi(t.type)&&yi();break;case 3:Do(),vi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(null===n||null===n.child)&&Sa(t)&&Qa(t),Va(t);break;case 5:Uo(t),r=Ro(jo.current);var l=t.type;if(null!==n&&null!=t.stateNode)Fa(n,t,l,o,r),n.ref!==t.ref&&(t.effectTag|=128);else if(o){var s=Ro(Io.current);if(Sa(t)){l=void 0,n=(o=t).stateNode;var u=o.type,c=o.memoizedProps;switch(n[ir]=o,n[or]=c,u){case"iframe":case"object":case"embed":wn("load",n);break;case"video":case"audio":for(var f=0;f<Ze.length;f++)wn(Ze[f],n);break;case"source":wn("error",n);break;case"img":case"image":case"link":wn("error",n),wn("load",n);break;case"form":wn("reset",n),wn("submit",n);break;case"details":wn("toggle",n);break;case"input":Se(n,c),wn("invalid",n),zn(r,"onChange");break;case"select":n._wrapperState={wasMultiple:!!c.multiple},wn("invalid",n),zn(r,"onChange");break;case"textarea":Re(n,c),wn("invalid",n),zn(r,"onChange")}for(l in Nn(u,c),f=null,c)c.hasOwnProperty(l)&&(s=c[l],"children"===l?"string"==typeof s?n.textContent!==s&&(f=["children",s]):"number"==typeof s&&n.textContent!==""+s&&(f=["children",""+s]):p.hasOwnProperty(l)&&null!=s&&zn(r,l));switch(u){case"input":ke(n),Oe(n,c,!0);break;case"textarea":ke(n),De(n);break;case"select":case"option":break;default:"function"==typeof c.onClick&&(n.onclick=Un)}r=f,o.updateQueue=r,null!==r&&Qa(t)}else{c=l,n=o,u=t,f=9===r.nodeType?r:r.ownerDocument,s===ze.html&&(s=Ue(c)),s===ze.html?"script"===c?((c=f.createElement("div")).innerHTML="<script><\/script>",f=c.removeChild(c.firstChild)):"string"==typeof n.is?f=f.createElement(c,{is:n.is}):(f=f.createElement(c),"select"===c&&(c=f,n.multiple?c.multiple=!0:n.size&&(c.size=n.size))):f=f.createElementNS(s,c),(c=f)[ir]=u,c[or]=n,La(n=c,t,!1,!1),t.stateNode=n,s=r;var d=Dn(l,o);switch(l){case"iframe":case"object":case"embed":wn("load",n),r=o;break;case"video":case"audio":for(r=0;r<Ze.length;r++)wn(Ze[r],n);r=o;break;case"source":wn("error",n),r=o;break;case"img":case"image":case"link":wn("error",n),wn("load",n),r=o;break;case"form":wn("reset",n),wn("submit",n),r=o;break;case"details":wn("toggle",n),r=o;break;case"input":Se(n,o),r=Ee(n,o),wn("invalid",n),zn(s,"onChange");break;case"option":r=Ie(n,o);break;case"select":n._wrapperState={wasMultiple:!!o.multiple},r=i({},o,{value:void 0}),wn("invalid",n),zn(s,"onChange");break;case"textarea":Re(n,o),r=je(n,o),wn("invalid",n),zn(s,"onChange");break;default:r=o}Nn(l,r),u=void 0,c=l,f=n;var h=r;for(u in h)if(h.hasOwnProperty(u)){var y=h[u];"style"===u?jn(f,y):"dangerouslySetInnerHTML"===u?null!=(y=y?y.__html:void 0)&&Fe(f,y):"children"===u?"string"==typeof y?("textarea"!==c||""!==y)&&We(f,y):"number"==typeof y&&We(f,""+y):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(p.hasOwnProperty(u)?null!=y&&zn(s,u):null!=y&&Ae(f,u,y,d))}switch(l){case"input":ke(n),Oe(n,o,!1);break;case"textarea":ke(n),De(n);break;case"option":null!=o.value&&n.setAttribute("value",""+xe(o.value));break;case"select":r=n,n=o,r.multiple=!!n.multiple,null!=(u=n.value)?Be(r,!!n.multiple,u,!1):null!=n.defaultValue&&Be(r,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof r.onClick&&(n.onclick=Un)}Yn(l,o)&&Qa(t)}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw a(Error(166));break;case 6:if(n&&null!=t.stateNode)Wa(n,t,n.memoizedProps,o);else{if("string"!=typeof o&&null===t.stateNode)throw a(Error(166));l=Ro(jo.current),Ro(Io.current),Sa(t)?(r=t.stateNode,o=t.memoizedProps,r[ir]=t,r.nodeValue!==o&&Qa(t)):(r=t,(o=(9===l.nodeType?l:l.ownerDocument).createTextNode(o))[ir]=t,r.stateNode=o)}break;case 11:break;case 13:if(li(Lo),o=t.memoizedState,(64&t.effectTag)!==mt){t.expirationTime=r;break e}r=null!==o,o=!1,null===n?Sa(t):(o=null!==(l=n.memoizedState),r||null===l||null!==(l=n.child.sibling)&&(null!==(u=t.firstEffect)?(t.firstEffect=l,l.nextEffect=u):(t.firstEffect=t.lastEffect=l,l.nextEffect=null),l.effectTag=8)),r&&!o&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Lo.current)?Il===xl&&(Il=kl):(Il!==xl&&Il!==kl||(Il=_l),0!==Dl&&null!==Tl&&(Gs(Tl,Ml),Hs(Tl,Dl)))),(r||o)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Do(),Va(t);break;case 10:eo(t);break;case 9:case 14:break;case 17:hi(t.type)&&yi();break;case 19:if(li(Lo),null===(o=t.memoizedState))break;if(l=(64&t.effectTag)!==mt,null===(u=o.rendering)){if(l)Xa(o,!1);else if(Il!==xl||null!==n&&(64&n.effectTag)!==mt)for(n=t.child;null!==n;){if(null!==(u=Vo(n))){for(t.effectTag|=64,Xa(o,!1),null!==(o=u.updateQueue)&&(t.updateQueue=o,t.effectTag|=4),t.firstEffect=t.lastEffect=null,o=t.child;null!==o;)n=r,(l=o).effectTag&=bt,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(u=l.alternate)?(l.childExpirationTime=0,l.expirationTime=n,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null):(l.childExpirationTime=u.childExpirationTime,l.expirationTime=u.expirationTime,l.child=u.child,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,n=u.dependencies,l.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders}),o=o.sibling;si(Lo,1&Lo.current|2),t=t.child;break e}n=n.sibling}}else{if(!l)if(null!==(n=Vo(u))){if(t.effectTag|=64,l=!0,Xa(o,!0),null===o.tail&&"hidden"===o.tailMode){null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),null!==(t=t.lastEffect=o.lastEffect)&&(t.nextEffect=null);break}}else Ui()>o.tailExpiration&&1<r&&(t.effectTag|=64,l=!0,Xa(o,!1),t.expirationTime=t.childExpirationTime=r-1);o.isBackwards?(u.sibling=t.child,t.child=u):(null!==(r=o.last)?r.sibling=u:t.child=u,o.last=u)}if(null!==o.tail){0===o.tailExpiration&&(o.tailExpiration=Ui()+500),r=o.tail,o.rendering=r,o.tail=r.sibling,o.lastEffect=t.lastEffect,r.sibling=null,o=Lo.current,si(Lo,o=l?1&o|2:1&o),t=r;break e}break;case 20:case 21:break;default:throw a(Error(156),t.tag)}t=null}if(r=Ol,1===Ml||1!==r.childExpirationTime){for(o=0,l=r.child;null!==l;)(n=l.expirationTime)>o&&(o=n),(u=l.childExpirationTime)>o&&(o=u),l=l.sibling;r.childExpirationTime=o}if(null!==t)return t;null!==e&&(2048&e.effectTag)===mt&&(null===e.firstEffect&&(e.firstEffect=Ol.firstEffect),null!==Ol.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Ol.firstEffect),e.lastEffect=Ol.lastEffect),1<Ol.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Ol:e.firstEffect=Ol,e.lastEffect=Ol))}else{if(null!==(t=Ya(Ol)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Ol.sibling))return t;Ol=e}while(null!==Ol);return Il===xl&&(Il=El),null}function As(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function Cs(e){var t=Li();return Fi(99,ks.bind(null,e,t)),null}function ks(e,t){if(Es(),(Pl&(gl|wl))!==ml)throw a(Error(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw a(Error(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var i=As(n);if(e.firstPendingTime=i,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Tl&&(Ol=Tl=null,Ml=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var o=Pl;Pl|=wl,vl.current=null,Qn=gn;var l=Wn();if(Gn(l)){if("selectionStart"in l)var s={start:l.selectionStart,end:l.selectionEnd};else e:{var u=(s=(s=l.ownerDocument)&&s.defaultView||window).getSelection&&s.getSelection();if(u&&0!==u.rangeCount){s=u.anchorNode;var c=u.anchorOffset,f=u.focusNode;u=u.focusOffset;try{s.nodeType,f.nodeType}catch(e){s=null;break e}var d=0,p=-1,h=-1,y=0,v=0,m=l,b=null;t:for(;;){for(var g;m!==s||0!==c&&3!==m.nodeType||(p=d+c),m!==f||0!==u&&3!==m.nodeType||(h=d+u),3===m.nodeType&&(d+=m.nodeValue.length),null!==(g=m.firstChild);)b=m,m=g;for(;;){if(m===l)break t;if(b===s&&++y===c&&(p=d),b===f&&++v===u&&(h=d),null!==(g=m.nextSibling))break;b=(m=b).parentNode}m=g}s=-1===p||-1===h?null:{start:p,end:h}}else s=null}s=s||{start:0,end:0}}else s=null;Xn={focusedElem:l,selectionRange:s},gn=!1,Vl=i;do{try{_s()}catch(e){if(null===Vl)throw a(Error(330));Ts(Vl,e),Vl=Vl.nextEffect}}while(null!==Vl);Vl=i;do{try{for(l=e,s=t;null!==Vl;){var w=Vl.effectTag;if(16&w&&We(Vl.stateNode,""),128&w){var x=Vl.alternate;if(null!==x){var A=x.ref;null!==A&&("function"==typeof A?A(null):A.current=null)}}switch(w&(12|bt|gt)){case bt:ll(Vl),Vl.effectTag&=~bt;break;case 6:ll(Vl),Vl.effectTag&=~bt,ul(Vl.alternate,Vl);break;case gt:Vl.effectTag&=~gt;break;case 1028:Vl.effectTag&=~gt,ul(Vl.alternate,Vl);break;case 4:ul(Vl.alternate,Vl);break;case 8:sl(l,c=Vl,s),ol(c)}Vl=Vl.nextEffect}}catch(e){if(null===Vl)throw a(Error(330));Ts(Vl,e),Vl=Vl.nextEffect}}while(null!==Vl);if(A=Xn,x=Wn(),w=A.focusedElem,s=A.selectionRange,x!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==s&&Gn(w)&&(x=s.start,void 0===(A=s.end)&&(A=x),"selectionStart"in w?(w.selectionStart=x,w.selectionEnd=Math.min(A,w.value.length)):(A=(x=w.ownerDocument||document)&&x.defaultView||window).getSelection&&(A=A.getSelection(),c=w.textContent.length,l=Math.min(s.start,c),s=void 0===s.end?l:Math.min(s.end,c),!A.extend&&l>s&&(c=s,s=l,l=c),c=Fn(w,l),f=Fn(w,s),c&&f&&(1!==A.rangeCount||A.anchorNode!==c.node||A.anchorOffset!==c.offset||A.focusNode!==f.node||A.focusOffset!==f.offset)&&((x=x.createRange()).setStart(c.node,c.offset),A.removeAllRanges(),l>s?(A.addRange(x),A.extend(f.node,f.offset)):(x.setEnd(f.node,f.offset),A.addRange(x))))),x=[];for(A=w;A=A.parentNode;)1===A.nodeType&&x.push({element:A,left:A.scrollLeft,top:A.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<x.length;w++)(A=x[w]).element.scrollLeft=A.left,A.element.scrollTop=A.top}Xn=null,gn=!!Qn,Qn=null,e.current=n,Vl=i;do{try{for(w=r;null!==Vl;){var C=Vl.effectTag;if(36&C){var k=Vl.alternate;switch(A=w,(x=Vl).tag){case 0:case 11:case 15:rl(16,32,x);break;case 1:var _=x.stateNode;if(4&x.effectTag)if(null===k)_.componentDidMount();else{var E=x.elementType===x.type?k.memoizedProps:qi(x.type,k.memoizedProps);_.componentDidUpdate(E,k.memoizedState,_.__reactInternalSnapshotBeforeUpdate)}var S=x.updateQueue;null!==S&&yo(0,S,_);break;case 3:var P=x.updateQueue;if(null!==P){if(l=null,null!==x.child)switch(x.child.tag){case 5:l=x.child.stateNode;break;case 1:l=x.child.stateNode}yo(0,P,l)}break;case 5:var T=x.stateNode;null===k&&4&x.effectTag&&(A=T,Yn(x.type,x.memoizedProps)&&A.focus());break;case 6:case 4:case 12:break;case 13:if(null===x.memoizedState){var O=x.alternate;if(null!==O){var M=O.memoizedState;if(null!==M){var I=M.dehydrated;null!==I&&vt(I)}}}break;case 19:case 17:case 20:case 21:break;default:throw a(Error(163))}}if(128&C){var B=(x=Vl).ref;if(null!==B){var j=x.stateNode;switch(x.tag){case 5:var R=j;break;default:R=j}"function"==typeof B?B(R):B.current=R}}Vl=Vl.nextEffect}}catch(e){if(null===Vl)throw a(Error(330));Ts(Vl,e),Vl=Vl.nextEffect}}while(null!==Vl);Vl=null,ji(),Pl=o}else e.current=n;if(Hl)Hl=!1,$l=e,ql=t;else for(Vl=i;null!==Vl;)t=Vl.nextEffect,Vl.nextEffect=null,Vl=t;if(0===(t=e.firstPendingTime)&&(Gl=null),1073741823===t?e===Xl?Ql++:(Ql=0,Xl=e):Ql=0,"function"==typeof Is&&Is(n.stateNode,r),os(e),Fl)throw Fl=!1,e=Wl,Wl=null,e;return(Pl&bl)!==ml?null:(Hi(),null)}function _s(){for(;null!==Vl;){var e=Vl.effectTag;(256&e)!==mt&&nl(Vl.alternate,Vl),(512&e)===mt||Hl||(Hl=!0,Wi(97,(function(){return Es(),null}))),Vl=Vl.nextEffect}}function Es(){if(90!==ql){var e=97<ql?97:ql;return ql=90,Fi(e,Ss)}}function Ss(){if(null===$l)return!1;var e=$l;if($l=null,(Pl&(gl|wl))!==ml)throw a(Error(331));var t=Pl;for(Pl|=wl,e=e.current.firstEffect;null!==e;){try{var n=e;if((512&n.effectTag)!==mt)switch(n.tag){case 0:case 11:case 15:rl(128,0,n),rl(0,64,n)}}catch(t){if(null===e)throw a(Error(330));Ts(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Pl=t,Hi(),!0}function Ps(e,t,n){uo(e,t=dl(e,t=Ja(n,t),1073741823)),null!==(e=rs(e,1073741823))&&os(e)}function Ts(e,t){if(3===e.tag)Ps(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ps(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Gl||!Gl.has(r))){uo(n,e=pl(n,e=Ja(t,e),1073741823)),null!==(n=rs(n,1073741823))&&os(n);break}}n=n.return}}function Os(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Tl===e&&Ml===n?Il===_l||Il===kl&&1073741823===jl&&Ui()-Ul<Ll?ps(e,Ml):zl=!0:Ws(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),os(e)))}function Ms(e,t){var n=e.stateNode;null!==n&&n.delete(t),1===(t=1)&&(t=Zl(t=Jl(),e,null)),null!==(e=rs(e,t))&&os(e)}es=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||fi.current)Oa=!0;else{if(r<n){switch(Oa=!1,t.tag){case 3:Ua(t),Pa();break;case 5:if(zo(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:hi(t.type)&&gi(t);break;case 4:No(t,t.stateNode.containerInfo);break;case 10:Zi(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ha(e,t,n):(si(Lo,1&Lo.current),null!==(t=Ka(e,t,n))?t.sibling:null);si(Lo,1&Lo.current);break;case 19:if(r=t.childExpirationTime>=n,(64&e.effectTag)!==mt){if(r)return qa(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),si(Lo,Lo.current),!r)return null}return Ka(e,t,n)}Oa=!1}}else Oa=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=bt),e=t.pendingProps,i=pi(t,ci.current),no(t,n),i=oa(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,aa(),hi(r)){var o=!0;gi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&go(t,r,l,e),i.updater=wo,t.stateNode=i,i._reactInternalFiber=t,ko(t,r,e,n),t=za(null,t,r,!0,o,n)}else t.tag=0,Ma(null,t,i,n),t=t.child;return t;case 16:if(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=bt),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(i),1!==i._status)throw i._result;switch(i=i._result,t.type=i,o=t.tag=function(e){if("function"==typeof e)return Ns(e)?1:0;if(null!=e){if((e=e.$$typeof)===G)return 11;if(e===q)return 14}return 2}(i),e=qi(i,e),o){case 0:t=Na(null,t,i,e,n);break;case 1:t=Da(null,t,i,e,n);break;case 11:t=Ia(null,t,i,e,n);break;case 14:t=Ba(null,t,i,qi(i.type,e),r,n);break;default:throw a(Error(306),i,"")}return t;case 0:return r=t.type,i=t.pendingProps,Na(e,t,r,i=t.elementType===r?i:qi(r,i),n);case 1:return r=t.type,i=t.pendingProps,Da(e,t,r,i=t.elementType===r?i:qi(r,i),n);case 3:if(Ua(t),null===(r=t.updateQueue))throw a(Error(282));if(i=null!==(i=t.memoizedState)?i.element:null,ho(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===i)Pa(),t=Ka(e,t,n);else{if((i=t.stateNode.hydrate)&&(xa=tr(t.stateNode.containerInfo.firstChild),wa=t,i=Aa=!0),i)for(n=Oo(t,null,r,n),t.child=n;n;)n.effectTag=n.effectTag&~bt|gt,n=n.sibling;else Ma(e,t,r,n),Pa();t=t.child}return t;case 5:return zo(t),null===e&&_a(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,l=i.children,Jn(r,i)?l=null:null!==o&&Jn(r,o)&&(t.effectTag|=16),Ra(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ma(e,t,l,n),t=t.child),t;case 6:return null===e&&_a(t),null;case 13:return Ha(e,t,n);case 4:return No(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=To(t,null,r,n):Ma(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Ia(e,t,r,i=t.elementType===r?i:qi(r,i),n);case 7:return Ma(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ma(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,l=t.memoizedProps,Zi(t,o=i.value),null!==l){var s=l.value;if(0===(o=Kr(s,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,o):1073741823))){if(l.children===i.children&&!fi.current){t=Ka(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.dependencies;if(null!==u){l=s.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===s.tag&&((c=lo(n,null)).tag=2,uo(s,c)),s.expirationTime<n&&(s.expirationTime=n),null!==(c=s.alternate)&&c.expirationTime<n&&(c.expirationTime=n),to(s.return,n),u.expirationTime<n&&(u.expirationTime=n);break}c=c.next}}else l=10===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}}Ma(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,no(t,n),r=r(i=ro(i,o.unstable_observedBits)),t.effectTag|=1,Ma(e,t,r,n),t.child;case 14:return o=qi(i=t.type,t.pendingProps),Ba(e,t,i,o=qi(i.type,o),r,n);case 15:return ja(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:qi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=bt),t.tag=1,hi(r)?(e=!0,gi(t)):e=!1,no(t,n),Ao(t,r,i),ko(t,r,i,n),za(null,t,r,!0,e,n);case 19:return qa(e,t,n)}throw a(Error(156),t.tag)};var Is=null,Bs=null;function js(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=mt,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Rs(e,t,n,r){return new js(e,t,n,r)}function Ns(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ds(e,t){var n=e.alternate;return null===n?((n=Rs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=mt,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function zs(e,t,n,r,i,o){var l=2;if(r=e,"function"==typeof e)Ns(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case z:return Us(n.children,i,o,t);case W:l=8,i|=7;break;case U:l=8,i|=1;break;case L:return(e=Rs(12,n,t,8|i)).elementType=L,e.type=L,e.expirationTime=o,e;case H:return(e=Rs(13,n,t,i)).type=H,e.elementType=H,e.expirationTime=o,e;case $:return(e=Rs(19,n,t,i)).elementType=$,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case V:l=10;break e;case F:l=9;break e;case G:l=11;break e;case q:l=14;break e;case K:l=16,r=null;break e}throw a(Error(130),null==e?e:typeof e,"")}return(t=Rs(l,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function Us(e,t,n,r){return(e=Rs(7,e,r,t)).expirationTime=n,e}function Ls(e,t,n){return(e=Rs(6,e,null,t)).expirationTime=n,e}function Vs(e,t,n){return(t=Rs(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fs(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=this.firstBatch=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Ws(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Gs(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Hs(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function $s(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function qs(e,t,n,r,i,o){var l=t.current;e:if(n){t:{if(wt(n=n._reactInternalFiber)!==n||1!==n.tag)throw a(Error(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(hi(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw a(Error(171))}if(1===n.tag){var u=n.type;if(hi(u)){n=bi(n,u,s);break e}}n=s}else n=ui;return null===t.context?t.context=n:t.pendingContext=n,t=o,(i=lo(r,i)).payload={element:e},null!==(t=void 0===t?null:t)&&(i.callback=t),uo(l,i),ns(l,r),r}function Ks(e,t,n,r){var i=t.current,o=Jl(),a=mo.suspense;return qs(e,t,n,i=Zl(o,i,a),a,r)}function Qs(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Xs(e){var t=1073741821-25*(1+((1073741821-Jl()+500)/25|0));t<=ts&&--t,this._expirationTime=ts=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Ys(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Js(e,t,n){var r=new Fs(e,t,n=null!=n&&!0===n.hydrate),i=Rs(3,null,null,2===t?7:1===t?3:0);return r.current=i,i.stateNode=r,e[ar]=r.current,n&&0!==t&&function(e){var t=Tn(e);lt.forEach((function(n){On(n,e,t)})),st.forEach((function(n){On(n,e,t)}))}(9===e.nodeType?e:e.ownerDocument),r}function Zs(e,t,n){this._internalRoot=Js(e,t,n)}function eu(e,t){this._internalRoot=Js(e,2,t)}function tu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function nu(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var l=i;i=function(){var e=Qs(a);l.call(e)}}Ks(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Zs(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var s=i;i=function(){var e=Qs(a);s.call(e)}}ds((function(){Ks(t,a,e,i)}))}return Qs(a)}function ru(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!tu(t))throw a(Error(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:D,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}ee=function(e,t,n){switch(t){case"input":if(Te(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=cr(r);if(!i)throw a(Error(90));_e(r),Te(r,i)}}}break;case"textarea":Ne(e,n);break;case"select":null!=(t=n.value)&&Be(e,!!n.multiple,t,!1)}},Xs.prototype.render=function(e){if(!this._defer)throw a(Error(250));this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Ys;return qs(e,t,null,n,null,r._onCommit),r},Xs.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Xs.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(!this._defer||null===t)throw a(Error(251));if(this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,i=t;i!==this;)r=i,i=i._next;if(null===r)throw a(Error(251));r._next=i._next,this._next=t,e.firstBatch=this}if(this._defer=!1,t=n,(Pl&(gl|wl))!==ml)throw a(Error(253));$s(e,t),os(e),Hi(),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Xs.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Ys.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Ys.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];if("function"!=typeof n)throw a(Error(191),n);n()}}},eu.prototype.render=Zs.prototype.render=function(e,t){var n=this._internalRoot,r=new Ys;return null!==(t=void 0===t?null:t)&&r.then(t),Ks(e,n,null,r._onCommit),r},eu.prototype.unmount=Zs.prototype.unmount=function(e){var t=this._internalRoot,n=new Ys;return null!==(e=void 0===e?null:e)&&n.then(e),Ks(null,t,null,n._onCommit),n},eu.prototype.createBatch=function(){var e=new Xs(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},ae=cs,le=fs,se=ss,ue=function(e,t){var n=Pl;Pl|=2;try{return e(t)}finally{(Pl=n)===ml&&Hi()}};var iu,ou,au={createPortal:ru,findDOMNode:function(e){if(null==e)e=null;else if(1!==e.nodeType){var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw a(Error(188));throw a(Error(268),Object.keys(e))}e=null===(e=At(t))?null:e.stateNode}return e},hydrate:function(e,t,n){if(!tu(t))throw a(Error(200));return nu(null,e,t,!0,n)},render:function(e,t,n){if(!tu(t))throw a(Error(200));return nu(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!tu(n))throw a(Error(200));if(null==e||void 0===e._reactInternalFiber)throw a(Error(38));return nu(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!tu(e))throw a(Error(40));return!!e._reactRootContainer&&(ds((function(){nu(null,null,e,!1,(function(){e._reactRootContainer=null}))})),!0)},unstable_createPortal:function(){return ru.apply(void 0,arguments)},unstable_batchedUpdates:cs,unstable_interactiveUpdates:function(e,t,n,r){return ss(),fs(e,t,n,r)},unstable_discreteUpdates:fs,unstable_flushDiscreteUpdates:ss,flushSync:function(e,t){if((Pl&(gl|wl))!==ml)throw a(Error(187));var n=Pl;Pl|=1;try{return Fi(99,e.bind(null,t))}finally{Pl=n,Hi()}},unstable_createRoot:function(e,t){if(!tu(e))throw a(Error(299),"unstable_createRoot");return new eu(e,t)},unstable_createSyncRoot:function(e,t){if(!tu(e))throw a(Error(299),"unstable_createRoot");return new Zs(e,1,t)},unstable_flushControlled:function(e){var t=Pl;Pl|=1;try{Fi(99,e)}finally{(Pl=t)===ml&&Hi()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[sr,ur,cr,M.injectEventPluginsByName,d,Tt,function(e){S(e,Pt)},ie,oe,_n,O,Es,{current:!1}]}};ou=(iu={findFiberByHostInstance:lr,bundleType:0,version:"16.10.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Is=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Bs=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},iu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:B.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=At(e))?null:e.stateNode},findFiberByHostInstance:function(e){return ou?ou(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var lu={default:au},su=lu&&au||lu;e.exports=su.default||su},function(e,t,n){"use strict";e.exports=n(16)},function(e,t,n){"use strict";
/** @license React v0.16.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,i,o,a,l;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,u=null,c=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(c,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==s?setTimeout(r,0,e):(s=e,setTimeout(c,0))},i=function(e,t){u=setTimeout(e,t)},o=function(){clearTimeout(u)},a=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,y=window.clearTimeout,v=window.requestAnimationFrame,m=window.cancelAnimationFrame;if("undefined"!=typeof console&&("function"!=typeof v&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")),"object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var b=p.now();t.unstable_now=function(){return p.now()-b}}var g=!1,w=null,x=-1,A=5,C=0;a=function(){return t.unstable_now()>=C},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):A=0<e?Math.floor(1e3/e):33.33};var k=new MessageChannel,_=k.port2;k.port1.onmessage=function(){if(null!==w){var e=t.unstable_now();C=e+A;try{w(!0,e)?_.postMessage(null):(g=!1,w=null)}catch(e){throw _.postMessage(null),e}}else g=!1},r=function(e){w=e,g||(g=!0,_.postMessage(null))},i=function(e,n){x=h((function(){e(t.unstable_now())}),n)},o=function(){y(x),x=-1}}function E(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),i=e[r];if(!(void 0!==i&&0<T(i,t)))break e;e[r]=t,e[n]=i,n=r}}function S(e){return void 0===(e=e[0])?null:e}function P(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],l=o+1,s=e[l];if(void 0!==a&&0>T(a,n))void 0!==s&&0>T(s,a)?(e[r]=s,e[l]=n,r=l):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==s&&0>T(s,n)))break e;e[r]=s,e[l]=n,r=l}}}return t}return null}function T(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var O=[],M=[],I=1,B=null,j=3,R=!1,N=!1,D=!1;function z(e){for(var t=S(M);null!==t;){if(null===t.callback)P(M);else{if(!(t.startTime<=e))break;P(M),t.sortIndex=t.expirationTime,E(O,t)}t=S(M)}}function U(e){if(D=!1,z(e),!N)if(null!==S(O))N=!0,r(L);else{var t=S(M);null!==t&&i(U,t.startTime-e)}}function L(e,n){N=!1,D&&(D=!1,o()),R=!0;var r=j;try{for(z(n),B=S(O);null!==B&&(!(B.expirationTime>n)||e&&!a());){var l=B.callback;if(null!==l){B.callback=null,j=B.priorityLevel;var s=l(B.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?B.callback=s:B===S(O)&&P(O),z(n)}else P(O);B=S(O)}if(null!==B)var u=!0;else{var c=S(M);null!==c&&i(U,c.startTime-n),u=!1}return u}finally{B=null,j=r,R=!1}}function V(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var F=l;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=j;j=e;try{return t()}finally{j=n}},t.unstable_next=function(e){switch(j){case 1:case 2:case 3:var t=3;break;default:t=j}var n=j;j=t;try{return e()}finally{j=n}},t.unstable_scheduleCallback=function(e,n,a){var l=t.unstable_now();if("object"==typeof a&&null!==a){var s=a.delay;s="number"==typeof s&&0<s?l+s:l,a="number"==typeof a.timeout?a.timeout:V(e)}else a=V(e),s=l;return e={id:I++,callback:n,priorityLevel:e,startTime:s,expirationTime:a=s+a,sortIndex:-1},s>l?(e.sortIndex=s,E(M,e),null===S(O)&&e===S(M)&&(D?o():D=!0,i(U,s-l))):(e.sortIndex=a,E(O,e),N||R||(N=!0,r(L))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=j;return function(){var n=j;j=t;try{return e.apply(this,arguments)}finally{j=n}}},t.unstable_getCurrentPriorityLevel=function(){return j},t.unstable_shouldYield=function(){var e=t.unstable_now();z(e);var n=S(O);return n!==B&&null!==B&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<B.expirationTime||a()},t.unstable_requestPaint=F,t.unstable_continueExecution=function(){N||R||(N=!0,r(L))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return S(O)},t.unstable_Profiling=null},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=f(o),l=n(18),s=f(n(21)),u=f(n(22)),c=n(23);function f(e){return e&&e.__esModule?e:{default:e}}var d=(0,l.observer)(r=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"render",value:function(){return a.default.createElement(o.Fragment,null,a.default.createElement(u.default,{params:c.particlesConfig,style:c.particlesStyle}),a.default.createElement("div",{id:"sb-pane"},a.default.createElement("div",{id:"sb"},"Samuel BENAIS"),a.default.createElement("div",{id:"sb-title"},"IT Engineer"),a.default.createElement("div",{id:"sb-social"},a.default.createElement(s.default,{link:"https://github.com/Samb102",id:"github"}),a.default.createElement(s.default,{link:"https://stackoverflow.com/users/7757590/samb102",id:"stack-overflow"}),a.default.createElement(s.default,{link:"https://fr.linkedin.com/in/samuel-benaïs-bb1018a5",id:"linkedin"}),a.default.createElement(s.default,{link:"https://www.root-me.org/Samb101",id:"root-me"}))))}}]),t}(o.Component))||r;t.default=d},function(e,t,n){"use strict";n.r(t),n.d(t,"propTypes",(function(){return F})),n.d(t,"PropTypes",(function(){return F})),n.d(t,"onError",(function(){return Re})),n.d(t,"observer",(function(){return Ae})),n.d(t,"Observer",(function(){return Ce})),n.d(t,"renderReporter",(function(){return le})),n.d(t,"componentByNodeRegistery",(function(){return ae})),n.d(t,"componentByNodeRegistry",(function(){return ae})),n.d(t,"trackComponents",(function(){return he})),n.d(t,"useStaticRendering",(function(){return ye})),n.d(t,"Provider",(function(){return Te})),n.d(t,"inject",(function(){return ee})),n.d(t,"disposeOnUnmount",(function(){return je}));var r=n(1),i=n(0),o=n.n(i),a=n(2);
/** @license mobx-react v5.4.4
 * index.module.js
 *
 * Copyright (c) 2015 Michel Weststrate.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t,n){return t&&u(e.prototype,t),n&&u(e,n),e}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e,t){return e(t={exports:{}},t.exports),t.exports}var m,b=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,i=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.memo"):60115,y=n?Symbol.for("react.lazy"):60116;function v(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case o:case l:case a:return e;default:switch(e=e&&e.$$typeof){case u:case d:case s:return e;default:return t}}case i:return t}}}function m(e){return v(e)===f}t.typeOf=v,t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=d,t.Fragment=o,t.Profiler=l,t.Portal=i,t.StrictMode=a,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===f||e===l||e===a||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===h||e.$$typeof===s||e.$$typeof===u||e.$$typeof===d)},t.isAsyncMode=function(e){return m(e)||v(e)===c},t.isConcurrentMode=m,t.isContextConsumer=function(e){return v(e)===u},t.isContextProvider=function(e){return v(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return v(e)===d},t.isFragment=function(e){return v(e)===o},t.isProfiler=function(e){return v(e)===l},t.isPortal=function(e){return v(e)===i},t.isStrictMode=function(e){return v(e)===a}}));(m=b)&&m.__esModule&&Object.prototype.hasOwnProperty.call(m,"default")&&m.default;b.typeOf,b.AsyncMode,b.ConcurrentMode,b.ContextConsumer,b.ContextProvider,b.Element,b.ForwardRef,b.Fragment,b.Profiler,b.Portal,b.StrictMode,b.isValidElementType,b.isAsyncMode,b.isConcurrentMode,b.isContextConsumer,b.isContextProvider,b.isElement,b.isForwardRef,b.isFragment,b.isProfiler,b.isPortal,b.isStrictMode;var g=v((function(e){e.exports=b})),w={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},x={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},A={};A[g.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var C=Object.defineProperty,k=Object.getOwnPropertyNames,_=Object.getOwnPropertySymbols,E=Object.getOwnPropertyDescriptor,S=Object.getPrototypeOf,P=Object.prototype;var T=function e(t,n,r){if("string"!=typeof n){if(P){var i=S(n);i&&i!==P&&e(t,i,r)}var o=k(n);_&&(o=o.concat(_(n)));for(var a=A[t.$$typeof]||w,l=A[n.$$typeof]||w,s=0;s<o.length;++s){var u=o[s];if(!(x[u]||r&&r[u]||l&&l[u]||a&&a[u])){var c=E(n,u);try{C(t,u,c)}catch(e){}}}return t}return t},O=function(){function e(){s(this,e),this.listeners=[]}return c(e,[{key:"on",value:function(e){var t=this;return this.listeners.push(e),function(){var n=t.listeners.indexOf(e);-1!==n&&t.listeners.splice(n,1)}}},{key:"emit",value:function(e){this.listeners.forEach((function(t){return t(e)}))}}]),e}();function M(e){function t(t,n,i,o,a,l){for(var s=arguments.length,u=new Array(s>6?s-6:0),c=6;c<s;c++)u[c-6]=arguments[c];return Object(r.k)((function(){if(o=o||"<<anonymous>>",l=l||i,null==n[i]){if(t){var r=null===n[i]?"null":"undefined";return new Error("The "+a+" `"+l+"` is marked as required in `"+o+"`, but its value is `"+r+"`.")}return null}return e.apply(void 0,[n,i,o,a,l].concat(u))}))}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n}function I(e){var t=l(e);return Array.isArray(e)?"array":e instanceof RegExp?"object":function(e,t){return"symbol"===e||("Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol)}(t,e)?"symbol":t}function B(e,t){return M((function(n,i,o,a,l){return Object(r.k)((function(){if(e&&I(n[i])===t.toLowerCase())return null;var a;switch(t){case"Array":a=r.g;break;case"Object":a=r.i;break;case"Map":a=r.h;break;default:throw new Error("Unexpected mobxType: ".concat(t))}var s=n[i];if(!a(s)){var u=function(e){var t=I(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}(s),c=e?" or javascript `"+t.toLowerCase()+"`":"";return new Error("Invalid prop `"+l+"` of type `"+u+"` supplied to `"+o+"`, expected `mobx.Observable"+t+"`"+c+".")}return null}))}))}function j(e,t){return M((function(n,i,o,a,l){for(var s=arguments.length,u=new Array(s>5?s-5:0),c=5;c<s;c++)u[c-5]=arguments[c];return Object(r.k)((function(){if("function"!=typeof t)return new Error("Property `"+l+"` of component `"+o+"` has invalid PropType notation.");var r=B(e,"Array")(n,i,o);if(r instanceof Error)return r;for(var s=n[i],c=0;c<s.length;c++)if((r=t.apply(void 0,[s,c,o,a,l+"["+c+"]"].concat(u)))instanceof Error)return r;return null}))}))}var R=B(!1,"Array"),N=j.bind(null,!1),D=B(!1,"Map"),z=B(!1,"Object"),U=B(!0,"Array"),L=j.bind(null,!0),V=B(!0,"Object"),F=Object.freeze({observableArray:R,observableArrayOf:N,observableMap:D,observableObject:z,arrayOrObservableArray:U,arrayOrObservableArrayOf:L,objectOrObservableObject:V});var W=0;var G={};function H(e){return G[e]||(G[e]=function(e){if("function"==typeof Symbol)return Symbol(e);var t="__$mobx-react ".concat(e," (").concat(W,")");return W++,t}(e)),G[e]}var $=H("patchMixins"),q=H("patchedDefinition");function K(e,t){for(var n=this,r=arguments.length,i=new Array(r>2?r-2:0),o=2;o<r;o++)i[o-2]=arguments[o];t.locks++;try{var a;return null!=e&&(a=e.apply(this,i)),a}finally{t.locks--,0===t.locks&&t.methods.forEach((function(e){e.apply(n,i)}))}}function Q(e,t){return function(){for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];K.call.apply(K,[this,e,t].concat(r))}}function X(e,t){for(var n=function(e,t){var n=e[$]=e[$]||{},r=n[t]=n[t]||{};return r.locks=r.locks||0,r.methods=r.methods||[],r}(e,t),r=arguments.length,i=new Array(r>2?r-2:0),o=2;o<r;o++)i[o-2]=arguments[o];for(var a=0;a<i.length;a++){var l=i[a];n.methods.indexOf(l)<0&&n.methods.push(l)}var s=Object.getOwnPropertyDescriptor(e,t);if(!s||!s[q]){var u=e[t],c=function e(t,n,r,i,o){var a;var l=Q(o,i);return a={},f(a,q,!0),f(a,"get",(function(){return l})),f(a,"set",(function(o){if(this===t)l=Q(o,i);else{var a=e(this,n,r,i,o);Object.defineProperty(this,n,a)}})),f(a,"configurable",!0),f(a,"enumerable",r),a}(e,t,s?s.enumerable:void 0,n,u);Object.defineProperty(e,t,c)}}var Y={mobxStores:V};Object.seal(Y);var J={contextTypes:{get:function(){return Y},set:function(e){console.warn("Mobx Injector: you are trying to attach `contextTypes` on an component decorated with `inject` (or `observer`) HOC. Please specify the contextTypes on the wrapped component instead. It is accessible through the `wrappedComponent`")},configurable:!0,enumerable:!1},isMobxInjector:{value:!0,writable:!0,configurable:!0,enumerable:!0}};function Z(e,t,n){var r="inject-"+(t.displayName||t.name||t.constructor&&t.constructor.name||"Unknown");n&&(r+="-with-"+n);var o=function(n){function r(){var e,t;s(this,r);for(var n=arguments.length,i=new Array(n),o=0;o<n;o++)i[o]=arguments[o];return(t=y(this,(e=p(r)).call.apply(e,[this].concat(i)))).storeRef=function(e){t.wrappedInstance=e},t}return d(r,n),c(r,[{key:"render",value:function(){var n={};for(var r in this.props)this.props.hasOwnProperty(r)&&(n[r]=this.props[r]);var o=e(this.context.mobxStores||{},n,this.context)||{};for(var a in o)n[a]=o[a];return function(e){return!(e.prototype&&e.prototype.render)}(t)||(n.ref=this.storeRef),Object(i.createElement)(t,n)}}]),r}(i.Component);return o.displayName=r,T(o,t),o.wrappedComponent=t,Object.defineProperties(o,J),o}function ee(){var e;if("function"==typeof arguments[0])return e=arguments[0],function(t){var n=Z(e,t);return n.isMobxInjector=!1,(n=Ae(n)).isMobxInjector=!0,n};for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e=function(e){return function(t,n){return e.forEach((function(e){if(!(e in n)){if(!(e in t))throw new Error("MobX injector: Store '"+e+"' is not available! Make sure it is provided by some Provider");n[e]=t[e]}})),n}}(t),function(n){return Z(e,n,t.join("-"))}}var te=r.a||"$mobx",ne=H("isUnmounted"),re=!1,ie=!1,oe=!1,ae="undefined"!=typeof WeakMap?new WeakMap:void 0,le=new O,se=H("skipRender"),ue=H("isForcingUpdate"),ce="function"==typeof i.forwardRef&&Object(i.forwardRef)((function(e,t){})).$$typeof;function fe(e,t,n){Object.hasOwnProperty.call(e,t)?e[t]=n:Object.defineProperty(e,t,{enumerable:!1,configurable:!0,writable:!0,value:n})}function de(e){if(a.findDOMNode)try{return Object(a.findDOMNode)(e)}catch(e){return null}return null}function pe(e){var t=de(e);t&&ae&&ae.set(t,e),le.emit({event:"render",renderTime:e.__$mobRenderEnd-e.__$mobRenderStart,totalTime:Date.now()-e.__$mobRenderStart,component:e,node:t})}function he(){if("undefined"==typeof WeakMap)throw new Error("[mobx-react] tracking components is not supported in this browser.");re||(re=!0)}function ye(e){ie=e}var ve=new O;function me(e,t){if(be(e,t))return!0;if("object"!==l(e)||null===e||"object"!==l(t)||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var i=0;i<n.length;i++)if(!hasOwnProperty.call(t,n[i])||!be(e[n[i]],t[n[i]]))return!1;return!0}function be(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function ge(e){var t=this;if(!0===ie)return e.call(this);function n(){var e=this;s=!1;var t=void 0,n=void 0;if(u.track((function(){re&&(e.__$mobRenderStart=Date.now());try{n=Object(r.c)(!1,l)}catch(e){t=e}re&&(e.__$mobRenderEnd=Date.now())})),t)throw ve.emit(t),t;return n}var o=this.displayName||this.name||this.constructor&&(this.constructor.displayName||this.constructor.name)||"<component>",a=this._reactInternalInstance&&this._reactInternalInstance._rootNodeID||this._reactInternalInstance&&this._reactInternalInstance._debugID||this._reactInternalFiber&&this._reactInternalFiber._debugID;fe(this,se,!1),fe(this,ue,!1);var l=e.bind(this),s=!1,u=new r.b("".concat(o,"#").concat(a,".render()"),(function(){if(!s&&(s=!0,"function"==typeof t.componentWillReact&&t.componentWillReact(),!0!==t[ne])){var e=!0;try{fe(t,ue,!0),t[se]||i.Component.prototype.forceUpdate.call(t),e=!1}finally{fe(t,ue,!1),e&&u.dispose()}}}));return u.reactComponent=this,n[te]=u,this.render=n,n.call(this)}var we={componentWillUnmount:function(){if(!0!==ie&&(this.render[te]&&this.render[te].dispose(),this[ne]=!0,re)){var e=de(this);e&&ae&&ae.delete(e),le.emit({event:"destroy",component:this,node:e})}},componentDidMount:function(){re&&pe(this)},componentDidUpdate:function(){re&&pe(this)},shouldComponentUpdate:function(e,t){return ie&&console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side."),this.state!==t||!me(this.props,e)}};function xe(e,t){var n=H("reactProp_".concat(t,"_valueHolder")),i=H("reactProp_".concat(t,"_atomHolder"));function o(){return this[i]||fe(this,i,Object(r.e)("reactive "+t)),this[i]}Object.defineProperty(e,t,{configurable:!0,enumerable:!0,get:function(){return o.call(this).reportObserved(),this[n]},set:function(e){this[ue]||me(this[n],e)?fe(this,n,e):(fe(this,n,e),fe(this,se,!0),o.call(this).reportChanged(),fe(this,se,!1))}})}function Ae(e,t){if("string"==typeof e)throw new Error("Store names should be provided as array");if(Array.isArray(e))return oe||(oe=!0,console.warn('Mobx observer: Using observer to inject stores is deprecated since 4.0. Use `@inject("store1", "store2") @observer ComponentClass` or `inject("store1", "store2")(observer(componentClass))` instead of `@observer(["store1", "store2"]) ComponentClass`')),t?ee.apply(null,e)(Ae(t)):function(t){return Ae(e,t)};var n=e;if(!0===n.isMobxInjector&&console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'"),n.__proto__===i.PureComponent&&console.warn("Mobx observer: You are using 'observer' on React.PureComponent. These two achieve two opposite goals and should not be used together"),ce&&n.$$typeof===ce){var r=n.render;if("function"!=typeof r)throw new Error("render property of ForwardRef was not a function");return Object(i.forwardRef)((function(){var e=arguments;return o.a.createElement(Ce,null,(function(){return r.apply(void 0,e)}))}))}if(!("function"!=typeof n||n.prototype&&n.prototype.render||n.isReactClass||i.Component.isPrototypeOf(n))){var a,l,u=Ae((l=a=function(e){function t(){return s(this,t),y(this,p(t).apply(this,arguments))}return d(t,e),c(t,[{key:"render",value:function(){return n.call(this,this.props,this.context)}}]),t}(i.Component),a.displayName=n.displayName||n.name,a.contextTypes=n.contextTypes,a.propTypes=n.propTypes,a.defaultProps=n.defaultProps,l));return T(u,n),u}if(!n)throw new Error("Please pass a valid component to 'observer'");var f=n.prototype||n;!function(e){["componentDidMount","componentWillUnmount","componentDidUpdate"].forEach((function(t){!function(e,t){X(e,t,we[t])}(e,t)})),e.shouldComponentUpdate?e.shouldComponentUpdate!==we.shouldComponentUpdate&&console.warn("Use `shouldComponentUpdate` in an `observer` based component breaks the behavior of `observer` and might lead to unexpected results. Manually implementing `sCU` should not be needed when using mobx-react."):e.shouldComponentUpdate=we.shouldComponentUpdate}(f),n.isMobXReactObserver=!0,xe(f,"props"),xe(f,"state");var h=f.render;return f.render=function(){return ge.call(this,h)},n}var Ce=Ae((function(e){var t=e.children,n=e.inject,r=e.render,i=t||r;if(void 0===i)return null;if(!n)return i();console.warn("<Observer inject=.../> is no longer supported. Please use inject on the enclosing component instead");var a=ee(n)(i);return o.a.createElement(a,null)}));Ce.displayName="Observer";var ke=function(e,t,n,r,i){var o="children"===t?"render":"children";return"function"==typeof e[t]&&"function"==typeof e[o]?new Error("Invalid prop,do not use children and render in the same time in`"+n):"function"!=typeof e[t]&&"function"!=typeof e[o]?new Error("Invalid prop `"+i+"` of type `"+l(e[t])+"` supplied to `"+n+"`, expected `function`."):void 0};function _e(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function Ee(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function Se(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}Ce.propTypes={render:ke,children:ke},_e.__suppressDeprecationWarning=!0,Ee.__suppressDeprecationWarning=!0,Se.__suppressDeprecationWarning=!0;var Pe={children:!0,key:!0,ref:!0},Te=function(e){function t(e,n){var r;return s(this,t),(r=y(this,p(t).call(this,e,n))).state={},Oe(e,r.state),r}return d(t,e),c(t,[{key:"render",value:function(){return i.Children.only(this.props.children)}},{key:"getChildContext",value:function(){var e={};return Oe(this.context.mobxStores,e),Oe(this.props,e),{mobxStores:e}}}],[{key:"getDerivedStateFromProps",value:function(e,t){if(!e)return null;if(!t)return e;if(Object.keys(e).filter(Me).length!==Object.keys(t).filter(Me).length&&console.warn("MobX Provider: The set of provided stores has changed. Please avoid changing stores as the change might not propagate to all children"),!e.suppressChangedStoreWarning)for(var n in e)Me(n)&&t[n]!==e[n]&&console.warn("MobX Provider: Provided store '"+n+"' has changed. Please avoid replacing stores as the change might not propagate to all children");return e}}]),t}(i.Component);function Oe(e,t){if(e)for(var n in e)Me(n)&&(t[n]=e[n])}function Me(e){return!Pe[e]&&"suppressChangedStoreWarning"!==e}Te.contextTypes={mobxStores:V},Te.childContextTypes={mobxStores:V.isRequired},function(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,r=null,i=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?r="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(r="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?i="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(i="UNSAFE_componentWillUpdate"),null!==n||null!==r||null!==i){var o=e.displayName||e.name,a="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+o+" uses "+a+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==r?"\n  "+r:"")+(null!==i?"\n  "+i:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=_e,t.componentWillReceiveProps=Ee),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=Se;var l=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;l.call(this,e,t,r)}}}(Te);var Ie=H("disposeOnUnmount");function Be(){var e=this;this[Ie]&&(this[Ie].forEach((function(t){var n="string"==typeof t?e[t]:t;if(null!=n){if("function"!=typeof n)throw new Error("[mobx-react] disposeOnUnmount only works on functions such as disposers returned by reactions, autorun, etc.");n()}})),this[Ie]=[])}function je(e,t){if(Array.isArray(t))return t.map((function(t){return je(e,t)}));if(!e instanceof i.Component)throw new Error("[mobx-react] disposeOnUnmount only works on class based React components.");if("string"!=typeof t&&"function"!=typeof t)throw new Error("[mobx-react] disposeOnUnmount only works if the parameter is either a property key or a function.");var n=!!e[Ie];return(e[Ie]||(e[Ie]=[])).push(t),n||X(e,"componentWillUnmount",Be),"string"!=typeof t?t:void 0}if(!i.Component)throw new Error("mobx-react requires React to be available");if(!r.j)throw new Error("mobx-react requires mobx to be available");"function"==typeof a.unstable_batchedUpdates&&Object(r.d)({reactionScheduler:a.unstable_batchedUpdates});var Re=function(e){return ve.on(e)};if("object"===("undefined"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__?"undefined":l(__MOBX_DEVTOOLS_GLOBAL_HOOK__))){var Ne={spy:r.j,extras:{getDebugName:r.f}},De={renderReporter:le,componentByNodeRegistry:ae,componentByNodeRegistery:ae,trackComponents:he};__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobxReact(De,Ne)}},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var s,u=[],c=!1,f=-1;function d(){c&&s&&(c=!1,s.length?u=s.concat(u):f=-1,u.length&&p())}function p(){if(!c){var e=l(d);c=!0;for(var t=u.length;t;){for(s=u,u=[];++f<t;)s&&s[f].run();f=-1,t=u.length}s=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new h(e,t)),1!==u.length||c||l(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(0),o=(r=i)&&r.__esModule?r:{default:r};t.default=function(e){var t=e.link,n=e.id;return o.default.createElement("a",{className:"sb-social-network",href:t,target:"_blank"},o.default.createElement("div",{className:"sb-social-network-container"},o.default.createElement("img",{id:n,src:"/static/images/"+("root-me"===n?n+".jpg":n+".svg")})))}},function(e,t,n){var r;e.exports=(r=n(0),function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=27)}([function(e,t,n){var r=n(18),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();e.exports=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.CIRCLE="circle",e.EDGE="edge",e.TRIANGLE="triangle",e.POLYGON="polygon",e.STAR="star",e.IMAGE="image",e.IMAGES="images"}(t.ShapeType||(t.ShapeType={})),function(e){e.TOP="top",e.TOP_RIGHT="top-right",e.RIGHT="right",e.BOTTOM_RIGHT="bottom-right",e.BOTTOM="bottom",e.BOTTOM_LEFT="bottom-left",e.LEFT="left",e.TOP_LEFT="top-left",e.NONE="none"}(t.MoveDirection||(t.MoveDirection={})),function(e){e.BOUNCE="bounce",e.OUT="out"}(t.MoveOutMode||(t.MoveOutMode={})),function(e){e.GRAB="grab",e.PUSH="push",e.REMOVE="remove",e.BUBBLE="bubble",e.REPULSE="repulse"}(t.InteractivityMode||(t.InteractivityMode={})),function(e){e.INLINE="inline",e.INSIDE="inside",e.OUTSIDE="outside"}(t.PolygonType||(t.PolygonType={})),function(e){e.RANDOM_POINT="random-point",e.ONE_PER_POINT="one-per-point",e.RANDOM_LENGTH="random-length",e.EQUIDISTANT="equidistant"}(t.PolygonInlineArrangementType||(t.PolygonInlineArrangementType={})),function(e){e.PATH="path",e.RADIUS="radius"}(t.PolygonMoveType||(t.PolygonMoveType={}))},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=i(n(15));t.Interactivity=o.default;var a=i(n(29));t.Modes=a.default;var l=i(n(30));t.Particle=l.default;var s=i(n(31));t.ParticleManager=s.default;var u=i(n(32));t.ParticlesLibrary=u.default;var c=i(n(34));t.Vendors=c.default,r(n(35)),r(n(1)),r(n(36)),r(n(4))},function(e,t,n){var r=n(51),i=n(57);e.exports=function(e,t){var n=i(e,t);return r(n)?n:void 0}},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){return t.indexOf(e)>-1}Object.defineProperty(t,"__esModule",{value:!0}),t.hexToRgb=function(e){e=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(e,t,n,r){return t+t+n+n+r+r}));var t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return t?{r:parseInt(t[1],16),g:parseInt(t[2],16),b:parseInt(t[3],16)}:null},t.clamp=function(e,t,n){return Math.min(Math.max(e,t),n)},t.isInArray=i,t.isEqual=function(e,t){return Array.isArray(t)?i(e,t):t===e},t.deepAssign=function(e){for(var n=arguments.length,i=new Array(n>1?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];for(var a=0,l=i;a<l.length;a++){var s=l[a];if(null!=s){var u=r(s);if("object"===u){var c=Array.isArray(s);c?"object"===r(e)&&e&&Array.isArray(e)||(e=[]):"object"===r(e)&&e&&!Array.isArray(e)||(e={});var f=function(n){if("__proto__"===n)return"continue";var i=s[n];"object"===r(i)&&Array.isArray(i)?e[n]=i.map((function(r){return t.deepAssign(e[n],r)})):e[n]=t.deepAssign(e[n],i)};for(var d in s)f(d)}else e=s}}return e},t.getColor=function(e){var n={};if("object"==r(e))if(e instanceof Array){var i=e[Math.floor(Math.random()*e.length)];n.rgb=t.hexToRgb(i)}else{var o=e.r,a=e.g,l=e.b;if(void 0!==o&&void 0!==a&&void 0!==l)n.rgb={r:o,g:a,b:l};else{var s=e.h,u=e.s,c=e.l;void 0!==s&&void 0!==a&&void 0!==l&&(n.hsl={h:s,s:u,l:c})}}else"random"==e?n.rgb={r:Math.floor(255*Math.random())+1,g:Math.floor(255*Math.random())+1,b:Math.floor(255*Math.random())+1}:"string"==typeof e&&(n.rgb=t.hexToRgb(e));return n}},function(e,t,n){var r=n(41),i=n(42),o=n(43),a=n(44),l=n(45);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=i,s.prototype.get=o,s.prototype.has=a,s.prototype.set=l,e.exports=s},function(e,t,n){var r=n(16);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(12),i=n(53),o=n(54),a=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":a&&a in Object(e)?i(e):o(e)}},function(e,t,n){var r=n(3)(Object,"create");e.exports=r},function(e,t,n){var r=n(66);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){var r=n(3)(n(0),"Map");e.exports=r},function(e,t,n){var r=n(0).Symbol;e.exports=r},function(e,t){var n=Array.isArray;e.exports=n},function(e,t){e.exports=r},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0});var i,o=n(1);!function(e){e.MOUSEMOVE="mousemove",e.MOUSELEAVE="mouseleave"}(i=t.MouseInteractivityStatus||(t.MouseInteractivityStatus={}));var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.library=t,this.mouseMovePosition={x:0,y:0},this.mouseClickPosition={x:0,y:0},this.mouseClickTime=0,this.onMouseMove=this.onMouseMove.bind(this),this.onMouseLeave=this.onMouseLeave.bind(this),this.onMouseClick=this.onMouseClick.bind(this)}var t,n;return t=e,(n=[{key:"attachEventHandlers",value:function(){var e=this.library.getParameter((function(e){return e.interactivity}));"window"===e.detect_on?this.interactionElement=window:this.interactionElement=this.library.canvas.element,(e.events.onhover.enable||e.events.onclick.enable)&&(this.interactionElement.addEventListener("mousemove",this.onMouseMove),this.interactionElement.addEventListener("mouseleave",this.onMouseLeave)),e.events.onclick.enable&&this.interactionElement.addEventListener("click",this.onMouseClick)}},{key:"detachEventHandlers",value:function(){var e=this.library.getParameter((function(e){return e.interactivity}));this.interactionElement&&((e.events.onhover.enable||e.events.onclick.enable)&&(this.interactionElement.removeEventListener("mousemove",this.onMouseMove),this.interactionElement.removeEventListener("mouseleave",this.onMouseLeave)),e.events.onclick.enable&&this.interactionElement.removeEventListener("click",this.onMouseClick))}},{key:"onMouseMove",value:function(e){var t={x:0,y:0};this.interactionElement===window?(t.x=e.clientX,t.y=e.clientY):(t.x=e.offsetX||e.clientX,t.y=e.offsetY||e.clientY),this.mouseMovePosition=t,this.library.retina&&(this.mouseMovePosition.x*=this.library.canvas.pxratio,this.mouseMovePosition.y*=this.library.canvas.pxratio),this.mouseStatus=i.MOUSEMOVE}},{key:"onMouseLeave",value:function(){this.mouseMovePosition.x=0,this.mouseMovePosition.y=0,this.mouseStatus=i.MOUSELEAVE}},{key:"onMouseClick",value:function(){var e=this,t=this.library.getParameter((function(e){return e.interactivity})),n=this.library.getParameter((function(e){return e.particles})),r=this.library.getParameter((function(e){return e.polygon}));if(this.mouseClickPosition=Object.assign({},this.mouseMovePosition),r.enable&&[o.PolygonType.INSIDE,o.PolygonType.OUTSIDE].indexOf(r.type)>-1){var i=this.library.polygonMask.isPointInsidePolygon(this.mouseClickPosition);if(r.type===o.PolygonType.INSIDE&&!i)return;if(r.type===o.PolygonType.OUTSIDE&&i)return}if(this.mouseClickTime=(new Date).getTime(),t.events.onclick.enable)switch(t.events.onclick.mode){case o.InteractivityMode.PUSH:n.move.enable?this.library.modes.pushParticles(t.modes.push.particles_nb,this.mouseClickPosition):1==t.modes.push.particles_nb?this.library.modes.pushParticles(t.modes.push.particles_nb,this.mouseClickPosition):t.modes.push.particles_nb>1&&this.library.modes.pushParticles(t.modes.push.particles_nb);break;case o.InteractivityMode.REMOVE:this.library.modes.removeParticles(t.modes.remove.particles_nb);break;case o.InteractivityMode.BUBBLE:this.library.modes.bubble_clicking=!0;break;case o.InteractivityMode.REPULSE:this.library.modes.repulse_clicking=!0,this.library.modes.repulse_count=0,this.library.modes.repulse_finish=!1,setTimeout((function(){e.library.modes.repulse_clicking=!1}),1e3*t.modes.repulse.duration)}}},{key:"linkParticles",value:function(e,t){var n=this.library.manager.getDistance(e,t),r=this.library.canvas,i=this.library.getParameter((function(e){return e.particles.line_linked}));if(n<=i.distance){var o=i.opacity-n/(1/i.opacity)/i.distance;if(o>0){var a=i.color_rgb_line,l=a.r,s=a.g,u=a.b;r.ctx.save(),r.ctx.strokeStyle="rgba( ".concat(l,", ").concat(s,", ").concat(u,", ").concat(o," )"),r.ctx.lineWidth=i.width,r.ctx.beginPath(),i.shadow.enable&&(r.ctx.shadowBlur=i.shadow.blur,r.ctx.shadowColor=i.shadow.color),r.ctx.moveTo(e.x,e.y),r.ctx.lineTo(t.x,t.y),r.ctx.stroke(),r.ctx.closePath(),r.ctx.restore()}}}},{key:"attractParticles",value:function(e,t){var n=this.library.manager.getDistances(e,t),r=n.distance,i=n.distanceX,o=n.distanceY,a=this.library.getParameter((function(e){return e.particles.line_linked})),l=this.library.getParameter((function(e){return e.particles.move.attract}));if(r<=a.distance){var s=i/(1e3*l.rotateX),u=o/(1e3*l.rotateY);e.vx-=s,e.vy-=u,t.vx+=s,t.vy+=u}}},{key:"bounceParticles",value:function(e,t){this.library.manager.getDistance(e,t)<=e.radius+t.radius&&(e.vx=-e.vx,e.vy=-e.vy,t.vx=-t.vx,t.vy=-t.vy)}}])&&r(t.prototype,n),e}();t.default=a},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(7),i=n(19);e.exports=function(e){if(!i(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(52))},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var r=n(58),i=n(65),o=n(67),a=n(68),l=n(69);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=i,s.prototype.get=o,s.prototype.has=a,s.prototype.set=l,e.exports=s},function(e,t,n){var r=n(70),i=n(73),o=n(74);e.exports=function(e,t,n,a,l,s){var u=1&n,c=e.length,f=t.length;if(c!=f&&!(u&&f>c))return!1;var d=s.get(e);if(d&&s.get(t))return d==t;var p=-1,h=!0,y=2&n?new r:void 0;for(s.set(e,t),s.set(t,e);++p<c;){var v=e[p],m=t[p];if(a)var b=u?a(m,v,p,t,e,s):a(v,m,p,e,t,s);if(void 0!==b){if(b)continue;h=!1;break}if(y){if(!i(t,(function(e,t){if(!o(y,t)&&(v===e||l(v,e,n,a,s)))return y.push(t)}))){h=!1;break}}else if(v!==m&&!l(v,m,n,a,s)){h=!1;break}}return s.delete(e),s.delete(t),h}},function(e,t,n){(function(e){var r=n(0),i=n(91),o=t&&!t.nodeType&&t,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,l=a&&a.exports===o?r.Buffer:void 0,s=(l?l.isBuffer:void 0)||i;e.exports=s}).call(this,n(24)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r=n(93),i=n(94),o=n(95),a=o&&o.isTypedArray,l=a?i(a):r;e.exports=l},function(e,t){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(28));t.Particles=i.default,t.default=i.default},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function a(e,t,n){return(a="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=l(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var f=u(n(14)),d=n(14),p=n(2),h=c(n(37)),y=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?o(e):t}(this,l(t).call(this,e))).state={canvas:void 0,library:void 0},n.loadCanvas=n.loadCanvas.bind(o(n)),n}var n,u;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,d.Component),n=t,(u=[{key:"buildParticlesLibrary",value:function(e){try{if(void 0===window)return null}catch(e){return null}return new p.ParticlesLibrary(e)}},{key:"refresh",value:function(e){var t=this,n=this.state.canvas;n&&(this.destroy(),this.setState({library:this.buildParticlesLibrary(e.params)},(function(){t.loadCanvas(n)})))}},{key:"destroy",value:function(){this.state.library&&this.state.library.destroy()}},{key:"loadCanvas",value:function(e){var t=this;e&&this.setState({canvas:e},(function(){var n=t.state.library;n&&(n.loadCanvas(e),n.start())}))}},{key:"shouldComponentUpdate",value:function(e){return!h.default(e,this.props)}},{key:"componentDidUpdate",value:function(){this.refresh(this.props)}},{key:"forceUpdate",value:function(){this.refresh(this.props),a(l(t.prototype),"forceUpdate",this).call(this)}},{key:"componentDidMount",value:function(){this.setState({library:this.buildParticlesLibrary(this.props.params)})}},{key:"componentWillUnmount",value:function(){this.destroy(),this.setState({library:void 0})}},{key:"render",value:function(){var e=this.props,t=e.width,n=e.height,r=e.className,i=e.canvasClassName;return f.createElement("div",{className:r},f.createElement("canvas",{ref:this.loadCanvas,className:i,style:Object.assign({},this.props.style,{width:t,height:n})}))}}])&&i(n.prototype,u),t}();y.defaultProps={width:"100%",height:"100%",params:{},style:{}},t.default=y},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),o=n(1),a=n(15),l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.library=t,this.bubble_clicking=!1,this.bubble_duration_end=!1,this.pushing=!1,this.repulse_clicking=!1,this.repulse_count=0,this.repulse_finish=!1}var t,n;return t=e,(n=[{key:"pushParticles",value:function(e,t){var n=this.library.manager,r=this.library.getParameter((function(e){return e.particles}));this.pushing=!0;var o=e;r.number.max>0&&(o=r.array.length+e>r.number.max?r.number.max-r.array.length:e);for(var a=0;a<o;a++)r.array.push(new i.Particle(this.library,{position:t})),a===e-1&&(r.move.enable||n.particlesDraw(),this.pushing=!1)}},{key:"removeParticles",value:function(e){var t=this.library.manager,n=this.library.getParameter((function(e){return e.particles}));n.array.splice(0,e),n.move.enable||t.particlesDraw()}},{key:"bubbleParticle",value:function(e){var t=this,n=this.library.getParameter((function(e){return e.interactivity})),r=this.library.getParameter((function(e){return e.particles}));if(n.events.onhover.enable&&i.isInArray(o.InteractivityMode.BUBBLE,n.events.onhover.mode)){var l=this.library.manager.getDistance(e,this.library.interactivity.mouseMovePosition),s=n.modes.bubble.distance,u=1-l/s;if(l<=s){if(u>=0&&this.library.interactivity.mouseStatus===a.MouseInteractivityStatus.MOUSEMOVE){var c=n.modes.bubble.size,f=r.size.value;if(c!=f)if(c>f){var d=e.radius+c*u;d>=0&&(e.radius_bubble=d)}else{var p=e.radius-c,h=e.radius-p*u;e.radius_bubble=h>0?h:0}if(n.modes.bubble.opacity!==r.opacity.value)if(n.modes.bubble.opacity>r.opacity.value){var y=n.modes.bubble.opacity*u;y>e.opacityValue&&y<=n.modes.bubble.opacity&&(e.bubbleOpacity=y)}else{var v=e.opacityValue-(r.opacity.value-n.modes.bubble.opacity)*u;v<e.opacityValue&&v>=n.modes.bubble.opacity&&(e.bubbleOpacity=v)}}}else e.bubbleOpacity=e.opacityValue,e.radius_bubble=e.radius;this.library.interactivity.mouseStatus===a.MouseInteractivityStatus.MOUSELEAVE&&(e.bubbleOpacity=e.opacityValue,e.radius_bubble=e.radius)}else if(n.events.onclick.enable&&i.isInArray(o.InteractivityMode.BUBBLE,n.events.onclick.mode)&&this.bubble_clicking){var m=this.library.manager.getDistance(e,this.library.interactivity.mouseClickPosition),b=((new Date).getTime()-this.library.interactivity.mouseClickTime)/1e3;b>n.modes.bubble.duration&&(this.bubble_duration_end=!0),b>2*n.modes.bubble.duration&&(this.bubble_clicking=!1,this.bubble_duration_end=!1);var g=function(r,i,o,a,l){if(r!=i)if(t.bubble_duration_end){if(null!=o){var s=r+(r-(a-b*(a-r)/n.modes.bubble.duration));"size"==l&&(e.radius_bubble=s),"opacity"==l&&(e.bubbleOpacity=s)}}else if(m<=n.modes.bubble.distance){if((null!=o?o:a)!=r){var u=a-b*(a-r)/n.modes.bubble.duration;"size"==l&&(e.radius_bubble=u),"opacity"==l&&(e.bubbleOpacity=u)}}else"size"==l&&(e.radius_bubble=void 0),"opacity"==l&&(e.bubbleOpacity=void 0)};this.bubble_clicking&&(g(n.modes.bubble.size,r.size.value,e.radius_bubble,e.radius,"size"),g(n.modes.bubble.opacity,r.opacity.value,e.bubbleOpacity,e.opacityValue,"opacity"))}}},{key:"repulseParticle",value:function(e){var t=this.library.canvas,n=this.library.getParameter((function(e){return e.interactivity})),r=this.library.getParameter((function(e){return e.particles}));if(n.events.onhover.enable&&i.isInArray(o.InteractivityMode.REPULSE,n.events.onhover.mode)&&this.library.interactivity.mouseStatus===a.MouseInteractivityStatus.MOUSEMOVE){var l=this.library.manager.getDistances(e,this.library.interactivity.mouseMovePosition),s=l.distance,u={x:l.distanceX/s,y:l.distanceY/s},c=n.modes.repulse.distance,f=i.clamp(1/c*(-1*Math.pow(s/c,2)+1)*c*100,0,50),d={x:e.x+u.x*f,y:e.y+u.y*f};r.move.out_mode===o.MoveOutMode.BOUNCE?(d.x-e.radius>0&&d.x+e.radius<t.width&&(e.x=d.x),d.y-e.radius>0&&d.y+e.radius<t.height&&(e.y=d.y)):(e.x=d.x,e.y=d.y)}else if(n.events.onclick.enable&&i.isInArray(o.InteractivityMode.REPULSE,n.events.onclick.mode))if(this.repulse_finish||(this.repulse_count++,this.repulse_count==r.array.length&&(this.repulse_finish=!0)),this.repulse_clicking){var p=Math.pow(n.modes.repulse.distance/6,3),h=this.library.manager.getDistances(this.library.interactivity.mouseClickPosition,e),y=h.distance,v=h.distanceX,m=h.distanceY,b=p/Math.pow(y,2)*-1;if(y<=p){var g=Math.atan2(m,v);if(e.vx=b*Math.cos(g),e.vy=b*Math.sin(g),r.move.out_mode===o.MoveOutMode.BOUNCE){var w={x:e.x+e.vx,y:e.y+e.vy};w.x+e.radius>t.width?e.vx=-e.vx:w.x-e.radius<0&&(e.vx=-e.vx),w.y+e.radius>t.height?e.vy=-e.vy:w.y-e.radius<0&&(e.vy=-e.vy)}}}else!1===this.repulse_clicking&&(e.vx=e.vx_i,e.vy=e.vy_i)}},{key:"grabParticle",value:function(e){var t=this.library.canvas,n=this.library.getParameter((function(e){return e})),r=n.interactivity,i=n.particles;if(r.events.onhover.enable&&this.library.interactivity.mouseStatus===a.MouseInteractivityStatus.MOUSEMOVE){var o=this.library.manager.getDistance(e,this.library.interactivity.mouseMovePosition);if(o<=r.modes.grab.distance){var l=r.modes.grab,s=l.line_linked.opacity-o/(1/l.line_linked.opacity)/l.distance;if(s>0){var u=i.line_linked.color_rgb_line,c=u.r,f=u.g,d=u.b;t.ctx.strokeStyle="rgba( ".concat(c,", ").concat(f,", ").concat(d,", ").concat(s," )"),t.ctx.lineWidth=i.line_linked.width,t.ctx.beginPath(),t.ctx.moveTo(e.x,e.y),t.ctx.lineTo(this.library.interactivity.mouseMovePosition.x,this.library.interactivity.mouseMovePosition.y),t.ctx.stroke(),t.ctx.closePath()}}}}}])&&r(t.prototype,n),e}();t.default=l},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),o=n(1),a=n(4),l=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.color,i=n.move,o=n.opacity,a=n.polygon,l=n.position,s=n.shape,u=n.size;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.library=t,this.setupSize(u),this.setupPosition(i,a,l),this.setupColor(r),this.setupOpacity(o),this.setupAnimation(i),this.setupShape(s)}var t,n;return t=e,(n=[{key:"setupSize",value:function(e){var t=this.library.getParameter((function(e){return e.particles.size}));e=a.deepAssign({},t,e),this.radius=(e.random?Math.random():1)*e.value,e.anim.enable&&(this.size_status=!1,this.vs=e.anim.speed/100,e.anim.sync||(this.vs=this.vs*Math.random()))}},{key:"setupPosition",value:function(e,t,n){this.initialPosition=n;var r=this.library.getParameter((function(e){return e.particles.move}));e=a.deepAssign({},r,e);var i=this.library.getParameter((function(e){return e.polygon}));t=a.deepAssign({},i,t);var l=this.library.getParameter((function(e){return e.particles.array})),s=this.library,u=s.canvas,c=s.vendors;if(n)this.x=n.x,this.y=n.y;else if(t.enable){var f;switch(t.type){case o.PolygonType.INLINE:switch(t.inline.arrangement){case o.PolygonInlineArrangementType.RANDOM_POINT:f=this.library.polygonMask.getRandomPointOnPolygonPath();break;case o.PolygonInlineArrangementType.RANDOM_LENGTH:f=this.library.polygonMask.getRandomPointOnPolygonPathByLength();break;case o.PolygonInlineArrangementType.EQUIDISTANT:f=this.library.polygonMask.getEquidistantPoingOnPolygonPathByIndex(l.length);break;case o.PolygonInlineArrangementType.ONE_PER_POINT:default:f=this.library.polygonMask.getPoingOnPolygonPathByIndex(l.length)}break;case o.PolygonType.INSIDE:f=this.library.polygonMask.getRandomPointInsidePolygonPath();break;case o.PolygonType.OUTSIDE:f=this.library.polygonMask.getRandomPointOutsidePolygonPath()}f&&(this.x=f.x,this.y=f.y,this.initialPosition={x:this.x,y:this.y})}void 0!==this.x&&void 0!==this.y||(this.x=Math.random()*u.width,this.y=Math.random()*u.height),this.x>u.width-2*this.radius?this.x=this.x-this.radius:this.x<2*this.radius&&(this.x=this.x+this.radius),this.y>u.height-2*this.radius?this.y=this.y-this.radius:this.y<2*this.radius&&(this.y=this.y+this.radius),e.bounce&&c.checkOverlap(this,{x:this.x,y:this.y})}},{key:"setupColor",value:function(e){var t=this.library.getParameter((function(e){return e.particles.color}));e=a.deepAssign({},e,t),this.color=i.getColor(e.value)}},{key:"setupOpacity",value:function(e){var t=this.library.getParameter((function(e){return e.particles.opacity}));e=a.deepAssign({},t,e),this.opacityValue=(e.random?Math.random():1)*e.value,e.anim.enable&&(this.opacity_status=!1,this.vo=e.anim.speed/100,e.anim.sync||(this.vo=this.vo*Math.random()))}},{key:"setupAnimation",value:function(e){var t,n=this.library.getParameter((function(e){return e.particles.move}));switch((e=a.deepAssign({},n,e)).direction){case o.MoveDirection.TOP:t={x:0,y:-1};break;case o.MoveDirection.TOP_RIGHT:t={x:.5,y:-.5};break;case o.MoveDirection.RIGHT:t={x:1,y:0};break;case o.MoveDirection.BOTTOM_RIGHT:t={x:.5,y:.5};break;case o.MoveDirection.BOTTOM:t={x:0,y:1};break;case o.MoveDirection.BOTTOM_LEFT:t={x:-.5,y:1};break;case o.MoveDirection.LEFT:t={x:-1,y:0};break;case o.MoveDirection.TOP_LEFT:t={x:-.5,y:-.5};break;default:t={x:0,y:0}}e.straight?(this.vx=t.x,this.vy=t.y,e.random&&(this.vx=this.vx*Math.random(),this.vy=this.vy*Math.random())):(this.vx=t.x+Math.random()-.5,this.vy=t.y+Math.random()-.5),this.vx_i=this.vx,this.vy_i=this.vy}},{key:"setupShape",value:function(e){var t=this,n=this.library.getParameter((function(e){return e.particles.shape}));e=a.deepAssign({},n,e);var r=this.library.getParameter((function(e){return e.particles.array}));if(Array.isArray(e.type)){var i=e.type[Math.floor(Math.random()*e.type.length)];e=a.deepAssign({},e,{type:i})}this.shape=e,e.type!==o.ShapeType.IMAGE&&e.type!==o.ShapeType.IMAGES||(e.type===o.ShapeType.IMAGES?this.shapeImage=this.library.imageManager.getImage(r.length):this.shapeImage=this.library.imageManager.getImage(),"svg"===this.shapeImage.type&&void 0!==this.shapeImage.svgData&&this.library.imageManager.createSvgImage(this.shapeImage.svgData,{color:this.color,opacity:this.opacityValue}).then((function(e){t.shapeImage.elementData=e,t.shapeImage.loaded=!0})))}},{key:"draw",value:function(){var e,t,n,r=this.library,i=r.canvas,a=r.vendors;if(e=void 0!==this.radius_bubble?this.radius_bubble:this.radius,t=void 0!==this.bubbleOpacity?this.bubbleOpacity:this.opacityValue,this.color.rgb){var l=this.color.rgb,s=l.r,u=l.g,c=l.b;n="rgba( ".concat(s,", ").concat(u,", ").concat(c,", ").concat(t," )")}else{var f=this.color.hsl,d=f.h,p=f.s,h=f.l;n="hsla( ".concat(d,", ").concat(p,", ").concat(h,", ").concat(t," )")}switch(i.ctx.fillStyle=n,i.ctx.beginPath(),this.shape.type){case o.ShapeType.CIRCLE:i.ctx.arc(this.x,this.y,e,0,2*Math.PI,!1);break;case o.ShapeType.EDGE:i.ctx.rect(this.x-e,this.y-e,2*e,2*e);break;case o.ShapeType.TRIANGLE:a.drawShape(i.ctx,this.x-e,this.y+e/1.66,2*e,3,2);break;case o.ShapeType.POLYGON:a.drawShape(i.ctx,this.x-e/(this.shape.polygon.nb_sides/3.5),this.y-e/.76,2.66*e/(this.shape.polygon.nb_sides/3),this.shape.polygon.nb_sides,1);break;case o.ShapeType.STAR:a.drawShape(i.ctx,this.x-2*e/(this.shape.polygon.nb_sides/4),this.y-e/1.52,2*e*2.66/(this.shape.polygon.nb_sides/3),this.shape.polygon.nb_sides,2);break;case o.ShapeType.IMAGES:case o.ShapeType.IMAGE:this.shapeImage.elementData&&i.ctx.drawImage(this.shapeImage.elementData,this.x-e,this.y-e,2*e,2*e/this.shapeImage.ratio)}i.ctx.closePath(),this.shape.stroke.width>0&&(i.ctx.strokeStyle=this.shape.stroke.color,i.ctx.lineWidth=this.shape.stroke.width,i.ctx.stroke()),i.ctx.fill()}}])&&r(t.prototype,n),e}();t.default=l},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),o=n(1),a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.library=t,this.particlesCreate=this.particlesCreate.bind(this)}var t,n;return t=e,(n=[{key:"particlesCreate",value:function(){var e=this.library.getParameter((function(e){return e.particles})),t=this.library.getParameter((function(e){return e.polygon})),n=e.number.value;t.enable&&t.type===o.PolygonType.INLINE&&t.inline.arrangement===o.PolygonInlineArrangementType.ONE_PER_POINT&&(n=this.library.polygonMask.getVerticesNumber());for(var r=0;r<n;r++)e.array.push(new i.Particle(this.library))}},{key:"particlesUpdate",value:function(){var e=this,t=this.library,n=t.canvas,r=t.modes,a=this.library.getParameter((function(e){return e.interactivity})),l=this.library.getParameter((function(e){return e.particles})),s=this.library.getParameter((function(e){return e.polygon}));l.array.forEach((function(t,u){if(l.move.enable){var c=l.move.speed/2;t.x+=t.vx*c,t.y+=t.vy*c}var f;switch(l.opacity.anim.enable&&(1==t.opacity_status?(t.opacityValue>=l.opacity.value&&(t.opacity_status=!1),t.opacityValue+=t.vo):(t.opacityValue<=l.opacity.anim.opacity_min&&(t.opacity_status=!0),t.opacityValue-=t.vo),t.opacityValue<0&&(t.opacityValue=0)),l.size.anim.enable&&(1==t.size_status?(t.radius>=l.size.value&&(t.size_status=!1),t.radius+=t.vs):(t.radius<=l.size.anim.size_min&&(t.size_status=!0),t.radius-=t.vs),t.radius<0&&(t.radius=0)),f="bounce"==l.move.out_mode?{x_left:t.radius,x_right:n.width,y_top:t.radius,y_bottom:n.height}:{x_left:-t.radius,x_right:n.width+t.radius,y_top:-t.radius,y_bottom:n.height+t.radius},t.x-t.radius>n.width?(t.x=f.x_left,t.y=Math.random()*n.height):t.x+t.radius<0&&(t.x=f.x_right,t.y=Math.random()*n.height),t.y-t.radius>n.height?(t.y=f.y_top,t.x=Math.random()*n.width):t.y+t.radius<0&&(t.y=f.y_bottom,t.x=Math.random()*n.width),l.move.out_mode){case"bounce":if(s.enable){var d=s.move.radius;switch(s.type){case o.PolygonType.INLINE:e.getDistance(t.initialPosition,t)>d&&(t.vx=-t.vx+t.vy/2,t.vy=-t.vy+t.vx/2);break;case o.PolygonType.INSIDE:case o.PolygonType.OUTSIDE:var p=s.move.type;if(p===o.PolygonMoveType.RADIUS)e.getDistance(t.initialPosition,t)>d&&(t.vx=-t.vx+t.vy/2,t.vy=-t.vy+t.vx/2);else if(p===o.PolygonMoveType.PATH){var h=s.type===o.PolygonType.INSIDE,y=e.library.polygonMask.isPointInsidePolygon({x:t.x,y:t.y});(h&&!y||!h&&y)&&(t.vx=-t.vx+t.vy/2,t.vy=-t.vy+t.vx/2)}}}else t.x+t.radius>n.width?t.vx=-t.vx:t.x-t.radius<0&&(t.vx=-t.vx),t.y+t.radius>n.height?t.vy=-t.vy:t.y-t.radius<0&&(t.vy=-t.vy)}if(i.isInArray("grab",a.events.onhover.mode)&&r.grabParticle(t),(i.isInArray("bubble",a.events.onhover.mode)||i.isInArray("bubble",a.events.onclick.mode))&&r.bubbleParticle(t),(i.isInArray("repulse",a.events.onhover.mode)||i.isInArray("repulse",a.events.onclick.mode))&&r.repulseParticle(t),l.line_linked.enable||l.move.attract.enable)for(var v=u+1;v<l.array.length;v++){var m=l.array[v];l.line_linked.enable&&e.library.interactivity.linkParticles(t,m),l.move.attract.enable&&e.library.interactivity.attractParticles(t,m),l.move.bounce&&e.library.interactivity.bounceParticles(t,m)}}))}},{key:"getDistances",value:function(e,t){var n=e.x-t.x,r=e.y-t.y;return{distance:Math.sqrt(n*n+r*r),distanceX:n,distanceY:r}}},{key:"getDistance",value:function(e,t){return this.getDistances(e,t).distance}},{key:"particlesDraw",value:function(){var e=this.library,t=e.canvas,n=e.manager,r=this.library.getParameter((function(e){return e.particles})),i=this.library.getParameter((function(e){return e.polygon}));t.ctx.clearRect(0,0,t.width,t.height),n.particlesUpdate(),r.array.forEach((function(e){e.draw()})),i.enable&&i.draw.enable&&this.library.polygonMask.drawPolygon()}},{key:"particlesEmpty",value:function(){this.library.getParameter((function(e){return e.particles})).array=[]}},{key:"particlesRefresh",value:function(){cancelAnimationFrame(this.library.drawAnimFrame),this.particlesEmpty(),this.library.canvasClear(),this.library.start()}}])&&r(t.prototype,n),e}();t.default=a},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),o=n(33),a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.imageManager=new o.ImageManager,this.retina=!1,this.onWindowResize=this.onWindowResize.bind(this),this.loadParameters(t),this.interactivity=new i.Interactivity(this),this.modes=new i.Modes(this),this.vendors=new i.Vendors(this.imageManager,this.params,this),this.manager=new i.ParticleManager(this),this.polygonMask=new i.PolygonMask(this)}var t,n;return t=e,(n=[{key:"getParameter",value:function(e){return e(this.params)}},{key:"setParameters",value:function(e){this.params=i.deepAssign(Object.assign({},this.params),e)}},{key:"loadParameters",value:function(e){var t=i.deepAssign({},i.getDefaultParams(),e);this.params=t}},{key:"loadCanvas",value:function(e){this.canvas={element:e,width:e.offsetWidth,height:e.offsetHeight}}},{key:"start",value:function(){this.interactivity.attachEventHandlers(),this.vendors.start()}},{key:"destroy",value:function(){this.detachListeners(),this.interactivity.detachEventHandlers(),cancelAnimationFrame(this.drawAnimFrame),this.canvasClear()}},{key:"detachListeners",value:function(){window.removeEventListener("resize",this.onWindowResize)}},{key:"retinaInit",value:function(){var e=window.devicePixelRatio;if(this.params.retina_detect&&e>1){this.canvas.pxratio=e,this.canvas.width=this.canvas.element.offsetWidth*this.canvas.pxratio,this.canvas.height=this.canvas.element.offsetHeight*this.canvas.pxratio,this.retina=!0;var t=this.getParameter((function(e){return e}));this.setParameters({interactivity:{modes:{bubble:{distance:t.interactivity.modes.bubble.distance*e,size:t.interactivity.modes.bubble.size*e},grab:{distance:t.interactivity.modes.grab.distance*e},repulse:{distance:t.interactivity.modes.repulse.distance*e}}},particles:{line_linked:{distance:t.particles.line_linked.distance*e,width:t.particles.line_linked.width*e},move:{speed:t.particles.move.speed*e},size:{value:t.particles.size.value*e,anim:{speed:t.particles.size.anim.speed*e}}}})}else this.canvas.pxratio=1,this.retina=!1}},{key:"canvasInit",value:function(){var e=this.canvas;e.ctx=e.element.getContext("2d")}},{key:"canvasSize",value:function(){var e=this.canvas;e.element.width=e.width,e.element.height=e.height,this.params&&this.params.interactivity.events.resize&&window.addEventListener("resize",this.onWindowResize)}},{key:"canvasPaint",value:function(){var e=this.canvas;if(e&&e.ctx)try{e.ctx.fillRect(0,0,e.width,e.height)}catch(e){console.warn(e)}}},{key:"canvasClear",value:function(){var e=this.canvas;if(e&&e.ctx)try{e.ctx.clearRect(0,0,e.width,e.height)}catch(e){console.warn(e)}}},{key:"onWindowResize",value:function(){var e=this.canvas,t=this.manager,n=this.vendors;e.width=e.element.offsetWidth,e.height=e.element.offsetHeight,this.retina&&(e.width*=e.pxratio,e.height*=e.pxratio),e.element.width=e.width,e.element.height=e.height,!this.params.particles.move.enable||this.params.polygon.enable?(t.particlesEmpty(),this.polygonMask.initialize(this.getParameter((function(e){return e.polygon}))).then((function(){t.particlesCreate(),t.particlesDraw()}))):n.densityAutoParticles()}}])&&r(t.prototype,n),e}();t.default=a},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0});var i,o=n(1),a=n(4);!function(e){e.SINGLE="single",e.MULTIPLE="multiple"}(i=t.ImageMode||(t.ImageMode={}));var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.singleImage=null,this.multipleImages=[],this.mode=i.SINGLE}var t,n;return t=e,(n=[{key:"getImage",value:function(e){if(void 0!==e){if(0===this.multipleImages.length)throw new Error("No images loaded. You may need to define 'shape.type' = 'images'.");return this.multipleImages[e%this.multipleImages.length]}return this.singleImage}},{key:"parseShape",value:function(e){var t=this;if(a.isEqual(o.ShapeType.IMAGE,e.type))return this.mode=i.SINGLE,this.parseSingleImage(e.image).then((function(n){return t.singleImage=n,Object.assign({},e,{image:n})}));if(a.isEqual(o.ShapeType.IMAGES,e.type)){this.mode=i.MULTIPLE;var n=e.images.map((function(e){return t.parseSingleImage(e)}));return Promise.all(n).then((function(n){return t.multipleImages=n,Object.assign({},e,{images:n})}))}return Promise.resolve(e)}},{key:"parseSingleImage",value:function(e){var t,n=this.buildImageObject({height:e.height,width:e.width,src:e.src}),r=e.width/e.height;return r!==1/0&&0!==r||(r=1),n.ratio=r,(t=/^data:image\/(\w{3})\+xml;(.*?)base64,(.*)$/.exec(e.src))?(n.type=t[1],n.svgData=atob(t[3])):(t=/^.*(\w{3})$/.exec(e.src))&&(n.type=t[1]),this.loadImage(n)}},{key:"loadImage",value:function(e){return""!=(e=Object.assign({},e)).src?"svg"==e.type?e.svgData?Promise.resolve(e):this.downloadImage(e.src).then((function(t){return e.svgData=t.response,e})):new Promise((function(t){var n=new Image;n.addEventListener("load",(function(){e.elementData=n,t(e)})),n.src=e.src})):Promise.reject(new Error("Error react-particles-js - no image.src"))}},{key:"downloadImage",value:function(e){return new Promise((function(t,n){var r=new XMLHttpRequest;r.open("GET",e),r.onreadystatechange=function(e){4==r.readyState&&(200==r.status?t({response:e.currentTarget.response,xhr:r}):n(new Error("Error react-particles-js - Status code ".concat(r.readyState))))},r.send()}))}},{key:"createSvgImage",value:function(e,t){var n=e.replace(/#([0-9A-F]{3,6})|rgb\([0-9,]+\)/gi,(function(e,n,r,i){var o;if(t.color.rgb){var a=t.color.rgb,l=a.r,s=a.g,u=a.b;o="rgba( ".concat(l,", ").concat(s,", ").concat(u,", ").concat(t.opacity," )")}else{var c=t.color.hsl,f=c.h,d=c.s,p=c.l;o="rgba( ".concat(f,", ").concat(d,", ").concat(p,", ").concat(t.opacity," )")}return o})),r=new Blob([n],{type:"image/svg+xml;charset=utf-8"}),i=window.URL||window,o=i.createObjectURL(r);return new Promise((function(e){var t=new Image;t.addEventListener("load",(function(){i.revokeObjectURL(o),e(t)})),t.src=o}))}},{key:"buildImageObject",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.assign({svgData:null,height:0,width:0,ratio:0,src:"",type:""},e)}}])&&r(t.prototype,n),e}();t.ImageManager=l},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),o=n(1),a=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.imageManager=t,this.initialized=!1,this.params=n,this.library=r,"undefined"!=typeof performance&&(this.lastDraw=performance.now()),this.draw=this.draw.bind(this)}var t,n;return t=e,(n=[{key:"densityAutoParticles",value:function(){var e=this.library,t=e.canvas,n=e.modes,r=this.params.particles,i=r.number.density,o=i.value_area;if(i.enable){var a=t.element.width*t.element.height/1e3;this.library.retina&&(a/=2*t.pxratio);var l=a*r.number.value/o,s=r.array.length-l;s<0?n.pushParticles(Math.abs(s)):n.removeParticles(s)}}},{key:"checkOverlap",value:function(e,t){var n=this,r=this.library,i=r.canvas,a=r.vendors;i.width&&i.height&&this.params.particles.array.forEach((function(r){var l=r,s=e.x-l.x,u=e.y-l.y;if(Math.sqrt(s*s+u*u)<=e.radius+l.radius)if(n.library.params.polygon.enable)switch(n.library.params.polygon.inline.arrangement){case o.PolygonInlineArrangementType.RANDOM_LENGTH:case o.PolygonInlineArrangementType.RANDOM_POINT:}else e.x=t?t.x:Math.random()*i.width,e.y=t?t.y:Math.random()*i.height,a.checkOverlap(e)}))}},{key:"destroy",value:function(){cancelAnimationFrame(this.library.drawAnimFrame),this.library.canvas.element.remove()}},{key:"drawShape",value:function(e,t,n,r,i,o){var a=i*o,l=i/o,s=180*(l-2)/l,u=Math.PI-Math.PI*s/180;e.save(),e.beginPath(),e.translate(t,n),e.moveTo(0,0);for(var c=0;c<a;c++)e.lineTo(r,0),e.translate(r,0),e.rotate(u);e.fill(),e.restore()}},{key:"exportImg",value:function(){var e=this.library.canvas;window.open(e.element.toDataURL("image/png"),"_blank")}},{key:"draw",value:function(){var e=!0,t=this.library,n=t.manager,r=t.vendors,i=this.params.particles;void 0!==performance&&(performance.now()-this.lastDraw<1e3/this.params.fps_limit?e=!1:this.lastDraw=performance.now()),e&&n.particlesDraw(),i.move.enable?this.library.drawAnimFrame=requestAnimationFrame(r.draw):cancelAnimationFrame(this.library.drawAnimFrame)}},{key:"init",value:function(){var e=this;if(!this.initialized){this.initialized=!0;var t=this.library,n=t.manager,r=t.vendors,o=this.params.particles;t.retinaInit(),t.canvasInit(),t.canvasSize(),t.polygonMask.initialize(this.library.getParameter((function(e){return e.polygon}))).then((function(){n.particlesCreate(),r.densityAutoParticles(),e.library.setParameters({particles:{line_linked:{color_rgb_line:i.hexToRgb(o.line_linked.color)}}}),e.draw()}))}}},{key:"start",value:function(){var e=this,t=this.params.particles;this.imageManager.parseShape(t.shape).then((function(t){e.init()}))}}])&&r(t.prototype,n),e}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(4),o={particles:{number:{value:40,max:-1,density:{enable:!1,value_area:1200}},color:{value:"#FFF"},shape:{type:r.ShapeType.CIRCLE,stroke:{width:0,color:"#000000"},polygon:{nb_sides:5},image:{src:"",width:100,height:100},images:[]},opacity:{value:.5,random:!1,anim:{enable:!0,speed:1,opacity_min:.1,sync:!1}},size:{value:1,random:!1,anim:{enable:!1,speed:40,size_min:0,sync:!1}},line_linked:{enable:!0,distance:150,color:"#FFF",opacity:.6,width:1,shadow:{enable:!1,blur:5,color:"lime"}},move:{enable:!0,speed:3,direction:r.MoveDirection.NONE,random:!1,straight:!1,out_mode:r.MoveOutMode.BOUNCE,bounce:!0,attract:{enable:!1,rotateX:3e3,rotateY:3e3}},array:[]},interactivity:{detect_on:"canvas",events:{onhover:{enable:!1,mode:r.InteractivityMode.GRAB},onclick:{enable:!1,mode:r.InteractivityMode.REPULSE},resize:!0},modes:{grab:{distance:180,line_linked:{opacity:.35}},bubble:{distance:200,size:80,duration:.4},repulse:{distance:100,duration:5},push:{particles_nb:4},remove:{particles_nb:2}}},retina_detect:!0,fps_limit:999,polygon:{enable:!1,scale:1,type:r.PolygonType.INLINE,inline:{arrangement:r.PolygonInlineArrangementType.ONE_PER_POINT},draw:{enable:!1,stroke:{width:.5,color:"rgba(255, 255, 255, .1)"}},move:{radius:10,type:r.PolygonMoveType.PATH},url:""}};t.getDefaultParams=function(){return i.deepAssign({},o)}},function(e,t,n){"use strict";function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(i)throw o}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.library=t,this.polygonPathLength=0,this.initialized=!1,this.path2DSupported=!!window.Path2D,this.debounceTime=250,this.parseSvgPathToPolygon=this.parseSvgPathToPolygon.bind(this)}var t,n;return t=e,(n=[{key:"initialize",value:function(e){var t=this;return this.polygon=e,e.enable?this.initialized?new Promise((function(e){t.debounceTimer&&clearTimeout(t.debounceTimer),t.debounceTimer=setTimeout((function(){t.parseSvgPathToPolygon().then((function(t){e()}))}),t.debounceTime)})):this.parseSvgPathToPolygon().then((function(e){t.initialized=!0})):Promise.resolve()}},{key:"getVerticesNumber",value:function(){return this.initialized?this.polygonRaw.length:0}},{key:"parseSvgPathToPolygon",value:function(e){var t=this;e=e||this.polygon.url;var n=this.library.canvas.width===this.lastCanvasWidth&&this.library.canvas.height===this.lastCanvasHeight;return this.polygonRaw&&this.polygonRaw.length&&n?Promise.resolve(this.polygonRaw):this.parseSvgPath(e).then((function(e){return t.polygonData=e,t.polygonWidth=parseInt(t.polygonData.svg.getAttribute("width"))*t.polygon.scale,t.polygonHeight=parseInt(t.polygonData.svg.getAttribute("height"))*t.polygon.scale,t.polygonOffsetX=t.library.canvas.width/2-t.polygonWidth/2,t.polygonOffsetY=t.library.canvas.height/2-t.polygonHeight/2,t.polygonData.paths.length&&(t.polygonPathLength=t.polygonData.paths[0].getTotalLength()),t.polygonRaw=[],t.polygonData.paths.forEach((function(e){for(var n=e.pathSegList.numberOfItems,r=0;r<n;r++){var i={x:0,y:0},o=e.pathSegList.getItem(r);switch(o.pathSegType){case SVGPathSeg.PATHSEG_ARC_ABS:case SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:case SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:case SVGPathSeg.PATHSEG_LINETO_ABS:case SVGPathSeg.PATHSEG_MOVETO_ABS:i.x=o.x,i.y=o.y;case SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:i.x=o.x;break;case SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:i.y=o.y;break;case SVGPathSeg.PATHSEG_ARC_REL:case SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:case SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:case SVGPathSeg.PATHSEG_LINETO_REL:case SVGPathSeg.PATHSEG_MOVETO_REL:i.x=o.x,i.y=o.y;case SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:i.x=o.x;break;case SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:i.y=o.y;break;case SVGPathSeg.PATHSEG_UNKNOWN:case SVGPathSeg.PATHSEG_CLOSEPATH:default:continue}t.polygonRaw.push([i.x*t.polygon.scale+t.polygonOffsetX,i.y*t.polygon.scale+t.polygonOffsetY])}})),t.lastCanvasWidth=t.library.canvas.width,t.lastCanvasHeight=t.library.canvas.height,t.createPath2D(),t.polygonRaw}))}},{key:"parseSvgPath",value:function(e){return this.polygonData&&this.polygonData.paths&&this.polygonData.paths.length&&this.polygonData.svg?Promise.resolve(this.polygonData):this.library.imageManager.downloadImage(e).then((function(e){return{paths:[e.xhr.responseXML.getElementsByTagName("path")[0]],svg:e.xhr.responseXML.getElementsByTagName("svg")[0]}}))}},{key:"getRandomPointOnPolygonPath",value:function(){if(!this.initialized)throw new Error("No polygon data loaded.");var e=r(this.polygonRaw[Math.floor(Math.random()*this.polygonRaw.length)],2);return{x:e[0],y:e[1]}}},{key:"getRandomPointOnPolygonPathByLength",value:function(){if(!this.initialized)throw new Error("No polygon data loaded.");var e=this.polygonData.paths[0].getPointAtLength(Math.floor(Math.random()*this.polygonPathLength)+1);return{x:e.x*this.polygon.scale+this.polygonOffsetX,y:e.y*this.polygon.scale+this.polygonOffsetY}}},{key:"getRandomPointInsidePolygonPath",value:function(){if(!this.initialized)throw new Error("No polygon data loaded.");var e={x:Math.random()*this.library.canvas.width,y:Math.random()*this.library.canvas.height};return this.isPointInsidePolygon(e)?e:this.getRandomPointInsidePolygonPath()}},{key:"getRandomPointOutsidePolygonPath",value:function(){if(!this.initialized)throw new Error("No polygon data loaded.");var e={x:Math.random()*this.library.canvas.width,y:Math.random()*this.library.canvas.height};return this.isPointInsidePolygon(e)?this.getRandomPointOutsidePolygonPath():e}},{key:"isPointInsidePolygon",value:function(e){if(this.path2DSupported&&this.polygonPath)return this.library.canvas.ctx.isPointInPath(this.polygonPath,e.x,e.y);for(var t=!1,n=0,r=this.polygonRaw.length-1;n<this.polygonRaw.length;r=n++){var i=this.polygonRaw[n][0],o=this.polygonRaw[n][1],a=this.polygonRaw[r][0],l=this.polygonRaw[r][1];o>e.y!=l>e.y&&e.x<(a-i)*(e.y-o)/(l-o)+i&&(t=!t)}return t}},{key:"getPoingOnPolygonPathByIndex",value:function(e){if(!this.initialized)throw new Error("No polygon data loaded.");var t=r(this.polygonRaw[e%this.polygonRaw.length],2);return{x:t[0],y:t[1]}}},{key:"getEquidistantPoingOnPolygonPathByIndex",value:function(e){if(!this.initialized)throw new Error("No polygon data loaded.");var t=this.polygonData.paths[0].getPointAtLength(this.polygonPathLength/this.library.getParameter((function(e){return e.particles.number.value}))*e);return{x:t.x*this.polygon.scale+this.polygonOffsetX,y:t.y*this.polygon.scale+this.polygonOffsetY}}},{key:"drawPolygon",value:function(){var e=this.library.canvas.ctx;if(!this.path2DSupported){if(!this.initialized)return;e.beginPath(),e.moveTo(this.polygonRaw[0][0],this.polygonRaw[0][1]),this.polygonRaw.forEach((function(t,n){var i=r(t,2),o=i[0],a=i[1];n>0&&e.lineTo(o,a)})),e.closePath()}e.strokeStyle=this.polygon.draw.stroke.color,e.lineWidth=this.polygon.draw.stroke.width,this.polygonPath?e.stroke(this.polygonPath):e.stroke()}},{key:"createPath2D",value:function(){var e=this;this.path2DSupported&&(this.polygonPath=new Path2D,this.polygonPath.moveTo(this.polygonRaw[0][0],this.polygonRaw[0][1]),this.polygonRaw.forEach((function(t,n){var i=r(t,2),o=i[0],a=i[1];n>0&&e.polygonPath.lineTo(o,a)})),this.polygonPath.closePath())}}])&&i(t.prototype,n),e}();t.PolygonMask=o},function(e,t,n){var r=n(38);e.exports=function(e,t){return r(e,t)}},function(e,t,n){var r=n(39),i=n(10);e.exports=function e(t,n,o,a,l){return t===n||(null==t||null==n||!i(t)&&!i(n)?t!=t&&n!=n:r(t,n,o,a,e,l))}},function(e,t,n){var r=n(40),i=n(22),o=n(75),a=n(79),l=n(101),s=n(13),u=n(23),c=n(25),f="[object Arguments]",d="[object Array]",p="[object Object]",h=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,y,v,m){var b=s(e),g=s(t),w=b?d:l(e),x=g?d:l(t),A=(w=w==f?p:w)==p,C=(x=x==f?p:x)==p,k=w==x;if(k&&u(e)){if(!u(t))return!1;b=!0,A=!1}if(k&&!A)return m||(m=new r),b||c(e)?i(e,t,n,y,v,m):o(e,t,w,n,y,v,m);if(!(1&n)){var _=A&&h.call(e,"__wrapped__"),E=C&&h.call(t,"__wrapped__");if(_||E){var S=_?e.value():e,P=E?t.value():t;return m||(m=new r),v(S,P,n,y,m)}}return!!k&&(m||(m=new r),a(e,t,n,y,v,m))}},function(e,t,n){var r=n(5),i=n(46),o=n(47),a=n(48),l=n(49),s=n(50);function u(e){var t=this.__data__=new r(e);this.size=t.size}u.prototype.clear=i,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=l,u.prototype.set=s,e.exports=u},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(6),i=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0||(n==t.length-1?t.pop():i.call(t,n,1),--this.size,0))}},function(e,t,n){var r=n(6);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(6);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(6);e.exports=function(e,t){var n=this.__data__,i=r(n,e);return i<0?(++this.size,n.push([e,t])):n[i][1]=t,this}},function(e,t,n){var r=n(5);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(5),i=n(11),o=n(21);e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var a=n.__data__;if(!i||a.length<199)return a.push([e,t]),this.size=++n.size,this;n=this.__data__=new o(a)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var r=n(17),i=n(55),o=n(19),a=n(20),l=/^\[object .+?Constructor\]$/,s=Function.prototype,u=Object.prototype,c=s.toString,f=u.hasOwnProperty,d=RegExp("^"+c.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!o(e)||i(e))&&(r(e)?d:l).test(a(e))}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(12),i=Object.prototype,o=i.hasOwnProperty,a=i.toString,l=r?r.toStringTag:void 0;e.exports=function(e){var t=o.call(e,l),n=e[l];try{e[l]=void 0;var r=!0}catch(e){}var i=a.call(e);return r&&(t?e[l]=n:delete e[l]),i}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r,i=n(56),o=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!o&&o in e}},function(e,t,n){var r=n(0)["__core-js_shared__"];e.exports=r},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var r=n(59),i=n(5),o=n(11);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||i),string:new r}}},function(e,t,n){var r=n(60),i=n(61),o=n(62),a=n(63),l=n(64);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=i,s.prototype.get=o,s.prototype.has=a,s.prototype.set=l,e.exports=s},function(e,t,n){var r=n(8);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(8),i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return i.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(8),i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:i.call(t,e)}},function(e,t,n){var r=n(8);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},function(e,t,n){var r=n(9);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(9);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(9);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(9);e.exports=function(e,t){var n=r(this,e),i=n.size;return n.set(e,t),this.size+=n.size==i?0:1,this}},function(e,t,n){var r=n(21),i=n(71),o=n(72);function a(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}a.prototype.add=a.prototype.push=i,a.prototype.has=o,e.exports=a},function(e,t){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},function(e,t){e.exports=function(e,t){return e.has(t)}},function(e,t,n){var r=n(12),i=n(76),o=n(16),a=n(22),l=n(77),s=n(78),u=r?r.prototype:void 0,c=u?u.valueOf:void 0;e.exports=function(e,t,n,r,u,f,d){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!f(new i(e),new i(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var p=l;case"[object Set]":var h=1&r;if(p||(p=s),e.size!=t.size&&!h)return!1;var y=d.get(e);if(y)return y==t;r|=2,d.set(e,t);var v=a(p(e),p(t),r,u,f,d);return d.delete(e),v;case"[object Symbol]":if(c)return c.call(e)==c.call(t)}return!1}},function(e,t,n){var r=n(0).Uint8Array;e.exports=r},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},function(e,t,n){var r=n(80),i=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,o,a,l){var s=1&n,u=r(e),c=u.length;if(c!=r(t).length&&!s)return!1;for(var f=c;f--;){var d=u[f];if(!(s?d in t:i.call(t,d)))return!1}var p=l.get(e);if(p&&l.get(t))return p==t;var h=!0;l.set(e,t),l.set(t,e);for(var y=s;++f<c;){var v=e[d=u[f]],m=t[d];if(o)var b=s?o(m,v,d,t,e,l):o(v,m,d,e,t,l);if(!(void 0===b?v===m||a(v,m,n,o,l):b)){h=!1;break}y||(y="constructor"==d)}if(h&&!y){var g=e.constructor,w=t.constructor;g!=w&&"constructor"in e&&"constructor"in t&&!("function"==typeof g&&g instanceof g&&"function"==typeof w&&w instanceof w)&&(h=!1)}return l.delete(e),l.delete(t),h}},function(e,t,n){var r=n(81),i=n(83),o=n(86);e.exports=function(e){return r(e,o,i)}},function(e,t,n){var r=n(82),i=n(13);e.exports=function(e,t,n){var o=t(e);return i(e)?o:r(o,n(e))}},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}},function(e,t,n){var r=n(84),i=n(85),o=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,l=a?function(e){return null==e?[]:(e=Object(e),r(a(e),(function(t){return o.call(e,t)})))}:i;e.exports=l},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,i=0,o=[];++n<r;){var a=e[n];t(a,n,e)&&(o[i++]=a)}return o}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var r=n(87),i=n(96),o=n(100);e.exports=function(e){return o(e)?r(e):i(e)}},function(e,t,n){var r=n(88),i=n(89),o=n(13),a=n(23),l=n(92),s=n(25),u=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=o(e),c=!n&&i(e),f=!n&&!c&&a(e),d=!n&&!c&&!f&&s(e),p=n||c||f||d,h=p?r(e.length,String):[],y=h.length;for(var v in e)!t&&!u.call(e,v)||p&&("length"==v||f&&("offset"==v||"parent"==v)||d&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||l(v,y))||h.push(v);return h}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t,n){var r=n(90),i=n(10),o=Object.prototype,a=o.hasOwnProperty,l=o.propertyIsEnumerable,s=r(function(){return arguments}())?r:function(e){return i(e)&&a.call(e,"callee")&&!l.call(e,"callee")};e.exports=s},function(e,t,n){var r=n(7),i=n(10);e.exports=function(e){return i(e)&&"[object Arguments]"==r(e)}},function(e,t){e.exports=function(){return!1}},function(e,t){var n=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var r=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&n.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var r=n(7),i=n(26),o=n(10),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return o(e)&&i(e.length)&&!!a[r(e)]}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var r=n(18),i=t&&!t.nodeType&&t,o=i&&"object"==typeof e&&e&&!e.nodeType&&e,a=o&&o.exports===i&&r.process,l=function(){try{return o&&o.require&&o.require("util").types||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=l}).call(this,n(24)(e))},function(e,t,n){var r=n(97),i=n(98),o=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return i(e);var t=[];for(var n in Object(e))o.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(99)(Object.keys,Object);e.exports=r},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var r=n(17),i=n(26);e.exports=function(e){return null!=e&&i(e.length)&&!r(e)}},function(e,t,n){var r=n(102),i=n(11),o=n(103),a=n(104),l=n(105),s=n(7),u=n(20),c=u(r),f=u(i),d=u(o),p=u(a),h=u(l),y=s;(r&&"[object DataView]"!=y(new r(new ArrayBuffer(1)))||i&&"[object Map]"!=y(new i)||o&&"[object Promise]"!=y(o.resolve())||a&&"[object Set]"!=y(new a)||l&&"[object WeakMap]"!=y(new l))&&(y=function(e){var t=s(e),n="[object Object]"==t?e.constructor:void 0,r=n?u(n):"";if(r)switch(r){case c:return"[object DataView]";case f:return"[object Map]";case d:return"[object Promise]";case p:return"[object Set]";case h:return"[object WeakMap]"}return t}),e.exports=y},function(e,t,n){var r=n(3)(n(0),"DataView");e.exports=r},function(e,t,n){var r=n(3)(n(0),"Promise");e.exports=r},function(e,t,n){var r=n(3)(n(0),"Set");e.exports=r},function(e,t,n){var r=n(3)(n(0),"WeakMap");e.exports=r}]))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.particlesStyle={position:"absolute",zIndex:"-1"},t.particlesConfig={particles:{line_linked:{shadow:{enable:!0,color:"#3CA9D1",blur:5}}},number:{value:200,density:{enable:!0,value_area:800}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb2J4L2xpYi9tb2J4Lm1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5zY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguc2Nzcz8xMTBhIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udHMvY29vbHZldGljYS50dGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL2ZsZWx0ZXgudHRmIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcHAuanN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb2J4LXJlYWN0L2luZGV4Lm1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU29jaWFsQnV0dG9uLmpzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcGFydGljbGVzLWpzL2xpYi9wYXJ0aWNsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy9wYXJ0aWNsZXMuanMiXSwibmFtZXMiOlsicGFyZW50SG90VXBkYXRlQ2FsbGJhY2siLCJ3aW5kb3ciLCJjaHVua0lkIiwibW9yZU1vZHVsZXMiLCJob3RBdmFpbGFibGVGaWxlc01hcCIsImhvdFJlcXVlc3RlZEZpbGVzTWFwIiwibW9kdWxlSWQiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJob3RVcGRhdGUiLCJob3RXYWl0aW5nRmlsZXMiLCJob3RDaHVua3NMb2FkaW5nIiwiaG90VXBkYXRlRG93bmxvYWRlZCIsImhvdEFkZFVwZGF0ZUNodW5rIiwiaG90Q3VycmVudENoaWxkTW9kdWxlIiwiaG90QXBwbHlPblVwZGF0ZSIsImhvdEN1cnJlbnRIYXNoIiwiaG90UmVxdWVzdFRpbWVvdXQiLCJob3RDdXJyZW50TW9kdWxlRGF0YSIsImhvdEN1cnJlbnRQYXJlbnRzIiwiaG90Q3VycmVudFBhcmVudHNUZW1wIiwiaG90Q3JlYXRlUmVxdWlyZSIsIm1lIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJmbiIsInJlcXVlc3QiLCJob3QiLCJhY3RpdmUiLCJwYXJlbnRzIiwiaW5kZXhPZiIsInB1c2giLCJjaGlsZHJlbiIsImNvbnNvbGUiLCJ3YXJuIiwiT2JqZWN0RmFjdG9yeSIsIm5hbWUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2V0IiwidmFsdWUiLCJkZWZpbmVQcm9wZXJ0eSIsImUiLCJob3RTdGF0dXMiLCJob3RTZXRTdGF0dXMiLCJ0aGVuIiwiZmluaXNoQ2h1bmtMb2FkaW5nIiwiZXJyIiwiaG90V2FpdGluZ0ZpbGVzTWFwIiwiaG90RW5zdXJlVXBkYXRlQ2h1bmsiLCJ0IiwibW9kZSIsImhvdENyZWF0ZU1vZHVsZSIsIl9hY2NlcHRlZERlcGVuZGVuY2llcyIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsIl9zZWxmQWNjZXB0ZWQiLCJfc2VsZkRlY2xpbmVkIiwiX2Rpc3Bvc2VIYW5kbGVycyIsIl9tYWluIiwiYWNjZXB0IiwiZGVwIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJpIiwibGVuZ3RoIiwiZGVjbGluZSIsImRpc3Bvc2UiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaWR4Iiwic3BsaWNlIiwiY2hlY2siLCJob3RDaGVjayIsImFwcGx5IiwiaG90QXBwbHkiLCJzdGF0dXMiLCJsIiwiaG90U3RhdHVzSGFuZGxlcnMiLCJhZGRTdGF0dXNIYW5kbGVyIiwicmVtb3ZlU3RhdHVzSGFuZGxlciIsImRhdGEiLCJuZXdTdGF0dXMiLCJob3REZWZlcnJlZCIsImhvdFVwZGF0ZU5ld0hhc2giLCJ0b01vZHVsZUlkIiwiaWQiLCJFcnJvciIsInJlcXVlc3RUaW1lb3V0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJYTUxIdHRwUmVxdWVzdCIsInJlcXVlc3RQYXRoIiwicCIsIm9wZW4iLCJ0aW1lb3V0Iiwic2VuZCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJ1cGRhdGUiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJjIiwiaCIsInByb21pc2UiLCJzY3JpcHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0Iiwic3JjIiwiaGVhZCIsImFwcGVuZENoaWxkIiwiaG90RG93bmxvYWRVcGRhdGVDaHVuayIsImRlZmVycmVkIiwicmVzdWx0Iiwib3V0ZGF0ZWRNb2R1bGVzIiwib3B0aW9ucyIsImNiIiwiaiIsIm1vZHVsZSIsImdldEFmZmVjdGVkU3R1ZmYiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJtYXAiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBvcCIsInR5cGUiLCJwYXJlbnRJZCIsInBhcmVudCIsImNvbmNhdCIsImFkZEFsbFRvU2V0IiwiYSIsImIiLCJpdGVtIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsImFib3J0RXJyb3IiLCJkb0FwcGx5IiwiZG9EaXNwb3NlIiwiY2hhaW5JbmZvIiwiam9pbiIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImVycm9ySGFuZGxlciIsImtleXMiLCJmb3JFYWNoIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG90RGlzcG9zZUNodW5rIiwiZGVwZW5kZW5jeSIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwic2xpY2UiLCJkaXNwb3NlSGFuZGxlcnMiLCJjaGlsZCIsIm1vZHVsZXMiLCJlcnJvciIsImNhbGxiYWNrcyIsIm9uRXJyb3JlZCIsImRlcGVuZGVuY3lJZCIsImlnbm9yZUVycm9yZWQiLCJlcnIyIiwib3JpZ2luYWxFcnJvciIsImV4cG9ydHMiLCJtIiwiZCIsImdldHRlciIsIm8iLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicyIsImV4dGVuZFN0YXRpY3MiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwiX19hc3NpZ24iLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJ0aGlzIiwiX192YWx1ZXMiLCJpdGVyYXRvciIsIm5leHQiLCJkb25lIiwiX19yZWFkIiwiYXIiLCJPQkZVU0NBVEVEX0VSUk9SIiwiRU1QVFlfQVJSQVkiLCJmcmVlemUiLCJFTVBUWV9PQkpFQ1QiLCJnZXROZXh0SWQiLCJnbG9iYWxTdGF0ZSIsIm1vYnhHdWlkIiwiZmFpbCIsIm1lc3NhZ2UiLCJpbnZhcmlhbnQiLCJvbmNlIiwiZnVuYyIsImludm9rZWQiLCJub29wIiwiaXNPYmplY3QiLCJpc1BsYWluT2JqZWN0IiwicHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImFkZEhpZGRlblByb3AiLCJwcm9wTmFtZSIsIndyaXRhYmxlIiwiY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZSIsImNsYXp6IiwieCIsImlzRVM2TWFwIiwidGhpbmciLCJNYXAiLCJpc0VTNlNldCIsIlNldCIsImdldFBsYWluT2JqZWN0S2V5cyIsImVudW1lcmFibGVzIiwiYWRkIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiayIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImZyb20iLCJzdHJpbmdpZnlLZXkiLCJ0b1N0cmluZyIsIlN0cmluZyIsInRvUHJpbWl0aXZlIiwiJG1vYngiLCJBdG9tIiwiaXNQZW5kaW5nVW5vYnNlcnZhdGlvbiIsImlzQmVpbmdPYnNlcnZlZCIsIm9ic2VydmVycyIsImRpZmZWYWx1ZSIsImxhc3RBY2Nlc3NlZEJ5IiwibG93ZXN0T2JzZXJ2ZXJTdGF0ZSIsIklEZXJpdmF0aW9uU3RhdGUiLCJOT1RfVFJBQ0tJTkciLCJvbkJlY29tZU9ic2VydmVkIiwib25CZWNvbWVPYnNlcnZlZExpc3RlbmVycyIsImxpc3RlbmVyIiwib25CZWNvbWVVbm9ic2VydmVkIiwib25CZWNvbWVVbm9ic2VydmVkTGlzdGVuZXJzIiwicmVwb3J0T2JzZXJ2ZWQiLCJyZXBvcnRDaGFuZ2VkIiwic3RhcnRCYXRjaCIsIm9ic2VydmFibGUiLCJTVEFMRSIsImRlcGVuZGVuY2llc1N0YXRlIiwiVVBfVE9fREFURSIsImlzVHJhY2luZyIsIlRyYWNlTW9kZSIsIk5PTkUiLCJsb2dUcmFjZUluZm8iLCJvbkJlY29tZVN0YWxlIiwicHJvcGFnYXRlQ2hhbmdlZCIsImVuZEJhdGNoIiwiaXNBdG9tIiwiY3JlYXRlQXRvbSIsIm9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyIiwib25CZWNvbWVVbm9ic2VydmVkSGFuZGxlciIsImFyZzMiLCJhdG9tIiwiaW50ZXJjZXB0SG9vayIsImNvbXBhcmVyIiwiaWRlbnRpdHkiLCJzdHJ1Y3R1cmFsIiwiZGVlcEVxdWFsIiwiZGVmYXVsdCIsImlzIiwibW9ieERpZFJ1bkxhenlJbml0aWFsaXplcnNTeW1ib2wiLCJtb2J4UGVuZGluZ0RlY29yYXRvcnMiLCJlbnVtZXJhYmxlRGVzY3JpcHRvckNhY2hlIiwibm9uRW51bWVyYWJsZURlc2NyaXB0b3JDYWNoZSIsImNyZWF0ZVByb3BlcnR5SW5pdGlhbGl6ZXJEZXNjcmlwdG9yIiwicHJvcCIsImNhY2hlIiwiaW5pdGlhbGl6ZUluc3RhbmNlIiwidGFyZ2V0IiwiZGVjb3JhdG9ycyIsInByb3BlcnR5Q3JlYXRvciIsImRlc2NyaXB0b3IiLCJkZWNvcmF0b3JUYXJnZXQiLCJkZWNvcmF0b3JBcmd1bWVudHMiLCJjcmVhdGVQcm9wRGVjb3JhdG9yIiwicHJvcGVydHlJbml0aWFsbHlFbnVtZXJhYmxlIiwiZGVjb3JhdG9yIiwiYXBwbHlJbW1lZGlhdGVseSIsImluaGVyaXRlZERlY29yYXRvcnMiLCJxdWFja3NMaWtlQURlY29yYXRvciIsImFyZ3MiLCJkZWVwRW5oYW5jZXIiLCJ2IiwiXyIsImlzT2JzZXJ2YWJsZSIsImlzQXJyYXkiLCJhcnJheSIsInJlZmVyZW5jZUVuaGFuY2VyIiwibmV3VmFsdWUiLCJjcmVhdGVEZWNvcmF0b3JGb3JFbmhhbmNlciIsImVuaGFuY2VyIiwicHJvcGVydHlOYW1lIiwiX2RlY29yYXRvclRhcmdldCIsImRlY29yYXRvckFyZ3MiLCJpbml0aWFsVmFsdWUiLCJpbml0aWFsaXplciIsImFzT2JzZXJ2YWJsZU9iamVjdCIsImFkZE9ic2VydmFibGVQcm9wIiwicmVzIiwicHJvY2VzcyIsImVudiIsImRlZmF1bHRDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyIsImRlZXAiLCJkZWZhdWx0RGVjb3JhdG9yIiwicHJveHkiLCJhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zIiwiZGVlcERlY29yYXRvciIsInNoYWxsb3dEZWNvcmF0b3IiLCJpc09ic2VydmFibGVPYmplY3QiLCJpc09ic2VydmFibGVBcnJheSIsImlzT2JzZXJ2YWJsZU1hcCIsImlzT2JzZXJ2YWJsZVNldCIsInJlZkRlY29yYXRvciIsInJlZlN0cnVjdERlY29yYXRvciIsIm9sZFZhbHVlIiwiZ2V0RW5oYW5jZXJGcm9tT3B0aW9ucyIsIm9ic2VydmFibGVGYWN0b3JpZXMiLCJib3giLCJpbmNvcnJlY3RseVVzZWRBc0RlY29yYXRvciIsIk9ic2VydmFibGVWYWx1ZSIsImVxdWFscyIsImluaXRpYWxWYWx1ZXMiLCJjcmVhdGVPYnNlcnZhYmxlQXJyYXkiLCJPYnNlcnZhYmxlTWFwIiwiT2JzZXJ2YWJsZVNldCIsInByb3BzIiwiZXh0ZW5kT2JzZXJ2YWJsZSIsImdldERlZmF1bHREZWNvcmF0b3JGcm9tT2JqZWN0T3B0aW9ucyIsImJhc2UiLCJjcmVhdGVEeW5hbWljT2JzZXJ2YWJsZU9iamVjdCIsImV4dGVuZE9ic2VydmFibGVPYmplY3RXaXRoUHJvcGVydGllcyIsInJlZiIsInNoYWxsb3ciLCJzdHJ1Y3QiLCJhcmcyIiwibWV0aG9kTmFtZSIsImNvbXB1dGVkRGVjb3JhdG9yIiwiaW5zdGFuY2UiLCJhZGRDb21wdXRlZFByb3AiLCJjb250ZXh0IiwiQ2F1Z2h0RXhjZXB0aW9uIiwiY2F1c2UiLCJpc0NhdWdodEV4Y2VwdGlvbiIsInNob3VsZENvbXB1dGUiLCJkZXJpdmF0aW9uIiwiUE9TU0lCTFlfU1RBTEUiLCJwcmV2VW50cmFja2VkIiwidW50cmFja2VkU3RhcnQiLCJvYnMiLCJvYnNlcnZpbmciLCJvYmoiLCJpc0NvbXB1dGVkVmFsdWUiLCJkaXNhYmxlRXJyb3JCb3VuZGFyaWVzIiwidW50cmFja2VkRW5kIiwiY2hhbmdlRGVwZW5kZW5jaWVzU3RhdGVUbzAiLCJjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCIsImhhc09ic2VydmVycyIsInNpemUiLCJjb21wdXRhdGlvbkRlcHRoIiwiYWxsb3dTdGF0ZUNoYW5nZXMiLCJlbmZvcmNlQWN0aW9ucyIsInRyYWNrRGVyaXZlZEZ1bmN0aW9uIiwiZiIsInByZXZBbGxvd1N0YXRlUmVhZHMiLCJhbGxvd1N0YXRlUmVhZHNTdGFydCIsIm5ld09ic2VydmluZyIsInVuYm91bmREZXBzQ291bnQiLCJydW5JZCIsInByZXZUcmFja2luZyIsInRyYWNraW5nRGVyaXZhdGlvbiIsInByZXZPYnNlcnZpbmciLCJsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUiLCJpMCIsInJlbW92ZU9ic2VydmVyIiwiYWRkT2JzZXJ2ZXIiLCJiaW5kRGVwZW5kZW5jaWVzIiwiYWxsb3dTdGF0ZVJlYWRzRW5kIiwiY2xlYXJPYnNlcnZpbmciLCJ1bnRyYWNrZWQiLCJhY3Rpb24iLCJwcmV2IiwiYWxsb3dTdGF0ZVJlYWRzIiwiY3JlYXRlQWN0aW9uIiwiYWN0aW9uTmFtZSIsImV4ZWN1dGVBY3Rpb24iLCJpc01vYnhBY3Rpb24iLCJzY29wZSIsInJ1bkluZm8iLCJzdGFydFRpbWUiLCJwcmV2RGVyaXZhdGlvbiIsInByZXZBbGxvd1N0YXRlQ2hhbmdlcyIsImFsbG93U3RhdGVDaGFuZ2VzU3RhcnQiLCJub3RpZnlTcHkiLCJhY3Rpb25JZCIsIm5leHRBY3Rpb25JZCIsInBhcmVudEFjdGlvbklkIiwiY3VycmVudEFjdGlvbklkIiwiX3N0YXJ0QWN0aW9uIiwic3VwcHJlc3NSZWFjdGlvbkVycm9ycyIsImFsbG93U3RhdGVDaGFuZ2VzRW5kIiwiX2VuZEFjdGlvbiIsIl9zdXBlciIsIl90aGlzIiwiaGFzVW5yZXBvcnRlZENoYW5nZSIsIl9fIiwiY29uc3RydWN0b3IiLCJfX2V4dGVuZHMiLCJkZWhhbmNlVmFsdWUiLCJkZWhhbmNlciIsInByZXBhcmVOZXdWYWx1ZSIsIlVOQ0hBTkdFRCIsInNldE5ld1ZhbHVlIiwiaGFzSW50ZXJjZXB0b3JzIiwiY2hhbmdlIiwiaW50ZXJjZXB0Q2hhbmdlIiwiaGFzTGlzdGVuZXJzIiwibm90aWZ5TGlzdGVuZXJzIiwiaW50ZXJjZXB0IiwiaGFuZGxlciIsInJlZ2lzdGVySW50ZXJjZXB0b3IiLCJvYnNlcnZlIiwiZmlyZUltbWVkaWF0ZWx5IiwicmVnaXN0ZXJMaXN0ZW5lciIsInRvSlNPTiIsInZhbHVlT2YiLCJDb21wdXRlZFZhbHVlIiwiX19tYXBpZCIsImlzQ29tcHV0aW5nIiwiaXNSdW5uaW5nU2V0dGVyIiwic2V0dGVyIiwiY29tcGFyZVN0cnVjdHVyYWwiLCJyZXF1aXJlc1JlYWN0aW9uIiwia2VlcEFsaXZlIiwicHJvcGFnYXRlTWF5YmVDaGFuZ2VkIiwiaW5CYXRjaCIsInRyYWNrQW5kQ29tcHV0ZSIsInByb3BhZ2F0ZUNoYW5nZUNvbmZpcm1lZCIsIndhcm5BYm91dFVudHJhY2tlZFJlYWQiLCJjb21wdXRlVmFsdWUiLCJwZWVrIiwid2FzU3VzcGVuZGVkIiwiY2hhbmdlZCIsInRyYWNrIiwic3VzcGVuZCIsImZpcnN0VGltZSIsInByZXZWYWx1ZSIsImF1dG9ydW4iLCJwcmV2VSIsIk1vYlhHbG9iYWxzIiwidmVyc2lvbiIsInBlbmRpbmdVbm9ic2VydmF0aW9ucyIsInBlbmRpbmdSZWFjdGlvbnMiLCJpc1J1bm5pbmdSZWFjdGlvbnMiLCJzcHlMaXN0ZW5lcnMiLCJnbG9iYWxSZWFjdGlvbkVycm9ySGFuZGxlcnMiLCJjb21wdXRlZFJlcXVpcmVzUmVhY3Rpb24iLCJyZWFjdGlvblJlcXVpcmVzT2JzZXJ2YWJsZSIsIm9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uIiwiY29tcHV0ZWRDb25maWd1cmFibGUiLCJjYW5NZXJnZUdsb2JhbFN0YXRlIiwiaXNvbGF0ZUNhbGxlZCIsImdsb2JhbCIsImdldEdsb2JhbCIsIl9fbW9ieEluc3RhbmNlQ291bnQiLCJfX21vYnhHbG9iYWxzIiwic2V0VGltZW91dCIsIm1vY2tHbG9iYWwiLCJub2RlIiwiZGVsZXRlIiwicXVldWVGb3JVbm9ic2VydmF0aW9uIiwicnVuUmVhY3Rpb25zIiwibGlzdCIsImxvZyIsIkJSRUFLIiwibGluZXMiLCJwcmludERlcFRyZWUiLCJ0cmVlIiwiZGVwdGgiLCJkZXBlbmRlbmNpZXMiLCJub2RlVG9EZXBlbmRlbmN5VHJlZSIsImdldEF0b20iLCJGdW5jdGlvbiIsInJlcGxhY2UiLCJSZWFjdGlvbiIsIm9uSW52YWxpZGF0ZSIsInJlcXVpcmVzT2JzZXJ2YWJsZSIsImlzRGlzcG9zZWQiLCJfaXNTY2hlZHVsZWQiLCJfaXNUcmFja1BlbmRpbmciLCJfaXNSdW5uaW5nIiwic2NoZWR1bGUiLCJpc1NjaGVkdWxlZCIsInJ1blJlYWN0aW9uIiwicmVwb3J0RXhjZXB0aW9uSW5EZXJpdmF0aW9uIiwiZ2V0RGlzcG9zZXIiLCJ0cmFjZSIsImVudGVyQnJlYWtQb2ludCIsIl9pIiwiZ2V0QXRvbUZyb21BcmdzIiwiTE9HIiwiTUFYX1JFQUNUSU9OX0lURVJBVElPTlMiLCJyZWFjdGlvblNjaGVkdWxlciIsInJ1blJlYWN0aW9uc0hlbHBlciIsImFsbFJlYWN0aW9ucyIsIml0ZXJhdGlvbnMiLCJyZW1haW5pbmdSZWFjdGlvbnMiLCJpc1JlYWN0aW9uIiwic2V0UmVhY3Rpb25TY2hlZHVsZXIiLCJiYXNlU2NoZWR1bGVyIiwic3B5IiwiZG9udFJlYXNzaWduRmllbGRzIiwibmFtZWRBY3Rpb25EZWNvcmF0b3IiLCJpbml0aWFsaXplcl8xIiwiYWN0aW9uRmllbGREZWNvcmF0b3IiLCJhcmcxIiwiYXJnNCIsImRlZmluZUJvdW5kQWN0aW9uIiwidmlldyIsIm9wdHMiLCJyZWFjdGlvbiIsInNjaGVkdWxlciIsImRlbGF5IiwicmVhY3Rpb25SdW5uZXIiLCJvbkVycm9yIiwic2NoZWR1bGVyXzEiLCJjcmVhdGVTY2hlZHVsZXJGcm9tT3B0aW9ucyIsImlzU2NoZWR1bGVkXzEiLCJib3VuZCIsImFwcGx5VG9JbnN0YW5jZSIsInJ1biIsImhvb2siLCJsaXN0ZW5lcnNLZXkiLCJob29rTGlzdGVuZXJzIiwiY29uZmlndXJlIiwiaXNvbGF0ZUdsb2JhbFN0YXRlIiwiZWEiLCJwcm9wZXJ0aWVzIiwiZV8yIiwiX2IiLCJrZXlzXzIiLCJrZXlzXzJfMSIsInJlc3VsdERlc2NyaXB0b3IiLCJlXzJfMSIsInJldHVybiIsIl9pc09ic2VydmFibGUiLCJ2YWx1ZXMiLCJoYXMiLCJ0cmFuc2FjdGlvbiIsInRoaXNBcmciLCJnZXRBZG0iLCJpc1Byb3BlcnR5S2V5IiwidmFsIiwib2JqZWN0UHJveHlUcmFwcyIsImFkbSIsIndyaXRlIiwiZGVmYXVsdEVuaGFuY2VyIiwicGFyc2VJbnQiLCJ2YWx1ZXNfMSIsImtleV8xIiwiZGVsZXRlUHJvcGVydHkiLCJyZW1vdmUiLCJvd25LZXlzIiwia2V5c0F0b20iLCJSZWZsZWN0IiwicHJldmVudEV4dGVuc2lvbnMiLCJQcm94eSIsImludGVyY2VwdGFibGUiLCJpbnRlcmNlcHRvcnMiLCJsaXN0ZW5hYmxlIiwiY2hhbmdlTGlzdGVuZXJzIiwibGlzdGVuZXJzIiwiYXJyYXlUcmFwcyIsImdldEFycmF5TGVuZ3RoIiwiYXJyYXlFeHRlbnNpb25zIiwiaXNOYU4iLCJzZXRBcnJheUxlbmd0aCIsIm93bmVkIiwiT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24iLCJzcGxpY2VXaXRoQXJyYXkiLCJsYXN0S25vd25MZW5ndGgiLCJuZXdWIiwib2xkViIsImRlaGFuY2VWYWx1ZXMiLCJpbmRleCIsImFkZGVkIiwiYWRkZWRDb3VudCIsInJlbW92ZWQiLCJyZW1vdmVkQ291bnQiLCJuZXdMZW5ndGgiLCJjdXJyZW50TGVuZ3RoIiwibmV3SXRlbXMiLCJ1cGRhdGVBcnJheUxlbmd0aCIsIm9sZExlbmd0aCIsImRlbHRhIiwiZGVsZXRlQ291bnQiLCJNYXRoIiwibWF4IiwibWluIiwic3BsaWNlSXRlbXNJbnRvVmFsdWVzIiwibm90aWZ5QXJyYXlTcGxpY2UiLCJfYSIsIl9fc3ByZWFkIiwibm90aWZ5QXJyYXlDaGlsZFVwZGF0ZSIsIm5vdGlmeSIsImNsZWFyIiwidG9KUyIsIml0ZW1zIiwic2hpZnQiLCJ1bnNoaWZ0IiwicmV2ZXJzZSIsImNsb25lIiwic29ydCIsImNvbXBhcmVGbiIsImZ1bmNOYW1lIiwiaXNPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiIsIl9hJDEiLCJPYnNlcnZhYmxlTWFwTWFya2VyIiwiaW5pdGlhbERhdGEiLCJfa2V5c0F0b20iLCJfZGF0YSIsIl9oYXNNYXAiLCJtZXJnZSIsIl9oYXMiLCJlbnRyeSIsIm5ld0VudHJ5IiwiaGFzS2V5IiwiX3VwZGF0ZVZhbHVlIiwiX2FkZFZhbHVlIiwiX3VwZGF0ZUhhc01hcEVudHJ5Iiwic2VsZiIsIm5leHRJbmRleCIsIm1ha2VJdGVyYWJsZSIsImVudHJpZXMiLCJlXzEiLCJfYyIsIl9kIiwiZV8xXzEiLCJvdGhlciIsIm5ld0tleXMiLCJmaWx0ZXIiLCJ0b1BPSk8iLCJlXzMiLCJlXzNfMSIsIk9ic2VydmFibGVTZXRNYXJrZXIiLCJfYXRvbSIsImNhbGxiYWNrRm4iLCJvYnNlcnZhYmxlVmFsdWVzIiwiT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uIiwicmVhZCIsInBlbmRpbmdLZXlzIiwiZXhpc3RzIiwib2JzZXJ2YWJsZVByb3BlcnR5Q29uZmlncyIsImdlbmVyYXRlT2JzZXJ2YWJsZVByb3BDb25maWciLCJub3RpZnlQcm9wZXJ0eUFkZGl0aW9uIiwicHJvcGVydHlPd25lciIsImNvbXB1dGVkUHJvcGVydHlDb25maWdzIiwiZ2V0QWRtaW5pc3RyYXRpb25Gb3JDb21wdXRlZFByb3BPd25lciIsImdlbmVyYXRlQ29tcHV0ZWRQcm9wQ29uZmlnIiwib2xkT2JzZXJ2YWJsZSIsImlsbGVnYWxBY2Nlc3MiLCJvd25lciIsImdldEtleXMiLCJpc09ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbiIsImFueVRoaW5nIiwiZ2V0QWRtaW5pc3RyYXRpb24iLCJnZXREZWJ1Z05hbWUiLCJlcSIsImFTdGFjayIsImJTdGFjayIsInVud3JhcCIsImNsYXNzTmFtZSIsImFyZUFycmF5cyIsImFDdG9yIiwiYkN0b3IiLCJoYXMkMSIsImRlZXBFcSIsImdldFNlbGYiLCJfX01PQlhfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImluamVjdE1vYngiLCJleHRyYXMiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImdldFVybCIsIl9fX0NTU19MT0FERVJfVVJMX19fMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX19fMV9fXyIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwiVHlwZUVycm9yIiwidGVzdDEiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsInNwbGl0IiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwic291cmNlIiwic3ltYm9scyIsInRvIiwicmVuZGVyIiwic3RvcmUiLCJnZXRFbGVtZW50QnlJZCIsImNvbnRlbnQiLCJsb2NhbHMiLCJuZXdDb250ZW50IiwidXNlU291cmNlTWFwIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzdHJpbmdpZnkiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJ1cmwiLCJuZWVkUXVvdGVzIiwidGVzdCIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJCb29sZWFuIiwiYWxsIiwiYXRvYiIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwibGlzdFRvU3R5bGVzIiwic3R5bGVzIiwibmV3U3R5bGVzIiwicGFydCIsImNzcyIsIm1lZGlhIiwicGFydHMiLCJhZGRTdHlsZXNUb0RvbSIsImRvbVN0eWxlIiwicmVmcyIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVJbmRleCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwiX2RvbVN0eWxlIiwiZm9yIiwicSIsInUiLCJ3IiwieSIsImFhIiwiYmEiLCJjYSIsInoiLCJBIiwiQiIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJDIiwiRCIsInVwZGF0ZXIiLCJFIiwiRiIsImlzUmVhY3RDb21wb25lbnQiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiRyIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSCIsImN1cnJlbnQiLCJJIiwic3VzcGVuc2UiLCJKIiwiSyIsIkwiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCJnIiwiZGVmYXVsdFByb3BzIiwiJCR0eXBlb2YiLCJfb3duZXIiLCJOIiwiTyIsIlAiLCJRIiwia2V5UHJlZml4IiwiY291bnQiLCJSIiwiVSIsIlMiLCJUIiwiZXNjYXBlIiwiZmEiLCJWIiwiZGEiLCJXIiwiWCIsIkNoaWxkcmVuIiwidG9BcnJheSIsIm9ubHkiLCJjcmVhdGVSZWYiLCJDb21wb25lbnQiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImZvcndhcmRSZWYiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsImNvbXBhcmUiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlRGVidWdWYWx1ZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwidW5zdGFibGVfU3VzcGVuc2VMaXN0IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwidW5zdGFibGVfd2l0aFN1c3BlbnNlQ29uZmlnIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiWSIsIloiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwiaGEiLCJyZWdpc3RyYXRpb25OYW1lIiwiaWEiLCJqYSIsImthIiwibGEiLCJtYSIsIm5hIiwib2EiLCJwYSIsInFhIiwic2EiLCJ0YSIsInVhIiwidmEiLCJjdXJyZW50VGFyZ2V0IiwicmEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkFhIiwiQmEiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiQ2EiLCJzdGF0ZU5vZGUiLCJkaXNhYmxlZCIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJPYSIsIlBhIiwiUWEiLCJSYSIsIlNhIiwiVGEiLCJWYSIsImRpc3BsYXlOYW1lIiwiV2EiLCJ0YWciLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIlhhIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImRiIiwiZWIiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsIm1iIiwibmIiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5Iiwic2FuaXRpemVVUkwiLCJ0b0xvd2VyQ2FzZSIsInJiIiwic2IiLCJ0b1VwcGVyQ2FzZSIsInRiIiwidWIiLCJwYiIsInFiIiwib2IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInZiIiwibm9kZU5hbWUiLCJ5YiIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwieGIiLCJ6YiIsImNoZWNrZWQiLCJBYiIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQmIiLCJjb250cm9sbGVkIiwiQ2IiLCJEYiIsIkViIiwiR2IiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIkliIiwiSGIiLCJKYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiS2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkxiIiwiTWIiLCJOYiIsInRleHRDb250ZW50IiwieGxpbmtIcmVmIiwiT2IiLCJodG1sIiwibWF0aG1sIiwic3ZnIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwiVGIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsIlViIiwiVmIiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJXYiIsIlhiIiwiWWIiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsInFjIiwiYmxvY2tlZE9uIiwidG9wTGV2ZWxUeXBlIiwiZXZlbnRTeXN0ZW1GbGFncyIsIm5hdGl2ZUV2ZW50IiwicmMiLCJwb2ludGVySWQiLCJzYyIsInVjIiwidmMiLCJ3YyIsInhjIiwieWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJ6YyIsIkFjIiwiQmMiLCJhbHRlcm5hdGUiLCJlZmZlY3RUYWciLCJDYyIsIkVjIiwic2libGluZyIsIkRjIiwiRmMiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJHYyIsIkhjIiwiZGlzcGF0Y2hDb25maWciLCJJYyIsIl90YXJnZXRJbnN0IiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsIlBjIiwiZXZlbnRQb29sIiwiUWMiLCJkZXN0cnVjdG9yIiwiT2MiLCJnZXRQb29sZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNUcnVzdGVkIiwiZXh0ZW5kIiwiUmMiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiU2MiLCJjbGlwYm9hcmREYXRhIiwiVGMiLCJkZXRhaWwiLCJVYyIsInJlbGF0ZWRUYXJnZXQiLCJWYyIsImtleUNvZGUiLCJjaGFyQ29kZSIsIldjIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIlhjIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIlljIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlpjIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIiRjIiwiYWQiLCJsb2NhdGlvbiIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJyZXBlYXQiLCJsb2NhbGUiLCJ3aGljaCIsImJkIiwiY2QiLCJkZCIsImZkIiwiZ2QiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsImhkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiZGF0YVRyYW5zZmVyIiwiamQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwia2QiLCJsZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwibWQiLCJuZCIsIm9kIiwicGQiLCJxZCIsInJkIiwic2QiLCJ0ZCIsInVkIiwidmQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJldmVudFByaW9yaXR5Iiwid2QiLCJnZXRFdmVudFByaW9yaXR5IiwieGQiLCJ6ZCIsIkFkIiwiQmQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsIkNkIiwiRGQiLCJFZCIsIkZkIiwiR2QiLCJIZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJJZCIsInRjIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJoeWRyYXRlIiwiSmQiLCJLZCIsIldlYWtNYXAiLCJvYyIsInBjIiwiTGQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsIk1kIiwiTmQiLCJ0cmltIiwiT2QiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInN1YnN0cmluZyIsIlBkIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwid2JyIiwiUWQiLCJSZCIsIlNkIiwiVGQiLCJVZCIsImJvZHkiLCJWZCIsIldkIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJZZCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiWmQiLCJjb250ZW50RWRpdGFibGUiLCIkZCIsImFlIiwiYmUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImF1dG9Gb2N1cyIsImdlIiwiX19odG1sIiwiaGUiLCJpZSIsImNsZWFyVGltZW91dCIsImplIiwia2UiLCJwcmV2aW91c1NpYmxpbmciLCJsZSIsInJhbmRvbSIsIm5lIiwib2UiLCJwZSIsInFlIiwicmUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwiQWUiLCJkb2N1bWVudE1vZGUiLCJCZSIsIkNlIiwiRGUiLCJFZSIsImJlZm9yZUlucHV0IiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJGZSIsIkdlIiwiSGUiLCJJZSIsIkxlIiwiSmUiLCJjaGFyIiwiS2UiLCJNZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsIndlZWsiLCJOZSIsIk9lIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJXZSIsImRldGFjaEV2ZW50IiwiWGUiLCJZZSIsImF0dGFjaEV2ZW50IiwiWmUiLCIkZSIsImFmIiwiYmYiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiY2YiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsImRmIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJmZiIsImdmIiwiaGYiLCJqZiIsImtmIiwic2VsZWN0IiwibGYiLCJtZiIsIm5mIiwib2YiLCJwZiIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJlbmQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJxZiIsIm9uU2VsZWN0IiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsInJmIiwic2YiLCJ0ZiIsInVmIiwidmYiLCJjb250ZXh0VHlwZXMiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJjaGlsZENvbnRleHRUeXBlcyIsIndmIiwieGYiLCJ6ZiIsIkFmIiwiZ2V0Q2hpbGRDb250ZXh0IiwiQmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIkNmIiwiRGYiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJFZiIsIkZmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJHZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiSGYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJJZiIsInVuc3RhYmxlX25vdyIsIkpmIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJLZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiTGYiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsIk1mIiwiTmYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIk9mIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJsZyIsImZpcnN0Q29udGV4dCIsImV4cGlyYXRpb25UaW1lIiwibWciLCJuZyIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJvZyIsInBnIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0RWZmZWN0IiwibGFzdEVmZmVjdCIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJxZyIsInJnIiwic3VzcGVuc2VDb25maWciLCJwYXlsb2FkIiwibmV4dEVmZmVjdCIsInNnIiwidGciLCJ1cGRhdGVRdWV1ZSIsInVnIiwidmciLCJ3ZyIsInhnIiwieWciLCJ6ZyIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJJZyIsIl9yZWFjdEludGVybmFsRmliZXIiLCJGZyIsIkdnIiwiSGciLCJKZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIktnIiwiY29udGV4dFR5cGUiLCJzdGF0ZSIsIkxnIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiTWciLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIk5nIiwiT2ciLCJfc3RyaW5nUmVmIiwiUGciLCJRZyIsIlJnIiwiU2ciLCJlbGVtZW50VHlwZSIsIlRnIiwiaW1wbGVtZW50YXRpb24iLCJVZyIsIlZnIiwid2IiLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZG9jdW1lbnRFbGVtZW50IiwidGFnTmFtZSIsImRoIiwiZWgiLCJmaCIsImdoIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiaGgiLCJyZXNwb25kZXIiLCJpaCIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIkVoIiwiYmFzZVVwZGF0ZSIsIkZoIiwiR2giLCJIaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJkaXNwYXRjaCIsImxhc3QiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJJaCIsImRlc3Ryb3kiLCJkZXBzIiwiSmgiLCJLaCIsIkxoIiwiTWgiLCJOaCIsInJlYWRDb250ZXh0IiwidXNlUmVzcG9uZGVyIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwicGVuZGluZ1Byb3BzIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsImVpIiwiZmkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJnaSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImhpIiwicGVuZGluZ0NvbnRleHQiLCJuaSIsIm9pIiwicGkiLCJxaSIsImlpIiwicmV0cnlUaW1lIiwiamkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwia2kiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInRhaWwiLCJ0YWlsRXhwaXJhdGlvbiIsInRhaWxNb2RlIiwibGkiLCJtaSIsInJpIiwic2kiLCJ0aSIsInN0YWNrIiwib25DbGljayIsIm9uY2xpY2siLCJ1aSIsIldlYWtTZXQiLCJ2aSIsInlpIiwieGkiLCJEaSIsIkVpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJGaSIsIkdpIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJ3aSIsIkhpIiwiSWkiLCJKaSIsIktpIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIkxpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIk1pIiwiZGlzcGxheSIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiZWxlbWVudCIsIlJpIiwiU2kiLCJUaSIsImNvbXBvbmVudERpZENhdGNoIiwiVWkiLCJjb21wb25lbnRTdGFjayIsIlZpIiwiY2VpbCIsIldpIiwiWGkiLCJZaSIsIlppIiwiJGkiLCJhaiIsImJqIiwiY2oiLCJkaiIsImVqIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJqaiIsImtqIiwibGoiLCJtaiIsIm5qIiwib2oiLCJwaiIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ0aW1lb3V0TXMiLCJWaiIsInZqIiwid2oiLCJ4aiIsInlqIiwiemoiLCJBaiIsImxhc3RFeHBpcmVkVGltZSIsIkJqIiwiZmlyc3RQZW5kaW5nVGltZSIsImxhc3RQaW5nZWRUaW1lIiwibmV4dEtub3duUGVuZGluZ0xldmVsIiwiY2FsbGJhY2tFeHBpcmF0aW9uVGltZSIsImNhbGxiYWNrUHJpb3JpdHkiLCJjYWxsYmFja05vZGUiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJJaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJKaiIsIktqIiwibGFzdFN1c3BlbmRlZFRpbWUiLCJMaiIsInRpbWVvdXRIYW5kbGUiLCJidXN5TWluRHVyYXRpb25NcyIsImJ1c3lEZWxheU1zIiwiTWoiLCJOaiIsIk9qIiwiZmlyc3RCYXRjaCIsIl9kZWZlciIsIl9leHBpcmF0aW9uVGltZSIsIl9vbkNvbXBsZXRlIiwiUGoiLCJRaiIsIlJqIiwicGluZ0NhY2hlIiwiU2oiLCJUaiIsIlVqIiwiY3JlYXRlRWxlbWVudE5TIiwiV2oiLCJmaXJzdFN1c3BlbmRlZFRpbWUiLCJyYW5nZUNvdW50IiwiRmIiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiWGoiLCJYZCIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZvY3VzIiwiQmgiLCJjYyIsImVkIiwiWmoiLCJDaCIsIkRoIiwicGsiLCJ6aSIsIkFpIiwiQmkiLCJ5ZCIsIkNpIiwieWYiLCJZaiIsImFrIiwiYmsiLCJoaWRkZW4iLCJVYSIsImNrIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiZWsiLCJwZW5kaW5nQ2hpbGRyZW4iLCJmayIsImdrIiwiaGsiLCJpayIsImtrIiwiX3Jvb3QiLCJfY2FsbGJhY2tzIiwiX25leHQiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJsayIsIl9kaWRDb21taXQiLCJfb25Db21taXQiLCJtayIsIm5jIiwibmsiLCJfaW50ZXJuYWxSb290Iiwib2siLCJxayIsInNrIiwiaGFzQXR0cmlidXRlIiwicmsiLCJ0ayIsImprIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJjb21taXQiLCJ1bm1vdW50IiwiY3JlYXRlQmF0Y2giLCJ3ayIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXMiLCJ1bnN0YWJsZV9kaXNjcmV0ZVVwZGF0ZXMiLCJ1bnN0YWJsZV9mbHVzaERpc2NyZXRlVXBkYXRlcyIsImZsdXNoU3luYyIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9jcmVhdGVTeW5jUm9vdCIsInVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZCIsIkV2ZW50cyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJkayIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVQcm9wcyIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwieGsiLCJ5ayIsIk1lc3NhZ2VDaGFubmVsIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJwZXJmb3JtYW5jZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiZmxvb3IiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJzb3J0SW5kZXgiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsIkFwcCIsIm9ic2VydmVyIiwicGFyYW1zIiwicGFydGljbGVzQ29uZmlnIiwicGFydGljbGVzU3R5bGUiLCJfdHlwZW9mIiwiX2NsYXNzQ2FsbENoZWNrIiwiQ29uc3RydWN0b3IiLCJfZGVmaW5lUHJvcGVydGllcyIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9zZXRQcm90b3R5cGVPZiIsIl9nZXRQcm90b3R5cGVPZiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiY3JlYXRlQ29tbW9uanNNb2R1bGUiLCJyZWFjdElzX3Byb2R1Y3Rpb25fbWluIiwidHlwZU9mIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRm9yd2FyZFJlZiIsIlBvcnRhbCIsImlzVmFsaWRFbGVtZW50VHlwZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNQcm9maWxlciIsImlzUG9ydGFsIiwiaXNTdHJpY3RNb2RlIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJnZXREZWZhdWx0UHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJUWVBFX1NUQVRJQ1MiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljc19janMiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiRXZlbnRFbWl0dGVyIiwiY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIiLCJ2YWxpZGF0ZSIsImNoZWNrVHlwZSIsImlzUmVxdWlyZWQiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwiX2xlbiIsInJlc3QiLCJfa2V5IiwiYWN0dWFsIiwiY2hhaW5lZENoZWNrVHlwZSIsImdldFByb3BUeXBlIiwicHJvcFZhbHVlIiwicHJvcFR5cGUiLCJSZWdFeHAiLCJpc1N5bWJvbCIsImNyZWF0ZU9ic2VydmFibGVUeXBlQ2hlY2tlckNyZWF0b3IiLCJhbGxvd05hdGl2ZVR5cGUiLCJtb2J4VHlwZSIsIm1vYnhDaGVja2VyIiwicHJlY2lzZVR5cGUiLCJnZXRQcmVjaXNlVHlwZSIsIm5hdGl2ZVR5cGVFeHBlY3RhdGlvbk1lc3NhZ2UiLCJjcmVhdGVPYnNlcnZhYmxlQXJyYXlPZlR5cGVDaGVja2VyIiwidHlwZUNoZWNrZXIiLCJfbGVuMiIsIl9rZXkyIiwib2JzZXJ2YWJsZUFycmF5Iiwib2JzZXJ2YWJsZUFycmF5T2YiLCJvYnNlcnZhYmxlTWFwIiwib2JzZXJ2YWJsZU9iamVjdCIsImFycmF5T3JPYnNlcnZhYmxlQXJyYXkiLCJhcnJheU9yT2JzZXJ2YWJsZUFycmF5T2YiLCJvYmplY3RPck9ic2VydmFibGVPYmplY3QiLCJzeW1ib2xJZCIsImNyZWF0ZWRTeW1ib2xzIiwibmV3U3ltYm9sIiwic3ltYm9sIiwiY3JlYXRlU3ltYm9sIiwibW9ieE1peGlucyIsIm1vYnhQYXRjaGVkRGVmaW5pdGlvbiIsIndyYXBwZXIiLCJyZWFsTWV0aG9kIiwibG9ja3MiLCJyZXRWYWwiLCJtZXRob2RzIiwibXgiLCJ3cmFwRnVuY3Rpb24iLCJwYXRjaCIsIm1ldGhvZE1peGlucyIsImdldE1peGlucyIsIl9sZW4zIiwibWl4aW5NZXRob2RzIiwiX2tleTMiLCJtaXhpbk1ldGhvZCIsIm9sZERlZmluaXRpb24iLCJvcmlnaW5hbE1ldGhvZCIsIm5ld0RlZmluaXRpb24iLCJjcmVhdGVEZWZpbml0aW9uIiwiX3JlZiIsIndyYXBwZWRGdW5jIiwiaW5qZWN0b3JDb250ZXh0VHlwZXMiLCJtb2J4U3RvcmVzIiwic2VhbCIsInByb3hpZWRJbmplY3RvclByb3BzIiwiaXNNb2J4SW5qZWN0b3IiLCJjcmVhdGVTdG9yZUluamVjdG9yIiwiZ3JhYlN0b3Jlc0ZuIiwiY29tcG9uZW50IiwiaW5qZWN0TmFtZXMiLCJJbmplY3RvciIsIl9Db21wb25lbnQiLCJfZ2V0UHJvdG90eXBlT2YyIiwic3RvcmVSZWYiLCJ3cmFwcGVkSW5zdGFuY2UiLCJuZXdQcm9wcyIsImFkZGl0aW9uYWxQcm9wcyIsImlzU3RhdGVsZXNzIiwid3JhcHBlZENvbXBvbmVudCIsImRlZmluZVByb3BlcnRpZXMiLCJjb21wb25lbnRDbGFzcyIsImluamVjdGVkIiwic3RvcmVOYW1lcyIsImJhc2VTdG9yZXMiLCJuZXh0UHJvcHMiLCJzdG9yZU5hbWUiLCJncmFiU3RvcmVzQnlOYW1lIiwibW9ieEFkbWluUHJvcGVydHkiLCJtb2J4SXNVbm1vdW50ZWQiLCJpc0RldnRvb2xzRW5hYmxlZCIsImlzVXNpbmdTdGF0aWNSZW5kZXJpbmciLCJ3YXJuZWRBYm91dE9ic2VydmVySW5qZWN0RGVwcmVjYXRpb24iLCJjb21wb25lbnRCeU5vZGVSZWdpc3RyeSIsInJlbmRlclJlcG9ydGVyIiwic2tpcFJlbmRlcktleSIsImlzRm9yY2luZ1VwZGF0ZUtleSIsIlJlYWN0Rm9yd2FyZFJlZlN5bWJvbCIsIl9wcm9wcyIsInNldEhpZGRlblByb3AiLCJmaW5kRE9NTm9kZSQyIiwicmVwb3J0UmVuZGVyaW5nIiwiZW1pdCIsImV2ZW50IiwicmVuZGVyVGltZSIsIl9fJG1vYlJlbmRlckVuZCIsIl9fJG1vYlJlbmRlclN0YXJ0IiwidG90YWxUaW1lIiwidHJhY2tDb21wb25lbnRzIiwidXNlU3RhdGljUmVuZGVyaW5nIiwiZXJyb3JzUmVwb3J0ZXIiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJtYWtlQ29tcG9uZW50UmVhY3RpdmUiLCJfdGhpczIiLCJyZWFjdGl2ZVJlbmRlciIsImlzUmVuZGVyaW5nUGVuZGluZyIsImV4Y2VwdGlvbiIsImJhc2VSZW5kZXIiLCJpbml0aWFsTmFtZSIsInJvb3ROb2RlSUQiLCJfcmVhY3RJbnRlcm5hbEluc3RhbmNlIiwiX3Jvb3ROb2RlSUQiLCJfZGVidWdJRCIsImNvbXBvbmVudFdpbGxSZWFjdCIsImhhc0Vycm9yIiwicmVhY3RDb21wb25lbnQiLCJyZWFjdGl2ZU1peGluIiwibmV4dFN0YXRlIiwibWFrZU9ic2VydmFibGVQcm9wIiwidmFsdWVIb2xkZXJLZXkiLCJhdG9tSG9sZGVyS2V5IiwiX2Jhc2VSZW5kZXIiLCJfYXJndW1lbnRzIiwiT2JzZXJ2ZXIiLCJpc1JlYWN0Q2xhc3MiLCJpc1Byb3RvdHlwZU9mIiwiX2NsYXNzIiwiX3RlbXAiLCJvYnNlcnZlckNvbXBvbmVudCIsInBhdGNoJDEiLCJtaXhpbkxpZmVjeWNsZUV2ZW50cyIsImlzTW9iWFJlYWN0T2JzZXJ2ZXIiLCJfcmVmMiIsIm9ic2VydmVySW5qZWN0IiwiSW5qZWN0Q29tcG9uZW50IiwiT2JzZXJ2ZXJQcm9wc0NoZWNrIiwiZXh0cmFLZXkiLCJwcmV2U3RhdGUiLCJwcmV2UHJvcHMiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWciLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdCIsIl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmciLCJzcGVjaWFsUmVhY3RLZXlzIiwiY29weVN0b3JlcyIsInN0b3JlcyIsInZhbGlkU3RvcmVOYW1lIiwic3VwcHJlc3NDaGFuZ2VkU3RvcmVXYXJuaW5nIiwiQ29tcG9uZW50JCQxIiwiZm91bmRXaWxsTW91bnROYW1lIiwiZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSIsImZvdW5kV2lsbFVwZGF0ZU5hbWUiLCJuZXdBcGlOYW1lIiwibWF5YmVTbmFwc2hvdCIsInNuYXBzaG90IiwicG9seWZpbGwiLCJzdG9yZUtleSIsInJ1bkRpc3Bvc2Vyc09uV2lsbFVubW91bnQiLCJwcm9wS2V5T3JGdW5jdGlvbiIsImRpc3Bvc2VPblVubW91bnQiLCJwcm9wZXJ0eUtleU9yRnVuY3Rpb24iLCJjb21wb25lbnRXYXNBbHJlYWR5TW9kaWZpZWQiLCJvbiIsIm1vYngiLCJtb2J4UmVhY3QiLCJjb21wb25lbnRCeU5vZGVSZWdpc3RlcnkiLCJpbmplY3RNb2J4UmVhY3QiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsImxlbiIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJDSVJDTEUiLCJFREdFIiwiVFJJQU5HTEUiLCJQT0xZR09OIiwiU1RBUiIsIklNQUdFIiwiSU1BR0VTIiwiU2hhcGVUeXBlIiwiVE9QIiwiVE9QX1JJR0hUIiwiUklHSFQiLCJCT1RUT01fUklHSFQiLCJCT1RUT00iLCJCT1RUT01fTEVGVCIsIkxFRlQiLCJUT1BfTEVGVCIsIk1vdmVEaXJlY3Rpb24iLCJCT1VOQ0UiLCJPVVQiLCJNb3ZlT3V0TW9kZSIsIkdSQUIiLCJQVVNIIiwiUkVNT1ZFIiwiQlVCQkxFIiwiUkVQVUxTRSIsIkludGVyYWN0aXZpdHlNb2RlIiwiSU5MSU5FIiwiSU5TSURFIiwiT1VUU0lERSIsIlBvbHlnb25UeXBlIiwiUkFORE9NX1BPSU5UIiwiT05FX1BFUl9QT0lOVCIsIlJBTkRPTV9MRU5HVEgiLCJFUVVJRElTVEFOVCIsIlBvbHlnb25JbmxpbmVBcnJhbmdlbWVudFR5cGUiLCJQQVRIIiwiUkFESVVTIiwiUG9seWdvbk1vdmVUeXBlIiwiX19pbXBvcnREZWZhdWx0IiwiSW50ZXJhY3Rpdml0eSIsIk1vZGVzIiwiUGFydGljbGUiLCJQYXJ0aWNsZU1hbmFnZXIiLCJQYXJ0aWNsZXNMaWJyYXJ5IiwiVmVuZG9ycyIsImhleFRvUmdiIiwiZXhlYyIsImNsYW1wIiwiaXNJbkFycmF5IiwiaXNFcXVhbCIsImRlZXBBc3NpZ24iLCJnZXRDb2xvciIsInJnYiIsImhzbCIsIl9fZGF0YV9fIiwiTU9VU0VNT1ZFIiwiTU9VU0VMRUFWRSIsIk1vdXNlSW50ZXJhY3Rpdml0eVN0YXR1cyIsImxpYnJhcnkiLCJtb3VzZU1vdmVQb3NpdGlvbiIsIm1vdXNlQ2xpY2tQb3NpdGlvbiIsIm1vdXNlQ2xpY2tUaW1lIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlTGVhdmUiLCJvbk1vdXNlQ2xpY2siLCJnZXRQYXJhbWV0ZXIiLCJpbnRlcmFjdGl2aXR5IiwiZGV0ZWN0X29uIiwiaW50ZXJhY3Rpb25FbGVtZW50IiwiY2FudmFzIiwiZXZlbnRzIiwib25ob3ZlciIsImVuYWJsZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInJldGluYSIsInB4cmF0aW8iLCJtb3VzZVN0YXR1cyIsInBhcnRpY2xlcyIsInBvbHlnb24iLCJwb2x5Z29uTWFzayIsImlzUG9pbnRJbnNpZGVQb2x5Z29uIiwiZ2V0VGltZSIsIm1vdmUiLCJtb2RlcyIsInB1c2hQYXJ0aWNsZXMiLCJwYXJ0aWNsZXNfbmIiLCJyZW1vdmVQYXJ0aWNsZXMiLCJidWJibGVfY2xpY2tpbmciLCJyZXB1bHNlX2NsaWNraW5nIiwicmVwdWxzZV9jb3VudCIsInJlcHVsc2VfZmluaXNoIiwicmVwdWxzZSIsImR1cmF0aW9uIiwibWFuYWdlciIsImdldERpc3RhbmNlIiwibGluZV9saW5rZWQiLCJkaXN0YW5jZSIsImNvbG9yX3JnYl9saW5lIiwiY3R4Iiwic2F2ZSIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwiYmVnaW5QYXRoIiwic2hhZG93Iiwic2hhZG93Qmx1ciIsImJsdXIiLCJzaGFkb3dDb2xvciIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsImNsb3NlUGF0aCIsInJlc3RvcmUiLCJnZXREaXN0YW5jZXMiLCJkaXN0YW5jZVgiLCJkaXN0YW5jZVkiLCJhdHRyYWN0Iiwicm90YXRlWCIsInJvdGF0ZVkiLCJ2eCIsInZ5IiwicmFkaXVzIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsImlzVHlwZWRBcnJheSIsIlBhcnRpY2xlcyIsIl9faW1wb3J0U3RhciIsImxvYWRDYW52YXMiLCJidWlsZFBhcnRpY2xlc0xpYnJhcnkiLCJyZWZyZXNoIiwiY2FudmFzQ2xhc3NOYW1lIiwiYnViYmxlX2R1cmF0aW9uX2VuZCIsInB1c2hpbmciLCJwb3NpdGlvbiIsInBhcnRpY2xlc0RyYXciLCJidWJibGUiLCJyYWRpdXNfYnViYmxlIiwib3BhY2l0eVZhbHVlIiwiYnViYmxlT3BhY2l0eSIsInBvdyIsIm91dF9tb2RlIiwiYXRhbjIiLCJjb3MiLCJzaW4iLCJ2eF9pIiwidnlfaSIsImdyYWIiLCJzaGFwZSIsInNldHVwU2l6ZSIsInNldHVwUG9zaXRpb24iLCJzZXR1cENvbG9yIiwic2V0dXBPcGFjaXR5Iiwic2V0dXBBbmltYXRpb24iLCJzZXR1cFNoYXBlIiwiYW5pbSIsInNpemVfc3RhdHVzIiwidnMiLCJzcGVlZCIsInN5bmMiLCJpbml0aWFsUG9zaXRpb24iLCJ2ZW5kb3JzIiwiaW5saW5lIiwiYXJyYW5nZW1lbnQiLCJnZXRSYW5kb21Qb2ludE9uUG9seWdvblBhdGgiLCJnZXRSYW5kb21Qb2ludE9uUG9seWdvblBhdGhCeUxlbmd0aCIsImdldEVxdWlkaXN0YW50UG9pbmdPblBvbHlnb25QYXRoQnlJbmRleCIsImdldFBvaW5nT25Qb2x5Z29uUGF0aEJ5SW5kZXgiLCJnZXRSYW5kb21Qb2ludEluc2lkZVBvbHlnb25QYXRoIiwiZ2V0UmFuZG9tUG9pbnRPdXRzaWRlUG9seWdvblBhdGgiLCJib3VuY2UiLCJjaGVja092ZXJsYXAiLCJvcGFjaXR5X3N0YXR1cyIsInZvIiwiZGlyZWN0aW9uIiwic3RyYWlnaHQiLCJzaGFwZUltYWdlIiwiaW1hZ2VNYW5hZ2VyIiwiZ2V0SW1hZ2UiLCJzdmdEYXRhIiwiY3JlYXRlU3ZnSW1hZ2UiLCJlbGVtZW50RGF0YSIsImxvYWRlZCIsImZpbGxTdHlsZSIsImFyYyIsIlBJIiwicmVjdCIsImRyYXdTaGFwZSIsIm5iX3NpZGVzIiwiZHJhd0ltYWdlIiwicmF0aW8iLCJmaWxsIiwicGFydGljbGVzQ3JlYXRlIiwiZ2V0VmVydGljZXNOdW1iZXIiLCJvcGFjaXR5X21pbiIsInNpemVfbWluIiwieF9sZWZ0IiwieF9yaWdodCIsInlfdG9wIiwieV9ib3R0b20iLCJncmFiUGFydGljbGUiLCJidWJibGVQYXJ0aWNsZSIsInJlcHVsc2VQYXJ0aWNsZSIsImxpbmtQYXJ0aWNsZXMiLCJhdHRyYWN0UGFydGljbGVzIiwiYm91bmNlUGFydGljbGVzIiwic3FydCIsImNsZWFyUmVjdCIsInBhcnRpY2xlc1VwZGF0ZSIsImRyYXciLCJkcmF3UG9seWdvbiIsImRyYXdBbmltRnJhbWUiLCJwYXJ0aWNsZXNFbXB0eSIsImNhbnZhc0NsZWFyIiwiSW1hZ2VNYW5hZ2VyIiwib25XaW5kb3dSZXNpemUiLCJsb2FkUGFyYW1ldGVycyIsIlBvbHlnb25NYXNrIiwiZ2V0RGVmYXVsdFBhcmFtcyIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiYXR0YWNoRXZlbnRIYW5kbGVycyIsImRldGFjaExpc3RlbmVycyIsImRldGFjaEV2ZW50SGFuZGxlcnMiLCJkZXZpY2VQaXhlbFJhdGlvIiwicmV0aW5hX2RldGVjdCIsInNldFBhcmFtZXRlcnMiLCJnZXRDb250ZXh0IiwicmVzaXplIiwiZmlsbFJlY3QiLCJpbml0aWFsaXplIiwiZGVuc2l0eUF1dG9QYXJ0aWNsZXMiLCJTSU5HTEUiLCJNVUxUSVBMRSIsIkltYWdlTW9kZSIsInNpbmdsZUltYWdlIiwibXVsdGlwbGVJbWFnZXMiLCJwYXJzZVNpbmdsZUltYWdlIiwiaW1hZ2UiLCJpbWFnZXMiLCJidWlsZEltYWdlT2JqZWN0IiwibG9hZEltYWdlIiwiZG93bmxvYWRJbWFnZSIsInJlc3BvbnNlIiwiSW1hZ2UiLCJ4aHIiLCJCbG9iIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiaW5pdGlhbGl6ZWQiLCJsYXN0RHJhdyIsImRlbnNpdHkiLCJ2YWx1ZV9hcmVhIiwiYWJzIiwidHJhbnNsYXRlIiwicm90YXRlIiwidG9EYXRhVVJMIiwiZnBzX2xpbWl0IiwicmV0aW5hSW5pdCIsImNhbnZhc0luaXQiLCJjYW52YXNTaXplIiwicGFyc2VTaGFwZSIsImluaXQiLCJzY2FsZSIsInBvbHlnb25QYXRoTGVuZ3RoIiwicGF0aDJEU3VwcG9ydGVkIiwiUGF0aDJEIiwiZGVib3VuY2VUaW1lIiwicGFyc2VTdmdQYXRoVG9Qb2x5Z29uIiwiZGVib3VuY2VUaW1lciIsInBvbHlnb25SYXciLCJsYXN0Q2FudmFzV2lkdGgiLCJsYXN0Q2FudmFzSGVpZ2h0IiwicGFyc2VTdmdQYXRoIiwicG9seWdvbkRhdGEiLCJwb2x5Z29uV2lkdGgiLCJnZXRBdHRyaWJ1dGUiLCJwb2x5Z29uSGVpZ2h0IiwicG9seWdvbk9mZnNldFgiLCJwb2x5Z29uT2Zmc2V0WSIsImdldFRvdGFsTGVuZ3RoIiwicGF0aFNlZ0xpc3QiLCJudW1iZXJPZkl0ZW1zIiwiZ2V0SXRlbSIsInBhdGhTZWdUeXBlIiwiU1ZHUGF0aFNlZyIsIlBBVEhTRUdfQVJDX0FCUyIsIlBBVEhTRUdfQ1VSVkVUT19DVUJJQ19BQlMiLCJQQVRIU0VHX0NVUlZFVE9fQ1VCSUNfU01PT1RIX0FCUyIsIlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfQUJTIiwiUEFUSFNFR19DVVJWRVRPX1FVQURSQVRJQ19TTU9PVEhfQUJTIiwiUEFUSFNFR19MSU5FVE9fQUJTIiwiUEFUSFNFR19NT1ZFVE9fQUJTIiwiUEFUSFNFR19MSU5FVE9fSE9SSVpPTlRBTF9BQlMiLCJQQVRIU0VHX0xJTkVUT19WRVJUSUNBTF9BQlMiLCJQQVRIU0VHX0FSQ19SRUwiLCJQQVRIU0VHX0NVUlZFVE9fQ1VCSUNfUkVMIiwiUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9SRUwiLCJQQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1JFTCIsIlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfU01PT1RIX1JFTCIsIlBBVEhTRUdfTElORVRPX1JFTCIsIlBBVEhTRUdfTU9WRVRPX1JFTCIsIlBBVEhTRUdfTElORVRPX0hPUklaT05UQUxfUkVMIiwiUEFUSFNFR19MSU5FVE9fVkVSVElDQUxfUkVMIiwiUEFUSFNFR19VTktOT1dOIiwiUEFUSFNFR19DTE9TRVBBVEgiLCJjcmVhdGVQYXRoMkQiLCJyZXNwb25zZVhNTCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0UG9pbnRBdExlbmd0aCIsInBvbHlnb25QYXRoIiwiaXNQb2ludEluUGF0aCIsIklFX1BST1RPIiwiaGFzaCIsInN0cmluZyIsImJ5dGVMZW5ndGgiLCJieXRlT2Zmc2V0IiwiYnVmZmVyIiwiVWludDhBcnJheSIsInJlcXVpcmUiLCJ0eXBlcyIsIkFycmF5QnVmZmVyIl0sIm1hcHBpbmdzIjoiYUFHRSxJQUFJQSxFQUEwQkMsT0FBeUIsaUJBQ3ZEQSxPQUF5QixpQkFDekIsU0FBa0NDLEVBQVNDLElBZ1IzQyxTQUEyQkQsRUFBU0MsR0FDbkMsSUFBS0MsRUFBcUJGLEtBQWFHLEVBQXFCSCxHQUMzRCxPQUVELElBQUssSUFBSUksS0FEVEQsRUFBcUJILElBQVcsRUFDWEMsRUFDaEJJLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtQLEVBQWFHLEtBQ3JESyxFQUFVTCxHQUFZSCxFQUFZRyxJQUdWLEtBQXBCTSxHQUE4QyxJQUFyQkMsR0FD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QUFNLG1CQUFtQixPQUFPOVAsSUFBSVIsRUFBRStILFFBQVF1TixHQUFHLFNBQVN0VixFQUFFUSxFQUFFYSxHQUFHLElBQUl1SCxFQUFFdkgsRUFBRSxFQUFGQSxDQUFLQSxFQUFFLEdBQUcsWUFBWXJCLEVBQUUrSCxRQUFRYSxHQUFHLFNBQVM1SSxFQUFFUSxFQUFFYSxHQUFHLElBQUl1SCxFQUFFdkgsRUFBRSxFQUFGQSxDQUFLQSxFQUFFLEdBQUcsV0FBV3JCLEVBQUUrSCxRQUFRYSxHQUFHLFNBQVM1SSxFQUFFUSxFQUFFYSxHQUFHLElBQUl1SCxFQUFFdkgsRUFBRSxFQUFGQSxDQUFLQSxFQUFFLEdBQUcsT0FBT3JCLEVBQUUrSCxRQUFRYSxHQUFHLFNBQVM1SSxFQUFFUSxFQUFFYSxHQUFHLElBQUl1SCxFQUFFdkgsRUFBRSxFQUFGQSxDQUFLQSxFQUFFLEdBQUcsV0FBV3JCLEVBQUUrSCxRQUFRYSxPLGdGQ1d0NzNEbXZELGVBTnFCLENBQ3JCcVosU0FBVSxXQUNWdmhDLE9BQVEsTSxFQUlRaW9CLGdCQVhNLENBQ3RCNFYsVUFBVyxDQUFDa0IsWUFBYSxDQUFDUSxPQUFRLENBQUNqQyxRQUFRLEVBQU10M0IsTUFBTyxVQUFXeTVCLEtBQU0sS0FDekVwNUIsT0FBUSxDQUFDcDJDLE1BQU8sSUFBSzQ0RSxRQUFTLENBQUN2TCxRQUFRLEVBQU13TCxXQUFZIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdGZ1bmN0aW9uIGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKSB7XG4gXHRcdGRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHR9XG4gXHR2YXIgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2sgPSB3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdO1xuIFx0d2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXSA9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gd2VicGFja0hvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbiBcdFx0aWYgKHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKSBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHR9IDtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0dmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gXHRcdHNjcmlwdC5jaGFyc2V0ID0gXCJ1dGYtOFwiO1xuIFx0XHRzY3JpcHQuc3JjID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc1wiO1xuIFx0XHRpZiAobnVsbCkgc2NyaXB0LmNyb3NzT3JpZ2luID0gbnVsbDtcbiBcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkTWFuaWZlc3QocmVxdWVzdFRpbWVvdXQpIHtcbiBcdFx0cmVxdWVzdFRpbWVvdXQgPSByZXF1ZXN0VGltZW91dCB8fCAxMDAwMDtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QobmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0XCIpKTtcbiBcdFx0XHR9XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdFBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzb25cIjtcbiBcdFx0XHRcdHJlcXVlc3Qub3BlbihcIkdFVFwiLCByZXF1ZXN0UGF0aCwgdHJ1ZSk7XG4gXHRcdFx0XHRyZXF1ZXN0LnRpbWVvdXQgPSByZXF1ZXN0VGltZW91dDtcbiBcdFx0XHRcdHJlcXVlc3Quc2VuZChudWxsKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QoZXJyKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHJldHVybjtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCkge1xuIFx0XHRcdFx0XHQvLyB0aW1lb3V0XG4gXHRcdFx0XHRcdHJlamVjdChcbiBcdFx0XHRcdFx0XHRuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiB0aW1lZCBvdXQuXCIpXG4gXHRcdFx0XHRcdCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzID09PSA0MDQpIHtcbiBcdFx0XHRcdFx0Ly8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuIFx0XHRcdFx0XHRyZXNvbHZlKCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDMwNCkge1xuIFx0XHRcdFx0XHQvLyBvdGhlciBmYWlsdXJlXG4gXHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiBmYWlsZWQuXCIpKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdC8vIHN1Y2Nlc3NcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHR2YXIgdXBkYXRlID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcbiBcdFx0XHRcdFx0XHRyZWplY3QoZSk7XG4gXHRcdFx0XHRcdFx0cmV0dXJuO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdHJlc29sdmUodXBkYXRlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0dmFyIGhvdEFwcGx5T25VcGRhdGUgPSB0cnVlO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudEhhc2ggPSBcImVjOWQwYzA4MWY4MmQ2MGFhNjgxXCI7XG4gXHR2YXIgaG90UmVxdWVzdFRpbWVvdXQgPSAxMDAwMDtcbiBcdHZhciBob3RDdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xuIFx0dmFyIGhvdEN1cnJlbnRDaGlsZE1vZHVsZTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50c1RlbXAgPSBbXTtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRpZiAoIW1lKSByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXztcbiBcdFx0dmFyIGZuID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuIFx0XHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG4gXHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuIFx0XHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuIFx0XHRcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG4gXHRcdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuIFx0XHRcdFx0XHRcdHJlcXVlc3QgK1xuIFx0XHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdCk7XG4gXHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhyZXF1ZXN0KTtcbiBcdFx0fTtcbiBcdFx0dmFyIE9iamVjdEZhY3RvcnkgPSBmdW5jdGlvbiBPYmplY3RGYWN0b3J5KG5hbWUpIHtcbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdO1xuIFx0XHRcdFx0fSxcbiBcdFx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiBcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXSA9IHZhbHVlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH07XG4gXHRcdGZvciAodmFyIG5hbWUgaW4gX193ZWJwYWNrX3JlcXVpcmVfXykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfX3dlYnBhY2tfcmVxdWlyZV9fLCBuYW1lKSAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJlXCIgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwidFwiXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIE9iamVjdEZhY3RvcnkobmFtZSkpO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRmbi5lID0gZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicmVhZHlcIikgaG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHRob3RDaHVua3NMb2FkaW5nKys7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZShjaHVua0lkKS50aGVuKGZpbmlzaENodW5rTG9hZGluZywgZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRmaW5pc2hDaHVua0xvYWRpbmcoKTtcbiBcdFx0XHRcdHRocm93IGVycjtcbiBcdFx0XHR9KTtcblxuIFx0XHRcdGZ1bmN0aW9uIGZpbmlzaENodW5rTG9hZGluZygpIHtcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmctLTtcbiBcdFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiKSB7XG4gXHRcdFx0XHRcdGlmICghaG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XG4gXHRcdFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9O1xuIFx0XHRmbi50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0XHRpZiAobW9kZSAmIDEpIHZhbHVlID0gZm4odmFsdWUpO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLnQodmFsdWUsIG1vZGUgJiB+MSk7XG4gXHRcdH07XG4gXHRcdHJldHVybiBmbjtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIGhvdCA9IHtcbiBcdFx0XHQvLyBwcml2YXRlIHN0dWZmXG4gXHRcdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuIFx0XHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuIFx0XHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuIFx0XHRcdF9tYWluOiBob3RDdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxuXG4gXHRcdFx0Ly8gTW9kdWxlIEFQSVxuIFx0XHRcdGFjdGl2ZTogdHJ1ZSxcbiBcdFx0XHRhY2NlcHQ6IGZ1bmN0aW9uKGRlcCwgY2FsbGJhY2spIHtcbiBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0XHRlbHNlIGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0fSxcbiBcdFx0XHRkZWNsaW5lOiBmdW5jdGlvbihkZXApIHtcbiBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRpc3Bvc2U6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vIE1hbmFnZW1lbnQgQVBJXG4gXHRcdFx0Y2hlY2s6IGhvdENoZWNrLFxuIFx0XHRcdGFwcGx5OiBob3RBcHBseSxcbiBcdFx0XHRzdGF0dXM6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGlmICghbCkgcmV0dXJuIGhvdFN0YXR1cztcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcbiBcdFx0XHRkYXRhOiBob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cbiBcdFx0fTtcbiBcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuIFx0XHRyZXR1cm4gaG90O1xuIFx0fVxuXG4gXHR2YXIgaG90U3RhdHVzSGFuZGxlcnMgPSBbXTtcbiBcdHZhciBob3RTdGF0dXMgPSBcImlkbGVcIjtcblxuIFx0ZnVuY3Rpb24gaG90U2V0U3RhdHVzKG5ld1N0YXR1cykge1xuIFx0XHRob3RTdGF0dXMgPSBuZXdTdGF0dXM7XG4gXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaG90U3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXG4gXHRcdFx0aG90U3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xuIFx0fVxuXG4gXHQvLyB3aGlsZSBkb3dubG9hZGluZ1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlcyA9IDA7XG4gXHR2YXIgaG90Q2h1bmtzTG9hZGluZyA9IDA7XG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RBdmFpbGFibGVGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdERlZmVycmVkO1xuXG4gXHQvLyBUaGUgdXBkYXRlIGluZm9cbiBcdHZhciBob3RVcGRhdGUsIGhvdFVwZGF0ZU5ld0hhc2g7XG5cbiBcdGZ1bmN0aW9uIHRvTW9kdWxlSWQoaWQpIHtcbiBcdFx0dmFyIGlzTnVtYmVyID0gK2lkICsgXCJcIiA9PT0gaWQ7XG4gXHRcdHJldHVybiBpc051bWJlciA/ICtpZCA6IGlkO1xuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RDaGVjayhhcHBseSkge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcImlkbGVcIikge1xuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuIFx0XHR9XG4gXHRcdGhvdEFwcGx5T25VcGRhdGUgPSBhcHBseTtcbiBcdFx0aG90U2V0U3RhdHVzKFwiY2hlY2tcIik7XG4gXHRcdHJldHVybiBob3REb3dubG9hZE1hbmlmZXN0KGhvdFJlcXVlc3RUaW1lb3V0KS50aGVuKGZ1bmN0aW9uKHVwZGF0ZSkge1xuIFx0XHRcdGlmICghdXBkYXRlKSB7XG4gXHRcdFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRcdFx0cmV0dXJuIG51bGw7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90QXZhaWxhYmxlRmlsZXNNYXAgPSB1cGRhdGUuYztcbiBcdFx0XHRob3RVcGRhdGVOZXdIYXNoID0gdXBkYXRlLmg7XG5cbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHRob3REZWZlcnJlZCA9IHtcbiBcdFx0XHRcdFx0cmVzb2x2ZTogcmVzb2x2ZSxcbiBcdFx0XHRcdFx0cmVqZWN0OiByZWplY3RcbiBcdFx0XHRcdH07XG4gXHRcdFx0fSk7XG4gXHRcdFx0aG90VXBkYXRlID0ge307XG4gXHRcdFx0dmFyIGNodW5rSWQgPSAwO1xuIFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xuIFx0XHRcdHtcbiBcdFx0XHRcdC8qZ2xvYmFscyBjaHVua0lkICovXG4gXHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aG90U3RhdHVzID09PSBcInByZXBhcmVcIiAmJlxuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJlxuIFx0XHRcdFx0aG90V2FpdGluZ0ZpbGVzID09PSAwXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBwcm9taXNlO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdIHx8ICFob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSlcbiBcdFx0XHRyZXR1cm47XG4gXHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gZmFsc2U7XG4gXHRcdGZvciAodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZiAoLS1ob3RXYWl0aW5nRmlsZXMgPT09IDAgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCkge1xuIFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXMrKztcbiBcdFx0XHRob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdFVwZGF0ZURvd25sb2FkZWQoKSB7XG4gXHRcdGhvdFNldFN0YXR1cyhcInJlYWR5XCIpO1xuIFx0XHR2YXIgZGVmZXJyZWQgPSBob3REZWZlcnJlZDtcbiBcdFx0aG90RGVmZXJyZWQgPSBudWxsO1xuIFx0XHRpZiAoIWRlZmVycmVkKSByZXR1cm47XG4gXHRcdGlmIChob3RBcHBseU9uVXBkYXRlKSB7XG4gXHRcdFx0Ly8gV3JhcCBkZWZlcnJlZCBvYmplY3QgaW4gUHJvbWlzZSB0byBtYXJrIGl0IGFzIGEgd2VsbC1oYW5kbGVkIFByb21pc2UgdG9cbiBcdFx0XHQvLyBhdm9pZCB0cmlnZ2VyaW5nIHVuY2F1Z2h0IGV4Y2VwdGlvbiB3YXJuaW5nIGluIENocm9tZS5cbiBcdFx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDY1NjY2XG4gXHRcdFx0UHJvbWlzZS5yZXNvbHZlKClcbiBcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gaG90QXBwbHkoaG90QXBwbHlPblVwZGF0ZSk7XG4gXHRcdFx0XHR9KVxuIFx0XHRcdFx0LnRoZW4oXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKHJlc3VsdCkge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiBcdFx0XHRcdFx0fSxcbiBcdFx0XHRcdFx0ZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KGVycik7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdCk7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaCh0b01vZHVsZUlkKGlkKSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHRcdGRlZmVycmVkLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwicmVhZHlcIilcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXNcIik7XG4gXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gXHRcdHZhciBjYjtcbiBcdFx0dmFyIGk7XG4gXHRcdHZhciBqO1xuIFx0XHR2YXIgbW9kdWxlO1xuIFx0XHR2YXIgbW9kdWxlSWQ7XG5cbiBcdFx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRTdHVmZih1cGRhdGVNb2R1bGVJZCkge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuIFx0XHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG4gXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLm1hcChmdW5jdGlvbihpZCkge1xuIFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0Y2hhaW46IFtpZF0sXG4gXHRcdFx0XHRcdGlkOiBpZFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuIFx0XHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAoIW1vZHVsZSB8fCBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudCA9IGluc3RhbGxlZE1vZHVsZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHRcdH07XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG4gXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcbiBcdFx0XHRcdFx0cXVldWUucHVzaCh7XG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRpZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuXG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcbiBcdFx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcbiBcdFx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuIFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG4gXHRcdFx0fTtcbiBcdFx0fVxuXG4gXHRcdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcbiBcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcbiBcdFx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcbiBcdFx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuIFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcbiBcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG4gXHRcdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUoKSB7XG4gXHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyByZXN1bHQubW9kdWxlSWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcbiBcdFx0XHQpO1xuIFx0XHR9O1xuXG4gXHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdG1vZHVsZUlkID0gdG9Nb2R1bGVJZChpZCk7XG4gXHRcdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG4gXHRcdFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRcdFx0aWYgKGhvdFVwZGF0ZVtpZF0pIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGVJZCk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBpZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cbiBcdFx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG4gXHRcdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG4gXHRcdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcbiBcdFx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGRlZmF1bHQ6XG4gXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG4gXHRcdFx0XHRcdGhvdFNldFN0YXR1cyhcImFib3J0XCIpO1xuIFx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoYWJvcnRFcnJvcik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9BcHBseSkge1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IGhvdFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdFx0XHRcdGZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0XHRcdFx0aWYgKFxuIFx0XHRcdFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHRcdFx0XHQpXG4gXHRcdFx0XHRcdFx0KSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG4gXHRcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuIFx0XHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRtb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSAmJlxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWQgJiZcbiBcdFx0XHRcdC8vIHJlbW92ZWQgc2VsZi1hY2NlcHRlZCBtb2R1bGVzIHNob3VsZCBub3QgYmUgcmVxdWlyZWRcbiBcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdICE9PSB3YXJuVW5leHBlY3RlZFJlcXVpcmVcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcbiBcdFx0XHRcdFx0bW9kdWxlOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxuIFx0XHRcdFx0fSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG4gXHRcdE9iamVjdC5rZXlzKGhvdEF2YWlsYWJsZUZpbGVzTWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gPT09IGZhbHNlKSB7XG4gXHRcdFx0XHRob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHR9KTtcblxuIFx0XHR2YXIgaWR4O1xuIFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcbiBcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiBcdFx0XHRtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcblxuIFx0XHRcdHZhciBkYXRhID0ge307XG5cbiBcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcbiBcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdGNiID0gZGlzcG9zZUhhbmRsZXJzW2pdO1xuIFx0XHRcdFx0Y2IoZGF0YSk7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXSA9IGRhdGE7XG5cbiBcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuIFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cbiBcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcbiBcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG4gXHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGNoaWxkID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuIFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG4gXHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG4gXHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cbiBcdFx0dmFyIGRlcGVuZGVuY3k7XG4gXHRcdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcbiBcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcbiBcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIE5vdyBpbiBcImFwcGx5XCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cbiBcdFx0aG90Q3VycmVudEhhc2ggPSBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRcdC8vIGluc2VydCBuZXcgY29kZVxuIFx0XHRmb3IgKG1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFwcGxpZWRVcGRhdGUsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuIFx0XHR2YXIgZXJyb3IgPSBudWxsO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV07XG4gXHRcdFx0XHRcdFx0Y2IgPSBtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcbiBcdFx0XHRcdFx0XHRpZiAoY2IpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihjYikgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGNiKTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGNiID0gY2FsbGJhY2tzW2ldO1xuIFx0XHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0XHRjYihtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG4gXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXSxcbiBcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG4gXHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuIFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVycik7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcbiBcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyMjtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuIFx0XHRpZiAoZXJyb3IpIHtcbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJmYWlsXCIpO1xuIFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gXHRcdH1cblxuIFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuIFx0XHRcdHJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGhvdDogaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSxcbiBcdFx0XHRwYXJlbnRzOiAoaG90Q3VycmVudFBhcmVudHNUZW1wID0gaG90Q3VycmVudFBhcmVudHMsIGhvdEN1cnJlbnRQYXJlbnRzID0gW10sIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCksXG4gXHRcdFx0Y2hpbGRyZW46IFtdXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBfX3dlYnBhY2tfaGFzaF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhvdEN1cnJlbnRIYXNoOyB9O1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIGhvdENyZWF0ZVJlcXVpcmUoNSkoX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBNb2JYIC0gKGMpIE1pY2hlbCBXZXN0c3RyYXRlIDIwMTUgLSAyMDE5IC0gTUlUIExpY2Vuc2VkICovXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG52YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxuXG52YXIgT0JGVVNDQVRFRF9FUlJPUiA9IFwiQW4gaW52YXJpYW50IGZhaWxlZCwgaG93ZXZlciB0aGUgZXJyb3IgaXMgb2JmdXNjYXRlZCBiZWNhdXNlIHRoaXMgaXMgYW4gcHJvZHVjdGlvbiBidWlsZC5cIjtcbnZhciBFTVBUWV9BUlJBWSA9IFtdO1xuT2JqZWN0LmZyZWV6ZShFTVBUWV9BUlJBWSk7XG52YXIgRU1QVFlfT0JKRUNUID0ge307XG5PYmplY3QuZnJlZXplKEVNUFRZX09CSkVDVCk7XG5mdW5jdGlvbiBnZXROZXh0SWQoKSB7XG4gICAgcmV0dXJuICsrZ2xvYmFsU3RhdGUubW9ieEd1aWQ7XG59XG5mdW5jdGlvbiBmYWlsKG1lc3NhZ2UpIHtcbiAgICBpbnZhcmlhbnQoZmFsc2UsIG1lc3NhZ2UpO1xuICAgIHRocm93IFwiWFwiOyAvLyB1bnJlYWNoYWJsZVxufVxuZnVuY3Rpb24gaW52YXJpYW50KGNoZWNrLCBtZXNzYWdlKSB7XG4gICAgaWYgKCFjaGVjaylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW21vYnhdIFwiICsgKG1lc3NhZ2UgfHwgT0JGVVNDQVRFRF9FUlJPUikpO1xufVxuLyoqXG4gKiBQcmludHMgYSBkZXByZWNhdGlvbiBtZXNzYWdlLCBidXQgb25seSBvbmUgdGltZS5cbiAqIFJldHVybnMgZmFsc2UgaWYgdGhlIGRlcHJlY2F0ZWQgbWVzc2FnZSB3YXMgYWxyZWFkeSBwcmludGVkIGJlZm9yZVxuICovXG52YXIgZGVwcmVjYXRlZE1lc3NhZ2VzID0gW107XG5mdW5jdGlvbiBkZXByZWNhdGVkKG1zZywgdGhpbmcpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHRoaW5nKSB7XG4gICAgICAgIHJldHVybiBkZXByZWNhdGVkKFwiJ1wiICsgbXNnICsgXCInLCB1c2UgJ1wiICsgdGhpbmcgKyBcIicgaW5zdGVhZC5cIik7XG4gICAgfVxuICAgIGlmIChkZXByZWNhdGVkTWVzc2FnZXMuaW5kZXhPZihtc2cpICE9PSAtMSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRlcHJlY2F0ZWRNZXNzYWdlcy5wdXNoKG1zZyk7XG4gICAgY29uc29sZS5lcnJvcihcIlttb2J4XSBEZXByZWNhdGVkOiBcIiArIG1zZyk7XG4gICAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIE1ha2VzIHN1cmUgdGhhdCB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gaXMgaW52b2tlZCBhdCBtb3N0IG9uY2UuXG4gKi9cbmZ1bmN0aW9uIG9uY2UoZnVuYykge1xuICAgIHZhciBpbnZva2VkID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGludm9rZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGludm9rZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHsgfTtcbmZ1bmN0aW9uIHVuaXF1ZShsaXN0KSB7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBpZiAocmVzLmluZGV4T2YoaXRlbSkgPT09IC0xKVxuICAgICAgICAgICAgcmVzLnB1c2goaXRlbSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn1cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgICByZXR1cm4gcHJvdG8gPT09IE9iamVjdC5wcm90b3R5cGUgfHwgcHJvdG8gPT09IG51bGw7XG59XG5mdW5jdGlvbiBhZGRIaWRkZW5Qcm9wKG9iamVjdCwgcHJvcE5hbWUsIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcE5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0pO1xufVxuZnVuY3Rpb24gYWRkSGlkZGVuRmluYWxQcm9wKG9iamVjdCwgcHJvcE5hbWUsIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcE5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGlzUHJvcGVydHlDb25maWd1cmFibGUob2JqZWN0LCBwcm9wKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcCk7XG4gICAgcmV0dXJuICFkZXNjcmlwdG9yIHx8IChkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSAhPT0gZmFsc2UgJiYgZGVzY3JpcHRvci53cml0YWJsZSAhPT0gZmFsc2UpO1xufVxuZnVuY3Rpb24gYXNzZXJ0UHJvcGVydHlDb25maWd1cmFibGUob2JqZWN0LCBwcm9wKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhaXNQcm9wZXJ0eUNvbmZpZ3VyYWJsZShvYmplY3QsIHByb3ApKVxuICAgICAgICBmYWlsKFwiQ2Fubm90IG1ha2UgcHJvcGVydHkgJ1wiICsgcHJvcC50b1N0cmluZygpICsgXCInIG9ic2VydmFibGUsIGl0IGlzIG5vdCBjb25maWd1cmFibGUgYW5kIHdyaXRhYmxlIGluIHRoZSB0YXJnZXQgb2JqZWN0XCIpO1xufVxuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShuYW1lLCBjbGF6eikge1xuICAgIHZhciBwcm9wTmFtZSA9IFwiaXNNb2JYXCIgKyBuYW1lO1xuICAgIGNsYXp6LnByb3RvdHlwZVtwcm9wTmFtZV0gPSB0cnVlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gaXNPYmplY3QoeCkgJiYgeFtwcm9wTmFtZV0gPT09IHRydWU7XG4gICAgfTtcbn1cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheSwgZGlzcmVnYXJkaW5nIG9ic2VydmFiaWxpdHkuXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHgpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh4KSB8fCBpc09ic2VydmFibGVBcnJheSh4KTtcbn1cbmZ1bmN0aW9uIGlzRVM2TWFwKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgTWFwO1xufVxuZnVuY3Rpb24gaXNFUzZTZXQodGhpbmcpIHtcbiAgICByZXR1cm4gdGhpbmcgaW5zdGFuY2VvZiBTZXQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGZvbGxvd2luZzogb3duIGtleXMsIHByb3RvdHlwZSBrZXlzICYgb3duIHN5bWJvbCBrZXlzLCBpZiB0aGV5IGFyZSBlbnVtZXJhYmxlLlxuICovXG5mdW5jdGlvbiBnZXRQbGFpbk9iamVjdEtleXMob2JqZWN0KSB7XG4gICAgdmFyIGVudW1lcmFibGVzID0gbmV3IFNldCgpO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpXG4gICAgICAgIGVudW1lcmFibGVzLmFkZChrZXkpOyAvLyAqYWxsKiBlbnVtZXJhYmxlc1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgaykuZW51bWVyYWJsZSlcbiAgICAgICAgICAgIGVudW1lcmFibGVzLmFkZChrKTtcbiAgICB9KTsgLy8gKm93biogc3ltYm9sc1xuICAgIC8vIE5vdGU6IHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbWlzc2luZyBlbnVtZXJhYmxlLCBpbmhlcml0ZWQsIHN5bWJvbGljIHByb3BlcnR5IG5hbWVzISBUaGF0IHdvdWxkIGhvd2V2ZXIgcHJldHR5IGV4cGVuc2l2ZSB0byBhZGQsXG4gICAgLy8gYXMgdGhlcmUgaXMgbm8gZWZmaWNpZW50IGl0ZXJhdG9yIHRoYXQgcmV0dXJucyAqYWxsKiBwcm9wZXJ0aWVzXG4gICAgcmV0dXJuIEFycmF5LmZyb20oZW51bWVyYWJsZXMpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5S2V5KGtleSkge1xuICAgIGlmIChrZXkgJiYga2V5LnRvU3RyaW5nKVxuICAgICAgICByZXR1cm4ga2V5LnRvU3RyaW5nKCk7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gbmV3IFN0cmluZyhrZXkpLnRvU3RyaW5nKCk7XG59XG5mdW5jdGlvbiBnZXRNYXBMaWtlS2V5cyhtYXApIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChtYXApKVxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtYXApKVxuICAgICAgICByZXR1cm4gbWFwLm1hcChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBfYiA9IF9fcmVhZChfYSwgMSksIGtleSA9IF9iWzBdO1xuICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgfSk7XG4gICAgaWYgKGlzRVM2TWFwKG1hcCkgfHwgaXNPYnNlcnZhYmxlTWFwKG1hcCkpXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKG1hcC5rZXlzKCkpO1xuICAgIHJldHVybiBmYWlsKFwiQ2Fubm90IGdldCBrZXlzIGZyb20gJ1wiICsgbWFwICsgXCInXCIpO1xufVxuZnVuY3Rpb24gdG9QcmltaXRpdmUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBudWxsIDogdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiID8gXCJcIiArIHZhbHVlIDogdmFsdWU7XG59XG5cbnZhciAkbW9ieCA9IFN5bWJvbChcIm1vYnggYWRtaW5pc3RyYXRpb25cIik7XG52YXIgQXRvbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYXRvbS4gRm9yIGRlYnVnZ2luZyBwdXJwb3NlcyBpdCBpcyByZWNvbW1lbmRlZCB0byBnaXZlIGl0IGEgbmFtZS5cbiAgICAgKiBUaGUgb25CZWNvbWVPYnNlcnZlZCBhbmQgb25CZWNvbWVVbm9ic2VydmVkIGNhbGxiYWNrcyBjYW4gYmUgdXNlZCBmb3IgcmVzb3VyY2UgbWFuYWdlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBBdG9tKG5hbWUpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09IHZvaWQgMCkgeyBuYW1lID0gXCJBdG9tQFwiICsgZ2V0TmV4dElkKCk7IH1cbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5pc1BlbmRpbmdVbm9ic2VydmF0aW9uID0gZmFsc2U7IC8vIGZvciBlZmZlY3RpdmUgdW5vYnNlcnZpbmcuIEJhc2VBdG9tIGhhcyB0cnVlLCBmb3IgZXh0cmEgb3B0aW1pemF0aW9uLCBzbyBpdHMgb25CZWNvbWVVbm9ic2VydmVkIG5ldmVyIGdldHMgY2FsbGVkLCBiZWNhdXNlIGl0J3Mgbm90IG5lZWRlZFxuICAgICAgICB0aGlzLmlzQmVpbmdPYnNlcnZlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9ic2VydmVycyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5kaWZmVmFsdWUgPSAwO1xuICAgICAgICB0aGlzLmxhc3RBY2Nlc3NlZEJ5ID0gMDtcbiAgICAgICAgdGhpcy5sb3dlc3RPYnNlcnZlclN0YXRlID0gSURlcml2YXRpb25TdGF0ZS5OT1RfVFJBQ0tJTkc7XG4gICAgfVxuICAgIEF0b20ucHJvdG90eXBlLm9uQmVjb21lT2JzZXJ2ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLm9uQmVjb21lT2JzZXJ2ZWRMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIHRoaXMub25CZWNvbWVPYnNlcnZlZExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikgeyByZXR1cm4gbGlzdGVuZXIoKTsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEF0b20ucHJvdG90eXBlLm9uQmVjb21lVW5vYnNlcnZlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMub25CZWNvbWVVbm9ic2VydmVkTGlzdGVuZXJzKSB7XG4gICAgICAgICAgICB0aGlzLm9uQmVjb21lVW5vYnNlcnZlZExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikgeyByZXR1cm4gbGlzdGVuZXIoKTsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEludm9rZSB0aGlzIG1ldGhvZCB0byBub3RpZnkgbW9ieCB0aGF0IHlvdXIgYXRvbSBoYXMgYmVlbiB1c2VkIHNvbWVob3cuXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZXJlIGlzIGN1cnJlbnRseSBhIHJlYWN0aXZlIGNvbnRleHQuXG4gICAgICovXG4gICAgQXRvbS5wcm90b3R5cGUucmVwb3J0T2JzZXJ2ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXBvcnRPYnNlcnZlZCh0aGlzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEludm9rZSB0aGlzIG1ldGhvZCBfYWZ0ZXJfIHRoaXMgbWV0aG9kIGhhcyBjaGFuZ2VkIHRvIHNpZ25hbCBtb2J4IHRoYXQgYWxsIGl0cyBvYnNlcnZlcnMgc2hvdWxkIGludmFsaWRhdGUuXG4gICAgICovXG4gICAgQXRvbS5wcm90b3R5cGUucmVwb3J0Q2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3RhcnRCYXRjaCgpO1xuICAgICAgICBwcm9wYWdhdGVDaGFuZ2VkKHRoaXMpO1xuICAgICAgICBlbmRCYXRjaCgpO1xuICAgIH07XG4gICAgQXRvbS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgfTtcbiAgICByZXR1cm4gQXRvbTtcbn0oKSk7XG52YXIgaXNBdG9tID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIkF0b21cIiwgQXRvbSk7XG5mdW5jdGlvbiBjcmVhdGVBdG9tKG5hbWUsIG9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyLCBvbkJlY29tZVVub2JzZXJ2ZWRIYW5kbGVyKSB7XG4gICAgaWYgKG9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyID09PSB2b2lkIDApIHsgb25CZWNvbWVPYnNlcnZlZEhhbmRsZXIgPSBub29wOyB9XG4gICAgaWYgKG9uQmVjb21lVW5vYnNlcnZlZEhhbmRsZXIgPT09IHZvaWQgMCkgeyBvbkJlY29tZVVub2JzZXJ2ZWRIYW5kbGVyID0gbm9vcDsgfVxuICAgIHZhciBhdG9tID0gbmV3IEF0b20obmFtZSk7XG4gICAgLy8gZGVmYXVsdCBgbm9vcGAgbGlzdGVuZXIgd2lsbCBub3QgaW5pdGlhbGl6ZSB0aGUgaG9vayBTZXRcbiAgICBpZiAob25CZWNvbWVPYnNlcnZlZEhhbmRsZXIgIT09IG5vb3ApIHtcbiAgICAgICAgb25CZWNvbWVPYnNlcnZlZChhdG9tLCBvbkJlY29tZU9ic2VydmVkSGFuZGxlcik7XG4gICAgfVxuICAgIGlmIChvbkJlY29tZVVub2JzZXJ2ZWRIYW5kbGVyICE9PSBub29wKSB7XG4gICAgICAgIG9uQmVjb21lVW5vYnNlcnZlZChhdG9tLCBvbkJlY29tZVVub2JzZXJ2ZWRIYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIGF0b207XG59XG5cbmZ1bmN0aW9uIGlkZW50aXR5Q29tcGFyZXIoYSwgYikge1xuICAgIHJldHVybiBhID09PSBiO1xufVxuZnVuY3Rpb24gc3RydWN0dXJhbENvbXBhcmVyKGEsIGIpIHtcbiAgICByZXR1cm4gZGVlcEVxdWFsKGEsIGIpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENvbXBhcmVyKGEsIGIpIHtcbiAgICByZXR1cm4gT2JqZWN0LmlzKGEsIGIpO1xufVxudmFyIGNvbXBhcmVyID0ge1xuICAgIGlkZW50aXR5OiBpZGVudGl0eUNvbXBhcmVyLFxuICAgIHN0cnVjdHVyYWw6IHN0cnVjdHVyYWxDb21wYXJlcixcbiAgICBkZWZhdWx0OiBkZWZhdWx0Q29tcGFyZXJcbn07XG5cbnZhciBtb2J4RGlkUnVuTGF6eUluaXRpYWxpemVyc1N5bWJvbCA9IFN5bWJvbChcIm1vYnggZGlkIHJ1biBsYXp5IGluaXRpYWxpemVyc1wiKTtcbnZhciBtb2J4UGVuZGluZ0RlY29yYXRvcnMgPSBTeW1ib2woXCJtb2J4IHBlbmRpbmcgZGVjb3JhdG9yc1wiKTtcbnZhciBlbnVtZXJhYmxlRGVzY3JpcHRvckNhY2hlID0ge307XG52YXIgbm9uRW51bWVyYWJsZURlc2NyaXB0b3JDYWNoZSA9IHt9O1xuZnVuY3Rpb24gY3JlYXRlUHJvcGVydHlJbml0aWFsaXplckRlc2NyaXB0b3IocHJvcCwgZW51bWVyYWJsZSkge1xuICAgIHZhciBjYWNoZSA9IGVudW1lcmFibGUgPyBlbnVtZXJhYmxlRGVzY3JpcHRvckNhY2hlIDogbm9uRW51bWVyYWJsZURlc2NyaXB0b3JDYWNoZTtcbiAgICByZXR1cm4gKGNhY2hlW3Byb3BdIHx8XG4gICAgICAgIChjYWNoZVtwcm9wXSA9IHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGVudW1lcmFibGUsXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpbml0aWFsaXplSW5zdGFuY2UodGhpcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbcHJvcF07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpbml0aWFsaXplSW5zdGFuY2UodGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpc1twcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG59XG5mdW5jdGlvbiBpbml0aWFsaXplSW5zdGFuY2UodGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldFttb2J4RGlkUnVuTGF6eUluaXRpYWxpemVyc1N5bWJvbF0gPT09IHRydWUpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgZGVjb3JhdG9ycyA9IHRhcmdldFttb2J4UGVuZGluZ0RlY29yYXRvcnNdO1xuICAgIGlmIChkZWNvcmF0b3JzKSB7XG4gICAgICAgIGFkZEhpZGRlblByb3AodGFyZ2V0LCBtb2J4RGlkUnVuTGF6eUluaXRpYWxpemVyc1N5bWJvbCwgdHJ1ZSk7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkZWNvcmF0b3JzKSB7XG4gICAgICAgICAgICB2YXIgZCA9IGRlY29yYXRvcnNba2V5XTtcbiAgICAgICAgICAgIGQucHJvcGVydHlDcmVhdG9yKHRhcmdldCwgZC5wcm9wLCBkLmRlc2NyaXB0b3IsIGQuZGVjb3JhdG9yVGFyZ2V0LCBkLmRlY29yYXRvckFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVQcm9wRGVjb3JhdG9yKHByb3BlcnR5SW5pdGlhbGx5RW51bWVyYWJsZSwgcHJvcGVydHlDcmVhdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRlY29yYXRvckZhY3RvcnkoKSB7XG4gICAgICAgIHZhciBkZWNvcmF0b3JBcmd1bWVudHM7XG4gICAgICAgIHZhciBkZWNvcmF0b3IgPSBmdW5jdGlvbiBkZWNvcmF0ZSh0YXJnZXQsIHByb3AsIGRlc2NyaXB0b3IsIGFwcGx5SW1tZWRpYXRlbHlcbiAgICAgICAgLy8gVGhpcyBpcyBhIHNwZWNpYWwgcGFyYW1ldGVyIHRvIHNpZ25hbCB0aGUgZGlyZWN0IGFwcGxpY2F0aW9uIG9mIGEgZGVjb3JhdG9yLCBhbGxvdyBleHRlbmRPYnNlcnZhYmxlIHRvIHNraXAgdGhlIGVudGlyZSB0eXBlIGRlY29yYXRpb24gcGFydCxcbiAgICAgICAgLy8gYXMgdGhlIGluc3RhbmNlIHRvIGFwcGx5IHRoZSBkZWNvcmF0b3IgdG8gZXF1YWxzIHRoZSB0YXJnZXRcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoYXBwbHlJbW1lZGlhdGVseSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHByb3BlcnR5Q3JlYXRvcih0YXJnZXQsIHByb3AsIGRlc2NyaXB0b3IsIHRhcmdldCwgZGVjb3JhdG9yQXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgIXF1YWNrc0xpa2VBRGVjb3JhdG9yKGFyZ3VtZW50cykpXG4gICAgICAgICAgICAgICAgZmFpbChcIlRoaXMgZnVuY3Rpb24gaXMgYSBkZWNvcmF0b3IsIGJ1dCBpdCB3YXNuJ3QgaW52b2tlZCBsaWtlIGEgZGVjb3JhdG9yXCIpO1xuICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBtb2J4UGVuZGluZ0RlY29yYXRvcnMpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluaGVyaXRlZERlY29yYXRvcnMgPSB0YXJnZXRbbW9ieFBlbmRpbmdEZWNvcmF0b3JzXTtcbiAgICAgICAgICAgICAgICBhZGRIaWRkZW5Qcm9wKHRhcmdldCwgbW9ieFBlbmRpbmdEZWNvcmF0b3JzLCBfX2Fzc2lnbih7fSwgaW5oZXJpdGVkRGVjb3JhdG9ycykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFyZ2V0W21vYnhQZW5kaW5nRGVjb3JhdG9yc11bcHJvcF0gPSB7XG4gICAgICAgICAgICAgICAgcHJvcDogcHJvcCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUNyZWF0b3I6IHByb3BlcnR5Q3JlYXRvcixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yLFxuICAgICAgICAgICAgICAgIGRlY29yYXRvclRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgICAgICAgIGRlY29yYXRvckFyZ3VtZW50czogZGVjb3JhdG9yQXJndW1lbnRzXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVByb3BlcnR5SW5pdGlhbGl6ZXJEZXNjcmlwdG9yKHByb3AsIHByb3BlcnR5SW5pdGlhbGx5RW51bWVyYWJsZSk7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChxdWFja3NMaWtlQURlY29yYXRvcihhcmd1bWVudHMpKSB7XG4gICAgICAgICAgICAvLyBAZGVjb3JhdG9yXG4gICAgICAgICAgICBkZWNvcmF0b3JBcmd1bWVudHMgPSBFTVBUWV9BUlJBWTtcbiAgICAgICAgICAgIHJldHVybiBkZWNvcmF0b3IuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEBkZWNvcmF0b3IoYXJncylcbiAgICAgICAgICAgIGRlY29yYXRvckFyZ3VtZW50cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICByZXR1cm4gZGVjb3JhdG9yO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHF1YWNrc0xpa2VBRGVjb3JhdG9yKGFyZ3MpIHtcbiAgICByZXR1cm4gKCgoYXJncy5sZW5ndGggPT09IDIgfHwgYXJncy5sZW5ndGggPT09IDMpICYmIHR5cGVvZiBhcmdzWzFdID09PSBcInN0cmluZ1wiKSB8fFxuICAgICAgICAoYXJncy5sZW5ndGggPT09IDQgJiYgYXJnc1szXSA9PT0gdHJ1ZSkpO1xufVxuXG5mdW5jdGlvbiBkZWVwRW5oYW5jZXIodiwgXywgbmFtZSkge1xuICAgIC8vIGl0IGlzIGFuIG9ic2VydmFibGUgYWxyZWFkeSwgZG9uZVxuICAgIGlmIChpc09ic2VydmFibGUodikpXG4gICAgICAgIHJldHVybiB2O1xuICAgIC8vIHNvbWV0aGluZyB0aGF0IGNhbiBiZSBjb252ZXJ0ZWQgYW5kIG11dGF0ZWQ/XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodikpXG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLmFycmF5KHYsIHsgbmFtZTogbmFtZSB9KTtcbiAgICBpZiAoaXNQbGFpbk9iamVjdCh2KSlcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUub2JqZWN0KHYsIHVuZGVmaW5lZCwgeyBuYW1lOiBuYW1lIH0pO1xuICAgIGlmIChpc0VTNk1hcCh2KSlcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUubWFwKHYsIHsgbmFtZTogbmFtZSB9KTtcbiAgICBpZiAoaXNFUzZTZXQodikpXG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnNldCh2LCB7IG5hbWU6IG5hbWUgfSk7XG4gICAgcmV0dXJuIHY7XG59XG5mdW5jdGlvbiBzaGFsbG93RW5oYW5jZXIodiwgXywgbmFtZSkge1xuICAgIGlmICh2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdCh2KSB8fCBpc09ic2VydmFibGVBcnJheSh2KSB8fCBpc09ic2VydmFibGVNYXAodikgfHwgaXNPYnNlcnZhYmxlU2V0KHYpKVxuICAgICAgICByZXR1cm4gdjtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSlcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuYXJyYXkodiwgeyBuYW1lOiBuYW1lLCBkZWVwOiBmYWxzZSB9KTtcbiAgICBpZiAoaXNQbGFpbk9iamVjdCh2KSlcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUub2JqZWN0KHYsIHVuZGVmaW5lZCwgeyBuYW1lOiBuYW1lLCBkZWVwOiBmYWxzZSB9KTtcbiAgICBpZiAoaXNFUzZNYXAodikpXG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLm1hcCh2LCB7IG5hbWU6IG5hbWUsIGRlZXA6IGZhbHNlIH0pO1xuICAgIGlmIChpc0VTNlNldCh2KSlcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc2V0KHYsIHsgbmFtZTogbmFtZSwgZGVlcDogZmFsc2UgfSk7XG4gICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgIFwiVGhlIHNoYWxsb3cgbW9kaWZpZXIgLyBkZWNvcmF0b3IgY2FuIG9ubHkgdXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIGFycmF5cywgb2JqZWN0cywgbWFwcyBhbmQgc2V0c1wiKTtcbn1cbmZ1bmN0aW9uIHJlZmVyZW5jZUVuaGFuY2VyKG5ld1ZhbHVlKSB7XG4gICAgLy8gbmV2ZXIgdHVybiBpbnRvIGFuIG9ic2VydmFibGVcbiAgICByZXR1cm4gbmV3VmFsdWU7XG59XG5mdW5jdGlvbiByZWZTdHJ1Y3RFbmhhbmNlcih2LCBvbGRWYWx1ZSwgbmFtZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgaXNPYnNlcnZhYmxlKHYpKVxuICAgICAgICB0aHJvdyBcIm9ic2VydmFibGUuc3RydWN0IHNob3VsZCBub3QgYmUgdXNlZCB3aXRoIG9ic2VydmFibGUgdmFsdWVzXCI7XG4gICAgaWYgKGRlZXBFcXVhbCh2LCBvbGRWYWx1ZSkpXG4gICAgICAgIHJldHVybiBvbGRWYWx1ZTtcbiAgICByZXR1cm4gdjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjb3JhdG9yRm9yRW5oYW5jZXIoZW5oYW5jZXIpIHtcbiAgICBpbnZhcmlhbnQoZW5oYW5jZXIpO1xuICAgIHZhciBkZWNvcmF0b3IgPSBjcmVhdGVQcm9wRGVjb3JhdG9yKHRydWUsIGZ1bmN0aW9uICh0YXJnZXQsIHByb3BlcnR5TmFtZSwgZGVzY3JpcHRvciwgX2RlY29yYXRvclRhcmdldCwgZGVjb3JhdG9yQXJncykge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBpbnZhcmlhbnQoIWRlc2NyaXB0b3IgfHwgIWRlc2NyaXB0b3IuZ2V0LCBcIkBvYnNlcnZhYmxlIGNhbm5vdCBiZSB1c2VkIG9uIGdldHRlciAocHJvcGVydHkgXFxcIlwiICsgc3RyaW5naWZ5S2V5KHByb3BlcnR5TmFtZSkgKyBcIlxcXCIpLCB1c2UgQGNvbXB1dGVkIGluc3RlYWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbml0aWFsVmFsdWUgPSBkZXNjcmlwdG9yXG4gICAgICAgICAgICA/IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXJcbiAgICAgICAgICAgICAgICA/IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIuY2FsbCh0YXJnZXQpXG4gICAgICAgICAgICAgICAgOiBkZXNjcmlwdG9yLnZhbHVlXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgYXNPYnNlcnZhYmxlT2JqZWN0KHRhcmdldCkuYWRkT2JzZXJ2YWJsZVByb3AocHJvcGVydHlOYW1lLCBpbml0aWFsVmFsdWUsIGVuaGFuY2VyKTtcbiAgICB9KTtcbiAgICB2YXIgcmVzID0gXG4gICAgLy8gRXh0cmEgcHJvY2VzcyBjaGVja3MsIGFzIHRoaXMgaGFwcGVucyBkdXJpbmcgbW9kdWxlIGluaXRpYWxpemF0aW9uXG4gICAgdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiXG4gICAgICAgID8gZnVuY3Rpb24gb2JzZXJ2YWJsZURlY29yYXRvcigpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgd3JhcHBlciBmdW5jdGlvbiBpcyBqdXN0IHRvIGRldGVjdCBpbGxlZ2FsIGRlY29yYXRvciBpbnZvY2F0aW9ucywgZGVwcmVjYXRlIGluIGEgbmV4dCB2ZXJzaW9uXG4gICAgICAgICAgICAvLyBhbmQgc2ltcGx5IHJldHVybiB0aGUgY3JlYXRlZCBwcm9wIGRlY29yYXRvclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWlsKFwiSW5jb3JyZWN0IGRlY29yYXRvciBpbnZvY2F0aW9uLiBAb2JzZXJ2YWJsZSBkZWNvcmF0b3IgZG9lc24ndCBleHBlY3QgYW55IGFyZ3VtZW50c1wiKTtcbiAgICAgICAgICAgIHJldHVybiBkZWNvcmF0b3IuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICA6IGRlY29yYXRvcjtcbiAgICByZXMuZW5oYW5jZXIgPSBlbmhhbmNlcjtcbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBQcmVkZWZpbmVkIGJhZ3Mgb2YgY3JlYXRlIG9ic2VydmFibGUgb3B0aW9ucywgdG8gYXZvaWQgYWxsb2NhdGluZyB0ZW1wb3JhcmlseSBvcHRpb24gb2JqZWN0c1xuLy8gaW4gdGhlIG1ham9yaXR5IG9mIGNhc2VzXG52YXIgZGVmYXVsdENyZWF0ZU9ic2VydmFibGVPcHRpb25zID0ge1xuICAgIGRlZXA6IHRydWUsXG4gICAgbmFtZTogdW5kZWZpbmVkLFxuICAgIGRlZmF1bHREZWNvcmF0b3I6IHVuZGVmaW5lZCxcbiAgICBwcm94eTogdHJ1ZVxufTtcbk9iamVjdC5mcmVlemUoZGVmYXVsdENyZWF0ZU9ic2VydmFibGVPcHRpb25zKTtcbmZ1bmN0aW9uIGFzc2VydFZhbGlkT3B0aW9uKGtleSkge1xuICAgIGlmICghL14oZGVlcHxuYW1lfGVxdWFsc3xkZWZhdWx0RGVjb3JhdG9yfHByb3h5KSQvLnRlc3Qoa2V5KSlcbiAgICAgICAgZmFpbChcImludmFsaWQgb3B0aW9uIGZvciAoZXh0ZW5kKW9ic2VydmFibGU6IFwiICsga2V5KTtcbn1cbmZ1bmN0aW9uIGFzQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnModGhpbmcpIHtcbiAgICBpZiAodGhpbmcgPT09IG51bGwgfHwgdGhpbmcgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucztcbiAgICBpZiAodHlwZW9mIHRoaW5nID09PSBcInN0cmluZ1wiKVxuICAgICAgICByZXR1cm4geyBuYW1lOiB0aGluZywgZGVlcDogdHJ1ZSwgcHJveHk6IHRydWUgfTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpbmcgIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICByZXR1cm4gZmFpbChcImV4cGVjdGVkIG9wdGlvbnMgb2JqZWN0XCIpO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGluZykuZm9yRWFjaChhc3NlcnRWYWxpZE9wdGlvbik7XG4gICAgfVxuICAgIHJldHVybiB0aGluZztcbn1cbnZhciBkZWVwRGVjb3JhdG9yID0gY3JlYXRlRGVjb3JhdG9yRm9yRW5oYW5jZXIoZGVlcEVuaGFuY2VyKTtcbnZhciBzaGFsbG93RGVjb3JhdG9yID0gY3JlYXRlRGVjb3JhdG9yRm9yRW5oYW5jZXIoc2hhbGxvd0VuaGFuY2VyKTtcbnZhciByZWZEZWNvcmF0b3IgPSBjcmVhdGVEZWNvcmF0b3JGb3JFbmhhbmNlcihyZWZlcmVuY2VFbmhhbmNlcik7XG52YXIgcmVmU3RydWN0RGVjb3JhdG9yID0gY3JlYXRlRGVjb3JhdG9yRm9yRW5oYW5jZXIocmVmU3RydWN0RW5oYW5jZXIpO1xuZnVuY3Rpb24gZ2V0RW5oYW5jZXJGcm9tT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuZGVmYXVsdERlY29yYXRvclxuICAgICAgICA/IG9wdGlvbnMuZGVmYXVsdERlY29yYXRvci5lbmhhbmNlclxuICAgICAgICA6IG9wdGlvbnMuZGVlcCA9PT0gZmFsc2VcbiAgICAgICAgICAgID8gcmVmZXJlbmNlRW5oYW5jZXJcbiAgICAgICAgICAgIDogZGVlcEVuaGFuY2VyO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3QsIGFycmF5IG9yIGZ1bmN0aW9uIGludG8gYSByZWFjdGl2ZSBzdHJ1Y3R1cmUuXG4gKiBAcGFyYW0gdiB0aGUgdmFsdWUgd2hpY2ggc2hvdWxkIGJlY29tZSBvYnNlcnZhYmxlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVPYnNlcnZhYmxlKHYsIGFyZzIsIGFyZzMpIHtcbiAgICAvLyBAb2JzZXJ2YWJsZSBzb21lUHJvcDtcbiAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZGVlcERlY29yYXRvci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICAvLyBpdCBpcyBhbiBvYnNlcnZhYmxlIGFscmVhZHksIGRvbmVcbiAgICBpZiAoaXNPYnNlcnZhYmxlKHYpKVxuICAgICAgICByZXR1cm4gdjtcbiAgICAvLyBzb21ldGhpbmcgdGhhdCBjYW4gYmUgY29udmVydGVkIGFuZCBtdXRhdGVkP1xuICAgIHZhciByZXMgPSBpc1BsYWluT2JqZWN0KHYpXG4gICAgICAgID8gb2JzZXJ2YWJsZS5vYmplY3QodiwgYXJnMiwgYXJnMylcbiAgICAgICAgOiBBcnJheS5pc0FycmF5KHYpXG4gICAgICAgICAgICA/IG9ic2VydmFibGUuYXJyYXkodiwgYXJnMilcbiAgICAgICAgICAgIDogaXNFUzZNYXAodilcbiAgICAgICAgICAgICAgICA/IG9ic2VydmFibGUubWFwKHYsIGFyZzIpXG4gICAgICAgICAgICAgICAgOiBpc0VTNlNldCh2KVxuICAgICAgICAgICAgICAgICAgICA/IG9ic2VydmFibGUuc2V0KHYsIGFyZzIpXG4gICAgICAgICAgICAgICAgICAgIDogdjtcbiAgICAvLyB0aGlzIHZhbHVlIGNvdWxkIGJlIGNvbnZlcnRlZCB0byBhIG5ldyBvYnNlcnZhYmxlIGRhdGEgc3RydWN0dXJlLCByZXR1cm4gaXRcbiAgICBpZiAocmVzICE9PSB2KVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIC8vIG90aGVyd2lzZSwganVzdCBib3ggaXRcbiAgICBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICBcIlRoZSBwcm92aWRlZCB2YWx1ZSBjb3VsZCBub3QgYmUgY29udmVydGVkIGludG8gYW4gb2JzZXJ2YWJsZS4gSWYgeW91IHdhbnQganVzdCBjcmVhdGUgYW4gb2JzZXJ2YWJsZSByZWZlcmVuY2UgdG8gdGhlIG9iamVjdCB1c2UgJ29ic2VydmFibGUuYm94KHZhbHVlKSdcIik7XG59XG52YXIgb2JzZXJ2YWJsZUZhY3RvcmllcyA9IHtcbiAgICBib3g6IGZ1bmN0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpXG4gICAgICAgICAgICBpbmNvcnJlY3RseVVzZWRBc0RlY29yYXRvcihcImJveFwiKTtcbiAgICAgICAgdmFyIG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGVWYWx1ZSh2YWx1ZSwgZ2V0RW5oYW5jZXJGcm9tT3B0aW9ucyhvKSwgby5uYW1lLCB0cnVlLCBvLmVxdWFscyk7XG4gICAgfSxcbiAgICBhcnJheTogZnVuY3Rpb24gKGluaXRpYWxWYWx1ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKVxuICAgICAgICAgICAgaW5jb3JyZWN0bHlVc2VkQXNEZWNvcmF0b3IoXCJhcnJheVwiKTtcbiAgICAgICAgdmFyIG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gY3JlYXRlT2JzZXJ2YWJsZUFycmF5KGluaXRpYWxWYWx1ZXMsIGdldEVuaGFuY2VyRnJvbU9wdGlvbnMobyksIG8ubmFtZSk7XG4gICAgfSxcbiAgICBtYXA6IGZ1bmN0aW9uIChpbml0aWFsVmFsdWVzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMilcbiAgICAgICAgICAgIGluY29ycmVjdGx5VXNlZEFzRGVjb3JhdG9yKFwibWFwXCIpO1xuICAgICAgICB2YXIgbyA9IGFzQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZU1hcChpbml0aWFsVmFsdWVzLCBnZXRFbmhhbmNlckZyb21PcHRpb25zKG8pLCBvLm5hbWUpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlcywgb3B0aW9ucykge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpXG4gICAgICAgICAgICBpbmNvcnJlY3RseVVzZWRBc0RlY29yYXRvcihcInNldFwiKTtcbiAgICAgICAgdmFyIG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGVTZXQoaW5pdGlhbFZhbHVlcywgZ2V0RW5oYW5jZXJGcm9tT3B0aW9ucyhvKSwgby5uYW1lKTtcbiAgICB9LFxuICAgIG9iamVjdDogZnVuY3Rpb24gKHByb3BzLCBkZWNvcmF0b3JzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzFdID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgaW5jb3JyZWN0bHlVc2VkQXNEZWNvcmF0b3IoXCJvYmplY3RcIik7XG4gICAgICAgIHZhciBvID0gYXNDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgaWYgKG8ucHJveHkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZXh0ZW5kT2JzZXJ2YWJsZSh7fSwgcHJvcHMsIGRlY29yYXRvcnMsIG8pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGRlZmF1bHREZWNvcmF0b3IgPSBnZXREZWZhdWx0RGVjb3JhdG9yRnJvbU9iamVjdE9wdGlvbnMobyk7XG4gICAgICAgICAgICB2YXIgYmFzZSA9IGV4dGVuZE9ic2VydmFibGUoe30sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvKTtcbiAgICAgICAgICAgIHZhciBwcm94eSA9IGNyZWF0ZUR5bmFtaWNPYnNlcnZhYmxlT2JqZWN0KGJhc2UpO1xuICAgICAgICAgICAgZXh0ZW5kT2JzZXJ2YWJsZU9iamVjdFdpdGhQcm9wZXJ0aWVzKHByb3h5LCBwcm9wcywgZGVjb3JhdG9ycywgZGVmYXVsdERlY29yYXRvcik7XG4gICAgICAgICAgICByZXR1cm4gcHJveHk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlZjogcmVmRGVjb3JhdG9yLFxuICAgIHNoYWxsb3c6IHNoYWxsb3dEZWNvcmF0b3IsXG4gICAgZGVlcDogZGVlcERlY29yYXRvcixcbiAgICBzdHJ1Y3Q6IHJlZlN0cnVjdERlY29yYXRvclxufTtcbnZhciBvYnNlcnZhYmxlID0gY3JlYXRlT2JzZXJ2YWJsZTtcbi8vIHdlaXJkIHRyaWNrIHRvIGtlZXAgb3VyIHR5cGluZ3MgbmljZWx5IHdpdGggb3VyIGZ1bmNzLCBhbmQgc3RpbGwgZXh0ZW5kIHRoZSBvYnNlcnZhYmxlIGZ1bmN0aW9uXG5PYmplY3Qua2V5cyhvYnNlcnZhYmxlRmFjdG9yaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAob2JzZXJ2YWJsZVtuYW1lXSA9IG9ic2VydmFibGVGYWN0b3JpZXNbbmFtZV0pOyB9KTtcbmZ1bmN0aW9uIGluY29ycmVjdGx5VXNlZEFzRGVjb3JhdG9yKG1ldGhvZE5hbWUpIHtcbiAgICBmYWlsKFxuICAgIC8vIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgIFwiRXhwZWN0ZWQgb25lIG9yIHR3byBhcmd1bWVudHMgdG8gb2JzZXJ2YWJsZS5cIiArIG1ldGhvZE5hbWUgKyBcIi4gRGlkIHlvdSBhY2NpZGVudGFsbHkgdHJ5IHRvIHVzZSBvYnNlcnZhYmxlLlwiICsgbWV0aG9kTmFtZSArIFwiIGFzIGRlY29yYXRvcj9cIik7XG59XG5cbnZhciBjb21wdXRlZERlY29yYXRvciA9IGNyZWF0ZVByb3BEZWNvcmF0b3IoZmFsc2UsIGZ1bmN0aW9uIChpbnN0YW5jZSwgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yLCBkZWNvcmF0b3JUYXJnZXQsIGRlY29yYXRvckFyZ3MpIHtcbiAgICB2YXIgZ2V0ID0gZGVzY3JpcHRvci5nZXQsIHNldCA9IGRlc2NyaXB0b3Iuc2V0OyAvLyBpbml0aWFsVmFsdWUgaXMgdGhlIGRlc2NyaXB0b3IgZm9yIGdldCAvIHNldCBwcm9wc1xuICAgIC8vIE9wdGltaXphdGlvbjogZmFzdGVyIG9uIGRlY29yYXRvciB0YXJnZXQgb3IgaW5zdGFuY2U/IEFzc3VtaW5nIHRhcmdldFxuICAgIC8vIE9wdGltaXphdGlvbjogZmluZCBvdXQgaWYgZGVjbGFyaW5nIG9uIGluc3RhbmNlIGlzbid0IGp1c3QgZmFzdGVyLiAoYWxzbyBtYWtlcyB0aGUgcHJvcGVydHkgZGVzY3JpcHRvciBzaW1wbGVyKS4gQnV0LCBtb3JlIG1lbW9yeSB1c2FnZS4uXG4gICAgLy8gRm9yY2luZyBpbnN0YW5jZSBub3csIGZpeGVzIGhvdCByZWxvYWRpZyBpc3N1ZXMgb24gUmVhY3QgTmF0aXZlOlxuICAgIHZhciBvcHRpb25zID0gZGVjb3JhdG9yQXJnc1swXSB8fCB7fTtcbiAgICBhc09ic2VydmFibGVPYmplY3QoaW5zdGFuY2UpLmFkZENvbXB1dGVkUHJvcChpbnN0YW5jZSwgcHJvcGVydHlOYW1lLCBfX2Fzc2lnbih7IGdldDogZ2V0LFxuICAgICAgICBzZXQ6IHNldCwgY29udGV4dDogaW5zdGFuY2UgfSwgb3B0aW9ucykpO1xufSk7XG52YXIgY29tcHV0ZWRTdHJ1Y3REZWNvcmF0b3IgPSBjb21wdXRlZERlY29yYXRvcih7IGVxdWFsczogY29tcGFyZXIuc3RydWN0dXJhbCB9KTtcbi8qKlxuICogRGVjb3JhdG9yIGZvciBjbGFzcyBwcm9wZXJ0aWVzOiBAY29tcHV0ZWQgZ2V0IHZhbHVlKCkgeyByZXR1cm4gZXhwcjsgfS5cbiAqIEZvciBsZWdhY3kgcHVycG9zZXMgYWxzbyBpbnZva2FibGUgYXMgRVM1IG9ic2VydmFibGUgY3JlYXRlZDogYGNvbXB1dGVkKCgpID0+IGV4cHIpYDtcbiAqL1xudmFyIGNvbXB1dGVkID0gZnVuY3Rpb24gY29tcHV0ZWQoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIGlmICh0eXBlb2YgYXJnMiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAvLyBAY29tcHV0ZWRcbiAgICAgICAgcmV0dXJuIGNvbXB1dGVkRGVjb3JhdG9yLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIGlmIChhcmcxICE9PSBudWxsICYmIHR5cGVvZiBhcmcxID09PSBcIm9iamVjdFwiICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgLy8gQGNvbXB1dGVkKHsgb3B0aW9ucyB9KVxuICAgICAgICByZXR1cm4gY29tcHV0ZWREZWNvcmF0b3IuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgLy8gY29tcHV0ZWQoZXhwciwgb3B0aW9ucz8pXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpbnZhcmlhbnQodHlwZW9mIGFyZzEgPT09IFwiZnVuY3Rpb25cIiwgXCJGaXJzdCBhcmd1bWVudCB0byBgY29tcHV0ZWRgIHNob3VsZCBiZSBhbiBleHByZXNzaW9uLlwiKTtcbiAgICAgICAgaW52YXJpYW50KGFyZ3VtZW50cy5sZW5ndGggPCAzLCBcIkNvbXB1dGVkIHRha2VzIG9uZSBvciB0d28gYXJndW1lbnRzIGlmIHVzZWQgYXMgZnVuY3Rpb25cIik7XG4gICAgfVxuICAgIHZhciBvcHRzID0gdHlwZW9mIGFyZzIgPT09IFwib2JqZWN0XCIgPyBhcmcyIDoge307XG4gICAgb3B0cy5nZXQgPSBhcmcxO1xuICAgIG9wdHMuc2V0ID0gdHlwZW9mIGFyZzIgPT09IFwiZnVuY3Rpb25cIiA/IGFyZzIgOiBvcHRzLnNldDtcbiAgICBvcHRzLm5hbWUgPSBvcHRzLm5hbWUgfHwgYXJnMS5uYW1lIHx8IFwiXCI7IC8qIGZvciBnZW5lcmF0ZWQgbmFtZSAqL1xuICAgIHJldHVybiBuZXcgQ29tcHV0ZWRWYWx1ZShvcHRzKTtcbn07XG5jb21wdXRlZC5zdHJ1Y3QgPSBjb21wdXRlZFN0cnVjdERlY29yYXRvcjtcblxudmFyIElEZXJpdmF0aW9uU3RhdGU7XG4oZnVuY3Rpb24gKElEZXJpdmF0aW9uU3RhdGUpIHtcbiAgICAvLyBiZWZvcmUgYmVpbmcgcnVuIG9yIChvdXRzaWRlIGJhdGNoIGFuZCBub3QgYmVpbmcgb2JzZXJ2ZWQpXG4gICAgLy8gYXQgdGhpcyBwb2ludCBkZXJpdmF0aW9uIGlzIG5vdCBob2xkaW5nIGFueSBkYXRhIGFib3V0IGRlcGVuZGVuY3kgdHJlZVxuICAgIElEZXJpdmF0aW9uU3RhdGVbSURlcml2YXRpb25TdGF0ZVtcIk5PVF9UUkFDS0lOR1wiXSA9IC0xXSA9IFwiTk9UX1RSQUNLSU5HXCI7XG4gICAgLy8gbm8gc2hhbGxvdyBkZXBlbmRlbmN5IGNoYW5nZWQgc2luY2UgbGFzdCBjb21wdXRhdGlvblxuICAgIC8vIHdvbid0IHJlY2FsY3VsYXRlIGRlcml2YXRpb25cbiAgICAvLyB0aGlzIGlzIHdoYXQgbWFrZXMgbW9ieCBmYXN0XG4gICAgSURlcml2YXRpb25TdGF0ZVtJRGVyaXZhdGlvblN0YXRlW1wiVVBfVE9fREFURVwiXSA9IDBdID0gXCJVUF9UT19EQVRFXCI7XG4gICAgLy8gc29tZSBkZWVwIGRlcGVuZGVuY3kgY2hhbmdlZCwgYnV0IGRvbid0IGtub3cgaWYgc2hhbGxvdyBkZXBlbmRlbmN5IGNoYW5nZWRcbiAgICAvLyB3aWxsIHJlcXVpcmUgdG8gY2hlY2sgZmlyc3QgaWYgVVBfVE9fREFURSBvciBQT1NTSUJMWV9TVEFMRVxuICAgIC8vIGN1cnJlbnRseSBvbmx5IENvbXB1dGVkVmFsdWUgd2lsbCBwcm9wYWdhdGUgUE9TU0lCTFlfU1RBTEVcbiAgICAvL1xuICAgIC8vIGhhdmluZyB0aGlzIHN0YXRlIGlzIHNlY29uZCBiaWcgb3B0aW1pemF0aW9uOlxuICAgIC8vIGRvbid0IGhhdmUgdG8gcmVjb21wdXRlIG9uIGV2ZXJ5IGRlcGVuZGVuY3kgY2hhbmdlLCBidXQgb25seSB3aGVuIGl0J3MgbmVlZGVkXG4gICAgSURlcml2YXRpb25TdGF0ZVtJRGVyaXZhdGlvblN0YXRlW1wiUE9TU0lCTFlfU1RBTEVcIl0gPSAxXSA9IFwiUE9TU0lCTFlfU1RBTEVcIjtcbiAgICAvLyBBIHNoYWxsb3cgZGVwZW5kZW5jeSBoYXMgY2hhbmdlZCBzaW5jZSBsYXN0IGNvbXB1dGF0aW9uIGFuZCB0aGUgZGVyaXZhdGlvblxuICAgIC8vIHdpbGwgbmVlZCB0byByZWNvbXB1dGUgd2hlbiBpdCdzIG5lZWRlZCBuZXh0LlxuICAgIElEZXJpdmF0aW9uU3RhdGVbSURlcml2YXRpb25TdGF0ZVtcIlNUQUxFXCJdID0gMl0gPSBcIlNUQUxFXCI7XG59KShJRGVyaXZhdGlvblN0YXRlIHx8IChJRGVyaXZhdGlvblN0YXRlID0ge30pKTtcbnZhciBUcmFjZU1vZGU7XG4oZnVuY3Rpb24gKFRyYWNlTW9kZSkge1xuICAgIFRyYWNlTW9kZVtUcmFjZU1vZGVbXCJOT05FXCJdID0gMF0gPSBcIk5PTkVcIjtcbiAgICBUcmFjZU1vZGVbVHJhY2VNb2RlW1wiTE9HXCJdID0gMV0gPSBcIkxPR1wiO1xuICAgIFRyYWNlTW9kZVtUcmFjZU1vZGVbXCJCUkVBS1wiXSA9IDJdID0gXCJCUkVBS1wiO1xufSkoVHJhY2VNb2RlIHx8IChUcmFjZU1vZGUgPSB7fSkpO1xudmFyIENhdWdodEV4Y2VwdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDYXVnaHRFeGNlcHRpb24oY2F1c2UpIHtcbiAgICAgICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgICAgICAvLyBFbXB0eVxuICAgIH1cbiAgICByZXR1cm4gQ2F1Z2h0RXhjZXB0aW9uO1xufSgpKTtcbmZ1bmN0aW9uIGlzQ2F1Z2h0RXhjZXB0aW9uKGUpIHtcbiAgICByZXR1cm4gZSBpbnN0YW5jZW9mIENhdWdodEV4Y2VwdGlvbjtcbn1cbi8qKlxuICogRmluZHMgb3V0IHdoZXRoZXIgYW55IGRlcGVuZGVuY3kgb2YgdGhlIGRlcml2YXRpb24gaGFzIGFjdHVhbGx5IGNoYW5nZWQuXG4gKiBJZiBkZXBlbmRlbmNpZXNTdGF0ZSBpcyAxIHRoZW4gaXQgd2lsbCByZWNhbGN1bGF0ZSBkZXBlbmRlbmNpZXMsXG4gKiBpZiBhbnkgZGVwZW5kZW5jeSBjaGFuZ2VkIGl0IHdpbGwgcHJvcGFnYXRlIGl0IGJ5IGNoYW5naW5nIGRlcGVuZGVuY2llc1N0YXRlIHRvIDIuXG4gKlxuICogQnkgaXRlcmF0aW5nIG92ZXIgdGhlIGRlcGVuZGVuY2llcyBpbiB0aGUgc2FtZSBvcmRlciB0aGF0IHRoZXkgd2VyZSByZXBvcnRlZCBhbmRcbiAqIHN0b3BwaW5nIG9uIHRoZSBmaXJzdCBjaGFuZ2UsIGFsbCB0aGUgcmVjYWxjdWxhdGlvbnMgYXJlIG9ubHkgY2FsbGVkIGZvciBDb21wdXRlZFZhbHVlc1xuICogdGhhdCB3aWxsIGJlIHRyYWNrZWQgYnkgZGVyaXZhdGlvbi4gVGhhdCBpcyBiZWNhdXNlIHdlIGFzc3VtZSB0aGF0IGlmIHRoZSBmaXJzdCB4XG4gKiBkZXBlbmRlbmNpZXMgb2YgdGhlIGRlcml2YXRpb24gZG9lc24ndCBjaGFuZ2UgdGhlbiB0aGUgZGVyaXZhdGlvbiBzaG91bGQgcnVuIHRoZSBzYW1lIHdheVxuICogdXAgdW50aWwgYWNjZXNzaW5nIHgtdGggZGVwZW5kZW5jeS5cbiAqL1xuZnVuY3Rpb24gc2hvdWxkQ29tcHV0ZShkZXJpdmF0aW9uKSB7XG4gICAgc3dpdGNoIChkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlKSB7XG4gICAgICAgIGNhc2UgSURlcml2YXRpb25TdGF0ZS5VUF9UT19EQVRFOlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjYXNlIElEZXJpdmF0aW9uU3RhdGUuTk9UX1RSQUNLSU5HOlxuICAgICAgICBjYXNlIElEZXJpdmF0aW9uU3RhdGUuU1RBTEU6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgY2FzZSBJRGVyaXZhdGlvblN0YXRlLlBPU1NJQkxZX1NUQUxFOiB7XG4gICAgICAgICAgICB2YXIgcHJldlVudHJhY2tlZCA9IHVudHJhY2tlZFN0YXJ0KCk7IC8vIG5vIG5lZWQgZm9yIHRob3NlIGNvbXB1dGVkcyB0byBiZSByZXBvcnRlZCwgdGhleSB3aWxsIGJlIHBpY2tlZCB1cCBpbiB0cmFja0Rlcml2ZWRGdW5jdGlvbi5cbiAgICAgICAgICAgIHZhciBvYnMgPSBkZXJpdmF0aW9uLm9ic2VydmluZywgbCA9IG9icy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBvYmogPSBvYnNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGlzQ29tcHV0ZWRWYWx1ZShvYmopKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnbG9iYWxTdGF0ZS5kaXNhYmxlRXJyb3JCb3VuZGFyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgYXJlIG5vdCBpbnRlcmVzdGVkIGluIHRoZSB2YWx1ZSAqb3IqIGV4Y2VwdGlvbiBhdCB0aGlzIG1vbWVudCwgYnV0IGlmIHRoZXJlIGlzIG9uZSwgbm90aWZ5IGFsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVudHJhY2tlZEVuZChwcmV2VW50cmFja2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBDb21wdXRlZFZhbHVlIGBvYmpgIGFjdHVhbGx5IGNoYW5nZWQgaXQgd2lsbCBiZSBjb21wdXRlZCBhbmQgcHJvcGFnYXRlZCB0byBpdHMgb2JzZXJ2ZXJzLlxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgYGRlcml2YXRpb25gIGlzIGFuIG9ic2VydmVyIG9mIGBvYmpgXG4gICAgICAgICAgICAgICAgICAgIC8vIGludmFyaWFudFNob3VsZENvbXB1dGUoZGVyaXZhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGUgPT09IElEZXJpdmF0aW9uU3RhdGUuU1RBTEUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVudHJhY2tlZEVuZChwcmV2VW50cmFja2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hhbmdlRGVwZW5kZW5jaWVzU3RhdGVUbzAoZGVyaXZhdGlvbik7XG4gICAgICAgICAgICB1bnRyYWNrZWRFbmQocHJldlVudHJhY2tlZCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBmdW5jdGlvbiBpbnZhcmlhbnRTaG91bGRDb21wdXRlKGRlcml2YXRpb246IElEZXJpdmF0aW9uKSB7XG4vLyAgICAgY29uc3QgbmV3RGVwU3RhdGUgPSAoZGVyaXZhdGlvbiBhcyBhbnkpLmRlcGVuZGVuY2llc1N0YXRlXG4vLyAgICAgaWYgKFxuLy8gICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgJiZcbi8vICAgICAgICAgKG5ld0RlcFN0YXRlID09PSBJRGVyaXZhdGlvblN0YXRlLlBPU1NJQkxZX1NUQUxFIHx8XG4vLyAgICAgICAgICAgICBuZXdEZXBTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5OT1RfVFJBQ0tJTkcpXG4vLyAgICAgKVxuLy8gICAgICAgICBmYWlsKFwiSWxsZWdhbCBkZXBlbmRlbmN5IHN0YXRlXCIpXG4vLyB9XG5mdW5jdGlvbiBpc0NvbXB1dGluZ0Rlcml2YXRpb24oKSB7XG4gICAgcmV0dXJuIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiAhPT0gbnVsbDsgLy8gZmlsdGVyIG91dCBhY3Rpb25zIGluc2lkZSBjb21wdXRhdGlvbnNcbn1cbmZ1bmN0aW9uIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkKGF0b20pIHtcbiAgICB2YXIgaGFzT2JzZXJ2ZXJzID0gYXRvbS5vYnNlcnZlcnMuc2l6ZSA+IDA7XG4gICAgLy8gU2hvdWxkIG5ldmVyIGJlIHBvc3NpYmxlIHRvIGNoYW5nZSBhbiBvYnNlcnZlZCBvYnNlcnZhYmxlIGZyb20gaW5zaWRlIGNvbXB1dGVkLCBzZWUgIzc5OFxuICAgIGlmIChnbG9iYWxTdGF0ZS5jb21wdXRhdGlvbkRlcHRoID4gMCAmJiBoYXNPYnNlcnZlcnMpXG4gICAgICAgIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICAgICBcIkNvbXB1dGVkIHZhbHVlcyBhcmUgbm90IGFsbG93ZWQgdG8gY2F1c2Ugc2lkZSBlZmZlY3RzIGJ5IGNoYW5naW5nIG9ic2VydmFibGVzIHRoYXQgYXJlIGFscmVhZHkgYmVpbmcgb2JzZXJ2ZWQuIFRyaWVkIHRvIG1vZGlmeTogXCIgKyBhdG9tLm5hbWUpO1xuICAgIC8vIFNob3VsZCBub3QgYmUgcG9zc2libGUgdG8gY2hhbmdlIG9ic2VydmVkIHN0YXRlIG91dHNpZGUgc3RyaWN0IG1vZGUsIGV4Y2VwdCBkdXJpbmcgaW5pdGlhbGl6YXRpb24sIHNlZSAjNTYzXG4gICAgaWYgKCFnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlQ2hhbmdlcyAmJiAoaGFzT2JzZXJ2ZXJzIHx8IGdsb2JhbFN0YXRlLmVuZm9yY2VBY3Rpb25zID09PSBcInN0cmljdFwiKSlcbiAgICAgICAgZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgICAgIChnbG9iYWxTdGF0ZS5lbmZvcmNlQWN0aW9uc1xuICAgICAgICAgICAgICAgID8gXCJTaW5jZSBzdHJpY3QtbW9kZSBpcyBlbmFibGVkLCBjaGFuZ2luZyBvYnNlcnZlZCBvYnNlcnZhYmxlIHZhbHVlcyBvdXRzaWRlIGFjdGlvbnMgaXMgbm90IGFsbG93ZWQuIFBsZWFzZSB3cmFwIHRoZSBjb2RlIGluIGFuIGBhY3Rpb25gIGlmIHRoaXMgY2hhbmdlIGlzIGludGVuZGVkLiBUcmllZCB0byBtb2RpZnk6IFwiXG4gICAgICAgICAgICAgICAgOiBcIlNpZGUgZWZmZWN0cyBsaWtlIGNoYW5naW5nIHN0YXRlIGFyZSBub3QgYWxsb3dlZCBhdCB0aGlzIHBvaW50LiBBcmUgeW91IHRyeWluZyB0byBtb2RpZnkgc3RhdGUgZnJvbSwgZm9yIGV4YW1wbGUsIHRoZSByZW5kZXIgZnVuY3Rpb24gb2YgYSBSZWFjdCBjb21wb25lbnQ/IFRyaWVkIHRvIG1vZGlmeTogXCIpICtcbiAgICAgICAgICAgICAgICBhdG9tLm5hbWUpO1xufVxuZnVuY3Rpb24gY2hlY2tJZlN0YXRlUmVhZHNBcmVBbGxvd2VkKG9ic2VydmFibGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICFnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlUmVhZHMgJiZcbiAgICAgICAgZ2xvYmFsU3RhdGUub2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb24pIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiW21vYnhdIE9ic2VydmFibGUgXCIgKyBvYnNlcnZhYmxlLm5hbWUgKyBcIiBiZWluZyByZWFkIG91dHNpZGUgYSByZWFjdGl2ZSBjb250ZXh0XCIpO1xuICAgIH1cbn1cbi8qKlxuICogRXhlY3V0ZXMgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIGBmYCBhbmQgdHJhY2tzIHdoaWNoIG9ic2VydmFibGVzIGFyZSBiZWluZyBhY2Nlc3NlZC5cbiAqIFRoZSB0cmFja2luZyBpbmZvcm1hdGlvbiBpcyBzdG9yZWQgb24gdGhlIGBkZXJpdmF0aW9uYCBvYmplY3QgYW5kIHRoZSBkZXJpdmF0aW9uIGlzIHJlZ2lzdGVyZWRcbiAqIGFzIG9ic2VydmVyIG9mIGFueSBvZiB0aGUgYWNjZXNzZWQgb2JzZXJ2YWJsZXMuXG4gKi9cbmZ1bmN0aW9uIHRyYWNrRGVyaXZlZEZ1bmN0aW9uKGRlcml2YXRpb24sIGYsIGNvbnRleHQpIHtcbiAgICB2YXIgcHJldkFsbG93U3RhdGVSZWFkcyA9IGFsbG93U3RhdGVSZWFkc1N0YXJ0KHRydWUpO1xuICAgIC8vIHByZSBhbGxvY2F0ZSBhcnJheSBhbGxvY2F0aW9uICsgcm9vbSBmb3IgdmFyaWF0aW9uIGluIGRlcHNcbiAgICAvLyBhcnJheSB3aWxsIGJlIHRyaW1tZWQgYnkgYmluZERlcGVuZGVuY2llc1xuICAgIGNoYW5nZURlcGVuZGVuY2llc1N0YXRlVG8wKGRlcml2YXRpb24pO1xuICAgIGRlcml2YXRpb24ubmV3T2JzZXJ2aW5nID0gbmV3IEFycmF5KGRlcml2YXRpb24ub2JzZXJ2aW5nLmxlbmd0aCArIDEwMCk7XG4gICAgZGVyaXZhdGlvbi51bmJvdW5kRGVwc0NvdW50ID0gMDtcbiAgICBkZXJpdmF0aW9uLnJ1bklkID0gKytnbG9iYWxTdGF0ZS5ydW5JZDtcbiAgICB2YXIgcHJldlRyYWNraW5nID0gZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uO1xuICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiA9IGRlcml2YXRpb247XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoZ2xvYmFsU3RhdGUuZGlzYWJsZUVycm9yQm91bmRhcmllcyA9PT0gdHJ1ZSkge1xuICAgICAgICByZXN1bHQgPSBmLmNhbGwoY29udGV4dCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZi5jYWxsKGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgQ2F1Z2h0RXhjZXB0aW9uKGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiA9IHByZXZUcmFja2luZztcbiAgICBiaW5kRGVwZW5kZW5jaWVzKGRlcml2YXRpb24pO1xuICAgIHdhcm5BYm91dERlcml2YXRpb25XaXRob3V0RGVwZW5kZW5jaWVzKGRlcml2YXRpb24pO1xuICAgIGFsbG93U3RhdGVSZWFkc0VuZChwcmV2QWxsb3dTdGF0ZVJlYWRzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gd2FybkFib3V0RGVyaXZhdGlvbldpdGhvdXREZXBlbmRlbmNpZXMoZGVyaXZhdGlvbikge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoZGVyaXZhdGlvbi5vYnNlcnZpbmcubGVuZ3RoICE9PSAwKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKGdsb2JhbFN0YXRlLnJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlIHx8IGRlcml2YXRpb24ucmVxdWlyZXNPYnNlcnZhYmxlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlttb2J4XSBEZXJpdmF0aW9uIFwiICsgZGVyaXZhdGlvbi5uYW1lICsgXCIgaXMgY3JlYXRlZC91cGRhdGVkIHdpdGhvdXQgcmVhZGluZyBhbnkgb2JzZXJ2YWJsZSB2YWx1ZVwiKTtcbiAgICB9XG59XG4vKipcbiAqIGRpZmZzIG5ld09ic2VydmluZyB3aXRoIG9ic2VydmluZy5cbiAqIHVwZGF0ZSBvYnNlcnZpbmcgdG8gYmUgbmV3T2JzZXJ2aW5nIHdpdGggdW5pcXVlIG9ic2VydmFibGVzXG4gKiBub3RpZnkgb2JzZXJ2ZXJzIHRoYXQgYmVjb21lIG9ic2VydmVkL3Vub2JzZXJ2ZWRcbiAqL1xuZnVuY3Rpb24gYmluZERlcGVuZGVuY2llcyhkZXJpdmF0aW9uKSB7XG4gICAgLy8gaW52YXJpYW50KGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGUgIT09IElEZXJpdmF0aW9uU3RhdGUuTk9UX1RSQUNLSU5HLCBcIklOVEVSTkFMIEVSUk9SIGJpbmREZXBlbmRlbmNpZXMgZXhwZWN0cyBkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlICE9PSAtMVwiKTtcbiAgICB2YXIgcHJldk9ic2VydmluZyA9IGRlcml2YXRpb24ub2JzZXJ2aW5nO1xuICAgIHZhciBvYnNlcnZpbmcgPSAoZGVyaXZhdGlvbi5vYnNlcnZpbmcgPSBkZXJpdmF0aW9uLm5ld09ic2VydmluZyk7XG4gICAgdmFyIGxvd2VzdE5ld09ic2VydmluZ0Rlcml2YXRpb25TdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURTtcbiAgICAvLyBHbyB0aHJvdWdoIGFsbCBuZXcgb2JzZXJ2YWJsZXMgYW5kIGNoZWNrIGRpZmZWYWx1ZTogKHRoaXMgbGlzdCBjYW4gY29udGFpbiBkdXBsaWNhdGVzKTpcbiAgICAvLyAgIDA6IGZpcnN0IG9jY3VycmVuY2UsIGNoYW5nZSB0byAxIGFuZCBrZWVwIGl0XG4gICAgLy8gICAxOiBleHRyYSBvY2N1cnJlbmNlLCBkcm9wIGl0XG4gICAgdmFyIGkwID0gMCwgbCA9IGRlcml2YXRpb24udW5ib3VuZERlcHNDb3VudDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgZGVwID0gb2JzZXJ2aW5nW2ldO1xuICAgICAgICBpZiAoZGVwLmRpZmZWYWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgZGVwLmRpZmZWYWx1ZSA9IDE7XG4gICAgICAgICAgICBpZiAoaTAgIT09IGkpXG4gICAgICAgICAgICAgICAgb2JzZXJ2aW5nW2kwXSA9IGRlcDtcbiAgICAgICAgICAgIGkwKys7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBjYXN0IGlzICdzYWZlJyBoZXJlLCBiZWNhdXNlIGlmIGRlcCBpcyBJT2JzZXJ2YWJsZSwgYGRlcGVuZGVuY2llc1N0YXRlYCB3aWxsIGJlIHVuZGVmaW5lZCxcbiAgICAgICAgLy8gbm90IGhpdHRpbmcgdGhlIGNvbmRpdGlvblxuICAgICAgICBpZiAoZGVwLmRlcGVuZGVuY2llc1N0YXRlID4gbG93ZXN0TmV3T2JzZXJ2aW5nRGVyaXZhdGlvblN0YXRlKSB7XG4gICAgICAgICAgICBsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUgPSBkZXAuZGVwZW5kZW5jaWVzU3RhdGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb2JzZXJ2aW5nLmxlbmd0aCA9IGkwO1xuICAgIGRlcml2YXRpb24ubmV3T2JzZXJ2aW5nID0gbnVsbDsgLy8gbmV3T2JzZXJ2aW5nIHNob3VsZG4ndCBiZSBuZWVkZWQgb3V0c2lkZSB0cmFja2luZyAoc3RhdGVtZW50IG1vdmVkIGRvd24gdG8gd29yayBhcm91bmQgRkYgYnVnLCBzZWUgIzYxNClcbiAgICAvLyBHbyB0aHJvdWdoIGFsbCBvbGQgb2JzZXJ2YWJsZXMgYW5kIGNoZWNrIGRpZmZWYWx1ZTogKGl0IGlzIHVuaXF1ZSBhZnRlciBsYXN0IGJpbmREZXBlbmRlbmNpZXMpXG4gICAgLy8gICAwOiBpdCdzIG5vdCBpbiBuZXcgb2JzZXJ2YWJsZXMsIHVub2JzZXJ2ZSBpdFxuICAgIC8vICAgMTogaXQga2VlcHMgYmVpbmcgb2JzZXJ2ZWQsIGRvbid0IHdhbnQgdG8gbm90aWZ5IGl0LiBjaGFuZ2UgdG8gMFxuICAgIGwgPSBwcmV2T2JzZXJ2aW5nLmxlbmd0aDtcbiAgICB3aGlsZSAobC0tKSB7XG4gICAgICAgIHZhciBkZXAgPSBwcmV2T2JzZXJ2aW5nW2xdO1xuICAgICAgICBpZiAoZGVwLmRpZmZWYWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgcmVtb3ZlT2JzZXJ2ZXIoZGVwLCBkZXJpdmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBkZXAuZGlmZlZhbHVlID0gMDtcbiAgICB9XG4gICAgLy8gR28gdGhyb3VnaCBhbGwgbmV3IG9ic2VydmFibGVzIGFuZCBjaGVjayBkaWZmVmFsdWU6IChub3cgaXQgc2hvdWxkIGJlIHVuaXF1ZSlcbiAgICAvLyAgIDA6IGl0IHdhcyBzZXQgdG8gMCBpbiBsYXN0IGxvb3AuIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmcuXG4gICAgLy8gICAxOiBpdCB3YXNuJ3Qgb2JzZXJ2ZWQsIGxldCdzIG9ic2VydmUgaXQuIHNldCBiYWNrIHRvIDBcbiAgICB3aGlsZSAoaTAtLSkge1xuICAgICAgICB2YXIgZGVwID0gb2JzZXJ2aW5nW2kwXTtcbiAgICAgICAgaWYgKGRlcC5kaWZmVmFsdWUgPT09IDEpIHtcbiAgICAgICAgICAgIGRlcC5kaWZmVmFsdWUgPSAwO1xuICAgICAgICAgICAgYWRkT2JzZXJ2ZXIoZGVwLCBkZXJpdmF0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBTb21lIG5ldyBvYnNlcnZlZCBkZXJpdmF0aW9ucyBtYXkgYmVjb21lIHN0YWxlIGR1cmluZyB0aGlzIGRlcml2YXRpb24gY29tcHV0YXRpb25cbiAgICAvLyBzbyB0aGV5IGhhdmUgaGFkIG5vIGNoYW5jZSB0byBwcm9wYWdhdGUgc3RhbGVuZXNzICgjOTE2KVxuICAgIGlmIChsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUgIT09IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURSkge1xuICAgICAgICBkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlID0gbG93ZXN0TmV3T2JzZXJ2aW5nRGVyaXZhdGlvblN0YXRlO1xuICAgICAgICBkZXJpdmF0aW9uLm9uQmVjb21lU3RhbGUoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGVhck9ic2VydmluZyhkZXJpdmF0aW9uKSB7XG4gICAgLy8gaW52YXJpYW50KGdsb2JhbFN0YXRlLmluQmF0Y2ggPiAwLCBcIklOVEVSTkFMIEVSUk9SIGNsZWFyT2JzZXJ2aW5nIHNob3VsZCBiZSBjYWxsZWQgb25seSBpbnNpZGUgYmF0Y2hcIik7XG4gICAgdmFyIG9icyA9IGRlcml2YXRpb24ub2JzZXJ2aW5nO1xuICAgIGRlcml2YXRpb24ub2JzZXJ2aW5nID0gW107XG4gICAgdmFyIGkgPSBvYnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pXG4gICAgICAgIHJlbW92ZU9ic2VydmVyKG9ic1tpXSwgZGVyaXZhdGlvbik7XG4gICAgZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuTk9UX1RSQUNLSU5HO1xufVxuZnVuY3Rpb24gdW50cmFja2VkKGFjdGlvbikge1xuICAgIHZhciBwcmV2ID0gdW50cmFja2VkU3RhcnQoKTtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYWN0aW9uKCk7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB1bnRyYWNrZWRFbmQocHJldik7XG4gICAgfVxufVxuZnVuY3Rpb24gdW50cmFja2VkU3RhcnQoKSB7XG4gICAgdmFyIHByZXYgPSBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb247XG4gICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uID0gbnVsbDtcbiAgICByZXR1cm4gcHJldjtcbn1cbmZ1bmN0aW9uIHVudHJhY2tlZEVuZChwcmV2KSB7XG4gICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uID0gcHJldjtcbn1cbmZ1bmN0aW9uIGFsbG93U3RhdGVSZWFkc1N0YXJ0KGFsbG93U3RhdGVSZWFkcykge1xuICAgIHZhciBwcmV2ID0gZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZVJlYWRzO1xuICAgIGdsb2JhbFN0YXRlLmFsbG93U3RhdGVSZWFkcyA9IGFsbG93U3RhdGVSZWFkcztcbiAgICByZXR1cm4gcHJldjtcbn1cbmZ1bmN0aW9uIGFsbG93U3RhdGVSZWFkc0VuZChwcmV2KSB7XG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZVJlYWRzID0gcHJldjtcbn1cbi8qKlxuICogbmVlZGVkIHRvIGtlZXAgYGxvd2VzdE9ic2VydmVyU3RhdGVgIGNvcnJlY3QuIHdoZW4gY2hhbmdpbmcgZnJvbSAoMiBvciAxKSB0byAwXG4gKlxuICovXG5mdW5jdGlvbiBjaGFuZ2VEZXBlbmRlbmNpZXNTdGF0ZVRvMChkZXJpdmF0aW9uKSB7XG4gICAgaWYgKGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGUgPT09IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLlVQX1RPX0RBVEU7XG4gICAgdmFyIG9icyA9IGRlcml2YXRpb24ub2JzZXJ2aW5nO1xuICAgIHZhciBpID0gb2JzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKVxuICAgICAgICBvYnNbaV0ubG93ZXN0T2JzZXJ2ZXJTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQWN0aW9uKGFjdGlvbk5hbWUsIGZuLCByZWYpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGludmFyaWFudCh0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIiwgXCJgYWN0aW9uYCBjYW4gb25seSBiZSBpbnZva2VkIG9uIGZ1bmN0aW9uc1wiKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb25OYW1lICE9PSBcInN0cmluZ1wiIHx8ICFhY3Rpb25OYW1lKVxuICAgICAgICAgICAgZmFpbChcImFjdGlvbnMgc2hvdWxkIGhhdmUgdmFsaWQgbmFtZXMsIGdvdDogJ1wiICsgYWN0aW9uTmFtZSArIFwiJ1wiKTtcbiAgICB9XG4gICAgdmFyIHJlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGVBY3Rpb24oYWN0aW9uTmFtZSwgZm4sIHJlZiB8fCB0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgcmVzLmlzTW9ieEFjdGlvbiA9IHRydWU7XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGV4ZWN1dGVBY3Rpb24oYWN0aW9uTmFtZSwgZm4sIHNjb3BlLCBhcmdzKSB7XG4gICAgdmFyIHJ1bkluZm8gPSBfc3RhcnRBY3Rpb24oYWN0aW9uTmFtZSwgc2NvcGUsIGFyZ3MpO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShzY29wZSwgYXJncyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgcnVuSW5mby5lcnJvciA9IGVycjtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgX2VuZEFjdGlvbihydW5JbmZvKTtcbiAgICB9XG59XG5mdW5jdGlvbiBfc3RhcnRBY3Rpb24oYWN0aW9uTmFtZSwgc2NvcGUsIGFyZ3MpIHtcbiAgICB2YXIgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKCkgJiYgISFhY3Rpb25OYW1lO1xuICAgIHZhciBzdGFydFRpbWUgPSAwO1xuICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIHZhciBsID0gKGFyZ3MgJiYgYXJncy5sZW5ndGgpIHx8IDA7XG4gICAgICAgIHZhciBmbGF0dGVuZEFyZ3MgPSBuZXcgQXJyYXkobCk7XG4gICAgICAgIGlmIChsID4gMClcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKVxuICAgICAgICAgICAgICAgIGZsYXR0ZW5kQXJnc1tpXSA9IGFyZ3NbaV07XG4gICAgICAgIHNweVJlcG9ydFN0YXJ0KHtcbiAgICAgICAgICAgIHR5cGU6IFwiYWN0aW9uXCIsXG4gICAgICAgICAgICBuYW1lOiBhY3Rpb25OYW1lLFxuICAgICAgICAgICAgb2JqZWN0OiBzY29wZSxcbiAgICAgICAgICAgIGFyZ3VtZW50czogZmxhdHRlbmRBcmdzXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgcHJldkRlcml2YXRpb24gPSB1bnRyYWNrZWRTdGFydCgpO1xuICAgIHN0YXJ0QmF0Y2goKTtcbiAgICB2YXIgcHJldkFsbG93U3RhdGVDaGFuZ2VzID0gYWxsb3dTdGF0ZUNoYW5nZXNTdGFydCh0cnVlKTtcbiAgICB2YXIgcHJldkFsbG93U3RhdGVSZWFkcyA9IGFsbG93U3RhdGVSZWFkc1N0YXJ0KHRydWUpO1xuICAgIHZhciBydW5JbmZvID0ge1xuICAgICAgICBwcmV2RGVyaXZhdGlvbjogcHJldkRlcml2YXRpb24sXG4gICAgICAgIHByZXZBbGxvd1N0YXRlQ2hhbmdlczogcHJldkFsbG93U3RhdGVDaGFuZ2VzLFxuICAgICAgICBwcmV2QWxsb3dTdGF0ZVJlYWRzOiBwcmV2QWxsb3dTdGF0ZVJlYWRzLFxuICAgICAgICBub3RpZnlTcHk6IG5vdGlmeVNweSxcbiAgICAgICAgc3RhcnRUaW1lOiBzdGFydFRpbWUsXG4gICAgICAgIGFjdGlvbklkOiBnbG9iYWxTdGF0ZS5uZXh0QWN0aW9uSWQrKyxcbiAgICAgICAgcGFyZW50QWN0aW9uSWQ6IGdsb2JhbFN0YXRlLmN1cnJlbnRBY3Rpb25JZFxuICAgIH07XG4gICAgZ2xvYmFsU3RhdGUuY3VycmVudEFjdGlvbklkID0gcnVuSW5mby5hY3Rpb25JZDtcbiAgICByZXR1cm4gcnVuSW5mbztcbn1cbmZ1bmN0aW9uIF9lbmRBY3Rpb24ocnVuSW5mbykge1xuICAgIGlmIChnbG9iYWxTdGF0ZS5jdXJyZW50QWN0aW9uSWQgIT09IHJ1bkluZm8uYWN0aW9uSWQpIHtcbiAgICAgICAgZmFpbChcImludmFsaWQgYWN0aW9uIHN0YWNrLiBkaWQgeW91IGZvcmdldCB0byBmaW5pc2ggYW4gYWN0aW9uP1wiKTtcbiAgICB9XG4gICAgZ2xvYmFsU3RhdGUuY3VycmVudEFjdGlvbklkID0gcnVuSW5mby5wYXJlbnRBY3Rpb25JZDtcbiAgICBpZiAocnVuSW5mby5lcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGdsb2JhbFN0YXRlLnN1cHByZXNzUmVhY3Rpb25FcnJvcnMgPSB0cnVlO1xuICAgIH1cbiAgICBhbGxvd1N0YXRlQ2hhbmdlc0VuZChydW5JbmZvLnByZXZBbGxvd1N0YXRlQ2hhbmdlcyk7XG4gICAgYWxsb3dTdGF0ZVJlYWRzRW5kKHJ1bkluZm8ucHJldkFsbG93U3RhdGVSZWFkcyk7XG4gICAgZW5kQmF0Y2goKTtcbiAgICB1bnRyYWNrZWRFbmQocnVuSW5mby5wcmV2RGVyaXZhdGlvbik7XG4gICAgaWYgKHJ1bkluZm8ubm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBzcHlSZXBvcnRFbmQoeyB0aW1lOiBEYXRlLm5vdygpIC0gcnVuSW5mby5zdGFydFRpbWUgfSk7XG4gICAgfVxuICAgIGdsb2JhbFN0YXRlLnN1cHByZXNzUmVhY3Rpb25FcnJvcnMgPSBmYWxzZTtcbn1cbmZ1bmN0aW9uIGFsbG93U3RhdGVDaGFuZ2VzKGFsbG93U3RhdGVDaGFuZ2VzLCBmdW5jKSB7XG4gICAgdmFyIHByZXYgPSBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0KGFsbG93U3RhdGVDaGFuZ2VzKTtcbiAgICB2YXIgcmVzO1xuICAgIHRyeSB7XG4gICAgICAgIHJlcyA9IGZ1bmMoKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHByZXYpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gYWxsb3dTdGF0ZUNoYW5nZXNTdGFydChhbGxvd1N0YXRlQ2hhbmdlcykge1xuICAgIHZhciBwcmV2ID0gZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXM7XG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgPSBhbGxvd1N0YXRlQ2hhbmdlcztcbiAgICByZXR1cm4gcHJldjtcbn1cbmZ1bmN0aW9uIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHByZXYpIHtcbiAgICBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlQ2hhbmdlcyA9IHByZXY7XG59XG5mdW5jdGlvbiBhbGxvd1N0YXRlQ2hhbmdlc0luc2lkZUNvbXB1dGVkKGZ1bmMpIHtcbiAgICB2YXIgcHJldiA9IGdsb2JhbFN0YXRlLmNvbXB1dGF0aW9uRGVwdGg7XG4gICAgZ2xvYmFsU3RhdGUuY29tcHV0YXRpb25EZXB0aCA9IDA7XG4gICAgdmFyIHJlcztcbiAgICB0cnkge1xuICAgICAgICByZXMgPSBmdW5jKCk7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBnbG9iYWxTdGF0ZS5jb21wdXRhdGlvbkRlcHRoID0gcHJldjtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxudmFyIE9ic2VydmFibGVWYWx1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT2JzZXJ2YWJsZVZhbHVlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGVWYWx1ZSh2YWx1ZSwgZW5oYW5jZXIsIG5hbWUsIG5vdGlmeVNweSwgZXF1YWxzKSB7XG4gICAgICAgIGlmIChuYW1lID09PSB2b2lkIDApIHsgbmFtZSA9IFwiT2JzZXJ2YWJsZVZhbHVlQFwiICsgZ2V0TmV4dElkKCk7IH1cbiAgICAgICAgaWYgKG5vdGlmeVNweSA9PT0gdm9pZCAwKSB7IG5vdGlmeVNweSA9IHRydWU7IH1cbiAgICAgICAgaWYgKGVxdWFscyA9PT0gdm9pZCAwKSB7IGVxdWFscyA9IGNvbXBhcmVyLmRlZmF1bHQ7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbmFtZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZW5oYW5jZXIgPSBlbmhhbmNlcjtcbiAgICAgICAgX3RoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIF90aGlzLmVxdWFscyA9IGVxdWFscztcbiAgICAgICAgX3RoaXMuaGFzVW5yZXBvcnRlZENoYW5nZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy52YWx1ZSA9IGVuaGFuY2VyKHZhbHVlLCB1bmRlZmluZWQsIG5hbWUpO1xuICAgICAgICBpZiAobm90aWZ5U3B5ICYmIGlzU3B5RW5hYmxlZCgpICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgLy8gb25seSBub3RpZnkgc3B5IGlmIHRoaXMgaXMgYSBzdGFuZC1hbG9uZSBvYnNlcnZhYmxlXG4gICAgICAgICAgICBzcHlSZXBvcnQoeyB0eXBlOiBcImNyZWF0ZVwiLCBuYW1lOiBfdGhpcy5uYW1lLCBuZXdWYWx1ZTogXCJcIiArIF90aGlzLnZhbHVlIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JzZXJ2YWJsZVZhbHVlLnByb3RvdHlwZS5kZWhhbmNlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVoYW5jZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VyKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVZhbHVlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgbmV3VmFsdWUgPSB0aGlzLnByZXBhcmVOZXdWYWx1ZShuZXdWYWx1ZSk7XG4gICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gZ2xvYmFsU3RhdGUuVU5DSEFOR0VEKSB7XG4gICAgICAgICAgICB2YXIgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKCk7XG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBvbGRWYWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXROZXdWYWx1ZShuZXdWYWx1ZSk7XG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRFbmQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZVZhbHVlLnByb3RvdHlwZS5wcmVwYXJlTmV3VmFsdWUgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcyk7XG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2UodGhpcywge1xuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWNoYW5nZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2xvYmFsU3RhdGUuVU5DSEFOR0VEO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjaGFuZ2UubmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXBwbHkgbW9kaWZpZXJcbiAgICAgICAgbmV3VmFsdWUgPSB0aGlzLmVuaGFuY2VyKG5ld1ZhbHVlLCB0aGlzLnZhbHVlLCB0aGlzLm5hbWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5lcXVhbHModGhpcy52YWx1ZSwgbmV3VmFsdWUpID8gZ2xvYmFsU3RhdGUuVU5DSEFOR0VEIDogbmV3VmFsdWU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlVmFsdWUucHJvdG90eXBlLnNldE5ld1ZhbHVlID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIHRoaXMudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgdGhpcy5yZXBvcnRDaGFuZ2VkKCk7XG4gICAgICAgIGlmIChoYXNMaXN0ZW5lcnModGhpcykpIHtcbiAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBvbGRWYWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGVWYWx1ZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJlcG9ydE9ic2VydmVkKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZSh0aGlzLnZhbHVlKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVWYWx1ZS5wcm90b3R5cGUuaW50ZXJjZXB0ID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVySW50ZXJjZXB0b3IodGhpcywgaGFuZGxlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlVmFsdWUucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAobGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseSkge1xuICAgICAgICBpZiAoZmlyZUltbWVkaWF0ZWx5KVxuICAgICAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgICAgIG9sZFZhbHVlOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVnaXN0ZXJMaXN0ZW5lcih0aGlzLCBsaXN0ZW5lcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlVmFsdWUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlVmFsdWUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgXCJbXCIgKyB0aGlzLnZhbHVlICsgXCJdXCI7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlVmFsdWUucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0b1ByaW1pdGl2ZSh0aGlzLmdldCgpKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVWYWx1ZS5wcm90b3R5cGVbU3ltYm9sLnRvUHJpbWl0aXZlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGVWYWx1ZTtcbn0oQXRvbSkpO1xudmFyIGlzT2JzZXJ2YWJsZVZhbHVlID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIk9ic2VydmFibGVWYWx1ZVwiLCBPYnNlcnZhYmxlVmFsdWUpO1xuXG4vKipcbiAqIEEgbm9kZSBpbiB0aGUgc3RhdGUgZGVwZW5kZW5jeSByb290IHRoYXQgb2JzZXJ2ZXMgb3RoZXIgbm9kZXMsIGFuZCBjYW4gYmUgb2JzZXJ2ZWQgaXRzZWxmLlxuICpcbiAqIENvbXB1dGVkVmFsdWUgd2lsbCByZW1lbWJlciB0aGUgcmVzdWx0IG9mIHRoZSBjb21wdXRhdGlvbiBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBiYXRjaCwgb3JcbiAqIHdoaWxlIGJlaW5nIG9ic2VydmVkLlxuICpcbiAqIER1cmluZyB0aGlzIHRpbWUgaXQgd2lsbCByZWNvbXB1dGUgb25seSB3aGVuIG9uZSBvZiBpdHMgZGlyZWN0IGRlcGVuZGVuY2llcyBjaGFuZ2VkLFxuICogYnV0IG9ubHkgd2hlbiBpdCBpcyBiZWluZyBhY2Nlc3NlZCB3aXRoIGBDb21wdXRlZFZhbHVlLmdldCgpYC5cbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBkZXNjcmlwdGlvbjpcbiAqIDEuIEZpcnN0IHRpbWUgaXQncyBiZWluZyBhY2Nlc3NlZCBpdCB3aWxsIGNvbXB1dGUgYW5kIHJlbWVtYmVyIHJlc3VsdFxuICogICAgZ2l2ZSBiYWNrIHJlbWVtYmVyZWQgcmVzdWx0IHVudGlsIDIuIGhhcHBlbnNcbiAqIDIuIEZpcnN0IHRpbWUgYW55IGRlZXAgZGVwZW5kZW5jeSBjaGFuZ2UsIHByb3BhZ2F0ZSBQT1NTSUJMWV9TVEFMRSB0byBhbGwgb2JzZXJ2ZXJzLCB3YWl0IGZvciAzLlxuICogMy4gV2hlbiBpdCdzIGJlaW5nIGFjY2Vzc2VkLCByZWNvbXB1dGUgaWYgYW55IHNoYWxsb3cgZGVwZW5kZW5jeSBjaGFuZ2VkLlxuICogICAgaWYgcmVzdWx0IGNoYW5nZWQ6IHByb3BhZ2F0ZSBTVEFMRSB0byBhbGwgb2JzZXJ2ZXJzLCB0aGF0IHdlcmUgUE9TU0lCTFlfU1RBTEUgZnJvbSB0aGUgbGFzdCBzdGVwLlxuICogICAgZ28gdG8gc3RlcCAyLiBlaXRoZXIgd2F5XG4gKlxuICogSWYgYXQgYW55IHBvaW50IGl0J3Mgb3V0c2lkZSBiYXRjaCBhbmQgaXQgaXNuJ3Qgb2JzZXJ2ZWQ6IHJlc2V0IGV2ZXJ5dGhpbmcgYW5kIGdvIHRvIDEuXG4gKi9cbnZhciBDb21wdXRlZFZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBjb21wdXRlZCB2YWx1ZSBiYXNlZCBvbiBhIGZ1bmN0aW9uIGV4cHJlc3Npb24uXG4gICAgICpcbiAgICAgKiBUaGUgYG5hbWVgIHByb3BlcnR5IGlzIGZvciBkZWJ1ZyBwdXJwb3NlcyBvbmx5LlxuICAgICAqXG4gICAgICogVGhlIGBlcXVhbHNgIHByb3BlcnR5IHNwZWNpZmllcyB0aGUgY29tcGFyZXIgZnVuY3Rpb24gdG8gdXNlIHRvIGRldGVybWluZSBpZiBhIG5ld2x5IHByb2R1Y2VkXG4gICAgICogdmFsdWUgZGlmZmVycyBmcm9tIHRoZSBwcmV2aW91cyB2YWx1ZS4gVHdvIGNvbXBhcmVycyBhcmUgcHJvdmlkZWQgaW4gdGhlIGxpYnJhcnk7IGBkZWZhdWx0Q29tcGFyZXJgXG4gICAgICogY29tcGFyZXMgYmFzZWQgb24gaWRlbnRpdHkgY29tcGFyaXNvbiAoPT09KSwgYW5kIGBzdHJ1Y3R1YWxDb21wYXJlcmAgZGVlcGx5IGNvbXBhcmVzIHRoZSBzdHJ1Y3R1cmUuXG4gICAgICogU3RydWN0dXJhbCBjb21wYXJpc29uIGNhbiBiZSBjb252ZW5pZW50IGlmIHlvdSBhbHdheXMgcHJvZHVjZSBhIG5ldyBhZ2dyZWdhdGVkIG9iamVjdCBhbmRcbiAgICAgKiBkb24ndCB3YW50IHRvIG5vdGlmeSBvYnNlcnZlcnMgaWYgaXQgaXMgc3RydWN0dXJhbGx5IHRoZSBzYW1lLlxuICAgICAqIFRoaXMgaXMgdXNlZnVsIGZvciB3b3JraW5nIHdpdGggdmVjdG9ycywgbW91c2UgY29vcmRpbmF0ZXMgZXRjLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIENvbXB1dGVkVmFsdWUob3B0aW9ucykge1xuICAgICAgICB0aGlzLmRlcGVuZGVuY2llc1N0YXRlID0gSURlcml2YXRpb25TdGF0ZS5OT1RfVFJBQ0tJTkc7XG4gICAgICAgIHRoaXMub2JzZXJ2aW5nID0gW107IC8vIG5vZGVzIHdlIGFyZSBsb29raW5nIGF0LiBPdXIgdmFsdWUgZGVwZW5kcyBvbiB0aGVzZSBub2Rlc1xuICAgICAgICB0aGlzLm5ld09ic2VydmluZyA9IG51bGw7IC8vIGR1cmluZyB0cmFja2luZyBpdCdzIGFuIGFycmF5IHdpdGggbmV3IG9ic2VydmVkIG9ic2VydmVyc1xuICAgICAgICB0aGlzLmlzQmVpbmdPYnNlcnZlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzUGVuZGluZ1Vub2JzZXJ2YXRpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMuZGlmZlZhbHVlID0gMDtcbiAgICAgICAgdGhpcy5ydW5JZCA9IDA7XG4gICAgICAgIHRoaXMubGFzdEFjY2Vzc2VkQnkgPSAwO1xuICAgICAgICB0aGlzLmxvd2VzdE9ic2VydmVyU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLlVQX1RPX0RBVEU7XG4gICAgICAgIHRoaXMudW5ib3VuZERlcHNDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuX19tYXBpZCA9IFwiI1wiICsgZ2V0TmV4dElkKCk7XG4gICAgICAgIHRoaXMudmFsdWUgPSBuZXcgQ2F1Z2h0RXhjZXB0aW9uKG51bGwpO1xuICAgICAgICB0aGlzLmlzQ29tcHV0aW5nID0gZmFsc2U7IC8vIHRvIGNoZWNrIGZvciBjeWNsZXNcbiAgICAgICAgdGhpcy5pc1J1bm5pbmdTZXR0ZXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1RyYWNpbmcgPSBUcmFjZU1vZGUuTk9ORTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhb3B0aW9ucy5nZXQpXG4gICAgICAgICAgICB0aHJvdyBcIlttb2J4XSBtaXNzaW5nIG9wdGlvbiBmb3IgY29tcHV0ZWQ6IGdldFwiO1xuICAgICAgICB0aGlzLmRlcml2YXRpb24gPSBvcHRpb25zLmdldDtcbiAgICAgICAgdGhpcy5uYW1lID0gb3B0aW9ucy5uYW1lIHx8IFwiQ29tcHV0ZWRWYWx1ZUBcIiArIGdldE5leHRJZCgpO1xuICAgICAgICBpZiAob3B0aW9ucy5zZXQpXG4gICAgICAgICAgICB0aGlzLnNldHRlciA9IGNyZWF0ZUFjdGlvbih0aGlzLm5hbWUgKyBcIi1zZXR0ZXJcIiwgb3B0aW9ucy5zZXQpO1xuICAgICAgICB0aGlzLmVxdWFscyA9XG4gICAgICAgICAgICBvcHRpb25zLmVxdWFscyB8fFxuICAgICAgICAgICAgICAgIChvcHRpb25zLmNvbXBhcmVTdHJ1Y3R1cmFsIHx8IG9wdGlvbnMuc3RydWN0XG4gICAgICAgICAgICAgICAgICAgID8gY29tcGFyZXIuc3RydWN0dXJhbFxuICAgICAgICAgICAgICAgICAgICA6IGNvbXBhcmVyLmRlZmF1bHQpO1xuICAgICAgICB0aGlzLnNjb3BlID0gb3B0aW9ucy5jb250ZXh0O1xuICAgICAgICB0aGlzLnJlcXVpcmVzUmVhY3Rpb24gPSAhIW9wdGlvbnMucmVxdWlyZXNSZWFjdGlvbjtcbiAgICAgICAgdGhpcy5rZWVwQWxpdmUgPSAhIW9wdGlvbnMua2VlcEFsaXZlO1xuICAgIH1cbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS5vbkJlY29tZVN0YWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBwcm9wYWdhdGVNYXliZUNoYW5nZWQodGhpcyk7XG4gICAgfTtcbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS5vbkJlY29tZU9ic2VydmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5vbkJlY29tZU9ic2VydmVkTGlzdGVuZXJzKSB7XG4gICAgICAgICAgICB0aGlzLm9uQmVjb21lT2JzZXJ2ZWRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHsgcmV0dXJuIGxpc3RlbmVyKCk7IH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS5vbkJlY29tZVVub2JzZXJ2ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLm9uQmVjb21lVW5vYnNlcnZlZExpc3RlbmVycykge1xuICAgICAgICAgICAgdGhpcy5vbkJlY29tZVVub2JzZXJ2ZWRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHsgcmV0dXJuIGxpc3RlbmVyKCk7IH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoaXMgY29tcHV0ZWQgdmFsdWUuXG4gICAgICogV2lsbCBldmFsdWF0ZSBpdHMgY29tcHV0YXRpb24gZmlyc3QgaWYgbmVlZGVkLlxuICAgICAqL1xuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDb21wdXRpbmcpXG4gICAgICAgICAgICBmYWlsKFwiQ3ljbGUgZGV0ZWN0ZWQgaW4gY29tcHV0YXRpb24gXCIgKyB0aGlzLm5hbWUgKyBcIjogXCIgKyB0aGlzLmRlcml2YXRpb24pO1xuICAgICAgICBpZiAoZ2xvYmFsU3RhdGUuaW5CYXRjaCA9PT0gMCAmJiB0aGlzLm9ic2VydmVycy5zaXplID09PSAwICYmICF0aGlzLmtlZXBBbGl2ZSkge1xuICAgICAgICAgICAgaWYgKHNob3VsZENvbXB1dGUodGhpcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndhcm5BYm91dFVudHJhY2tlZFJlYWQoKTtcbiAgICAgICAgICAgICAgICBzdGFydEJhdGNoKCk7IC8vIFNlZSBwZXJmIHRlc3QgJ2NvbXB1dGVkIG1lbW9pemF0aW9uJ1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmNvbXB1dGVWYWx1ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgZW5kQmF0Y2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcG9ydE9ic2VydmVkKHRoaXMpO1xuICAgICAgICAgICAgaWYgKHNob3VsZENvbXB1dGUodGhpcykpXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhY2tBbmRDb21wdXRlKCkpXG4gICAgICAgICAgICAgICAgICAgIHByb3BhZ2F0ZUNoYW5nZUNvbmZpcm1lZCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy52YWx1ZTtcbiAgICAgICAgaWYgKGlzQ2F1Z2h0RXhjZXB0aW9uKHJlc3VsdCkpXG4gICAgICAgICAgICB0aHJvdyByZXN1bHQuY2F1c2U7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVzID0gdGhpcy5jb21wdXRlVmFsdWUoZmFsc2UpO1xuICAgICAgICBpZiAoaXNDYXVnaHRFeGNlcHRpb24ocmVzKSlcbiAgICAgICAgICAgIHRocm93IHJlcy5jYXVzZTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5zZXR0ZXIpIHtcbiAgICAgICAgICAgIGludmFyaWFudCghdGhpcy5pc1J1bm5pbmdTZXR0ZXIsIFwiVGhlIHNldHRlciBvZiBjb21wdXRlZCB2YWx1ZSAnXCIgKyB0aGlzLm5hbWUgKyBcIicgaXMgdHJ5aW5nIHRvIHVwZGF0ZSBpdHNlbGYuIERpZCB5b3UgaW50ZW5kIHRvIHVwZGF0ZSBhbiBfb2JzZXJ2YWJsZV8gdmFsdWUsIGluc3RlYWQgb2YgdGhlIGNvbXB1dGVkIHByb3BlcnR5P1wiKTtcbiAgICAgICAgICAgIHRoaXMuaXNSdW5uaW5nU2V0dGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0ZXIuY2FsbCh0aGlzLnNjb3BlLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUnVubmluZ1NldHRlciA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGludmFyaWFudChmYWxzZSwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICAgICAgICAgXCJbQ29tcHV0ZWRWYWx1ZSAnXCIgKyB0aGlzLm5hbWUgKyBcIiddIEl0IGlzIG5vdCBwb3NzaWJsZSB0byBhc3NpZ24gYSBuZXcgdmFsdWUgdG8gYSBjb21wdXRlZCB2YWx1ZS5cIik7XG4gICAgfTtcbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS50cmFja0FuZENvbXB1dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc1NweUVuYWJsZWQoKSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydCh7XG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnNjb3BlLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiY29tcHV0ZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgdmFyIHdhc1N1c3BlbmRlZCA9IFxuICAgICAgICAvKiBzZWUgIzEyMDggKi8gdGhpcy5kZXBlbmRlbmNpZXNTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5OT1RfVFJBQ0tJTkc7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IHRoaXMuY29tcHV0ZVZhbHVlKHRydWUpO1xuICAgICAgICB2YXIgY2hhbmdlZCA9IHdhc1N1c3BlbmRlZCB8fFxuICAgICAgICAgICAgaXNDYXVnaHRFeGNlcHRpb24ob2xkVmFsdWUpIHx8XG4gICAgICAgICAgICBpc0NhdWdodEV4Y2VwdGlvbihuZXdWYWx1ZSkgfHxcbiAgICAgICAgICAgICF0aGlzLmVxdWFscyhvbGRWYWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH07XG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUuY29tcHV0ZVZhbHVlID0gZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgICAgIHRoaXMuaXNDb21wdXRpbmcgPSB0cnVlO1xuICAgICAgICBnbG9iYWxTdGF0ZS5jb21wdXRhdGlvbkRlcHRoKys7XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIGlmICh0cmFjaykge1xuICAgICAgICAgICAgcmVzID0gdHJhY2tEZXJpdmVkRnVuY3Rpb24odGhpcywgdGhpcy5kZXJpdmF0aW9uLCB0aGlzLnNjb3BlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChnbG9iYWxTdGF0ZS5kaXNhYmxlRXJyb3JCb3VuZGFyaWVzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gdGhpcy5kZXJpdmF0aW9uLmNhbGwodGhpcy5zY29wZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXMgPSB0aGlzLmRlcml2YXRpb24uY2FsbCh0aGlzLnNjb3BlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gbmV3IENhdWdodEV4Y2VwdGlvbihlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2xvYmFsU3RhdGUuY29tcHV0YXRpb25EZXB0aC0tO1xuICAgICAgICB0aGlzLmlzQ29tcHV0aW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS5zdXNwZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMua2VlcEFsaXZlKSB7XG4gICAgICAgICAgICBjbGVhck9ic2VydmluZyh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7IC8vIGRvbid0IGhvbGQgb24gdG8gY29tcHV0ZWQgdmFsdWUhXG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAobGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcbiAgICAgICAgdmFyIHByZXZWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIGF1dG9ydW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gX3RoaXMuZ2V0KCk7XG4gICAgICAgICAgICBpZiAoIWZpcnN0VGltZSB8fCBmaXJlSW1tZWRpYXRlbHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJldlUgPSB1bnRyYWNrZWRTdGFydCgpO1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiBfdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZTogcHJldlZhbHVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdW50cmFja2VkRW5kKHByZXZVKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpcnN0VGltZSA9IGZhbHNlO1xuICAgICAgICAgICAgcHJldlZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUud2FybkFib3V0VW50cmFja2VkUmVhZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMucmVxdWlyZXNSZWFjdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgZmFpbChcIlttb2J4XSBDb21wdXRlZCB2YWx1ZSBcIiArIHRoaXMubmFtZSArIFwiIGlzIHJlYWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHRcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNUcmFjaW5nICE9PSBUcmFjZU1vZGUuTk9ORSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbbW9ieC50cmFjZV0gJ1wiICsgdGhpcy5uYW1lICsgXCInIGlzIGJlaW5nIHJlYWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHQuIERvaW5nIGEgZnVsbCByZWNvbXB1dGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdsb2JhbFN0YXRlLmNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvbikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW21vYnhdIENvbXB1dGVkIHZhbHVlIFwiICsgdGhpcy5uYW1lICsgXCIgaXMgYmVpbmcgcmVhZCBvdXRzaWRlIGEgcmVhY3RpdmUgY29udGV4dC4gRG9pbmcgYSBmdWxsIHJlY29tcHV0ZVwiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoKTtcbiAgICB9O1xuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgXCJbXCIgKyB0aGlzLmRlcml2YXRpb24udG9TdHJpbmcoKSArIFwiXVwiO1xuICAgIH07XG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRvUHJpbWl0aXZlKHRoaXMuZ2V0KCkpO1xuICAgIH07XG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGVbU3ltYm9sLnRvUHJpbWl0aXZlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbXB1dGVkVmFsdWU7XG59KCkpO1xudmFyIGlzQ29tcHV0ZWRWYWx1ZSA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXCJDb21wdXRlZFZhbHVlXCIsIENvbXB1dGVkVmFsdWUpO1xuXG4vKipcbiAqIFRoZXNlIHZhbHVlcyB3aWxsIHBlcnNpc3QgaWYgZ2xvYmFsIHN0YXRlIGlzIHJlc2V0XG4gKi9cbnZhciBwZXJzaXN0ZW50S2V5cyA9IFtcbiAgICBcIm1vYnhHdWlkXCIsXG4gICAgXCJzcHlMaXN0ZW5lcnNcIixcbiAgICBcImVuZm9yY2VBY3Rpb25zXCIsXG4gICAgXCJjb21wdXRlZFJlcXVpcmVzUmVhY3Rpb25cIixcbiAgICBcInJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlXCIsXG4gICAgXCJvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvblwiLFxuICAgIFwiYWxsb3dTdGF0ZVJlYWRzXCIsXG4gICAgXCJkaXNhYmxlRXJyb3JCb3VuZGFyaWVzXCIsXG4gICAgXCJydW5JZFwiLFxuICAgIFwiVU5DSEFOR0VEXCJcbl07XG52YXIgTW9iWEdsb2JhbHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9iWEdsb2JhbHMoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNb2JYR2xvYmFscyB2ZXJzaW9uLlxuICAgICAgICAgKiBNb2JYIGNvbXBhdGlibGl0eSB3aXRoIG90aGVyIHZlcnNpb25zIGxvYWRlZCBpbiBtZW1vcnkgYXMgbG9uZyBhcyB0aGlzIHZlcnNpb24gbWF0Y2hlcy5cbiAgICAgICAgICogSXQgaW5kaWNhdGVzIHRoYXQgdGhlIGdsb2JhbCBzdGF0ZSBzdGlsbCBzdG9yZXMgc2ltaWxhciBpbmZvcm1hdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBOLkI6IHRoaXMgdmVyc2lvbiBpcyB1bnJlbGF0ZWQgdG8gdGhlIHBhY2thZ2UgdmVyc2lvbiBvZiBNb2JYLCBhbmQgaXMgb25seSB0aGUgdmVyc2lvbiBvZiB0aGVcbiAgICAgICAgICogaW50ZXJuYWwgc3RhdGUgc3RvcmFnZSBvZiBNb2JYLCBhbmQgY2FuIGJlIHRoZSBzYW1lIGFjcm9zcyBtYW55IGRpZmZlcmVudCBwYWNrYWdlIHZlcnNpb25zXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZlcnNpb24gPSA1O1xuICAgICAgICAvKipcbiAgICAgICAgICogZ2xvYmFsbHkgdW5pcXVlIHRva2VuIHRvIHNpZ25hbCB1bmNoYW5nZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuVU5DSEFOR0VEID0ge307XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDdXJyZW50bHkgcnVubmluZyBkZXJpdmF0aW9uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRyYWNraW5nRGVyaXZhdGlvbiA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcmUgd2UgcnVubmluZyBhIGNvbXB1dGF0aW9uIGN1cnJlbnRseT8gKG5vdCBhIHJlYWN0aW9uKVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb21wdXRhdGlvbkRlcHRoID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVhY2ggdGltZSBhIGRlcml2YXRpb24gaXMgdHJhY2tlZCwgaXQgaXMgYXNzaWduZWQgYSB1bmlxdWUgcnVuLWlkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJ1bklkID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqICdndWlkJyBmb3IgZ2VuZXJhbCBwdXJwb3NlLiBXaWxsIGJlIHBlcnNpc3RlZCBhbW9uZ3N0IHJlc2V0cy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubW9ieEd1aWQgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogQXJlIHdlIGluIGEgYmF0Y2ggYmxvY2s/IChhbmQgaG93IG1hbnkgb2YgdGhlbSlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5CYXRjaCA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPYnNlcnZhYmxlcyB0aGF0IGRvbid0IGhhdmUgb2JzZXJ2ZXJzIGFueW1vcmUsIGFuZCBhcmUgYWJvdXQgdG8gYmVcbiAgICAgICAgICogc3VzcGVuZGVkLCB1bmxlc3Mgc29tZWJvZHkgZWxzZSBhY2Nlc3NlcyBpdCBpbiB0aGUgc2FtZSBiYXRjaFxuICAgICAgICAgKlxuICAgICAgICAgKiBAdHlwZSB7SU9ic2VydmFibGVbXX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucGVuZGluZ1Vub2JzZXJ2YXRpb25zID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMaXN0IG9mIHNjaGVkdWxlZCwgbm90IHlldCBleGVjdXRlZCwgcmVhY3Rpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wZW5kaW5nUmVhY3Rpb25zID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcmUgd2UgY3VycmVudGx5IHByb2Nlc3NpbmcgcmVhY3Rpb25zP1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc1J1bm5pbmdSZWFjdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElzIGl0IGFsbG93ZWQgdG8gY2hhbmdlIG9ic2VydmFibGVzIGF0IHRoaXMgcG9pbnQ/XG4gICAgICAgICAqIEluIGdlbmVyYWwsIE1vYlggZG9lc24ndCBhbGxvdyB0aGF0IHdoZW4gcnVubmluZyBjb21wdXRhdGlvbnMgYW5kIFJlYWN0LnJlbmRlci5cbiAgICAgICAgICogVG8gZW5zdXJlIHRoYXQgdGhvc2UgZnVuY3Rpb25zIHN0YXkgcHVyZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYWxsb3dTdGF0ZUNoYW5nZXMgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogSXMgaXQgYWxsb3dlZCB0byByZWFkIG9ic2VydmFibGVzIGF0IHRoaXMgcG9pbnQ/XG4gICAgICAgICAqIFVzZWQgdG8gaG9sZCB0aGUgc3RhdGUgbmVlZGVkIGZvciBgb2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb25gXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFsbG93U3RhdGVSZWFkcyA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBzdHJpY3QgbW9kZSBpcyBlbmFibGVkLCBzdGF0ZSBjaGFuZ2VzIGFyZSBieSBkZWZhdWx0IG5vdCBhbGxvd2VkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVuZm9yY2VBY3Rpb25zID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcHkgY2FsbGJhY2tzXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNweUxpc3RlbmVycyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2xvYmFsbHkgYXR0YWNoZWQgZXJyb3IgaGFuZGxlcnMgdGhhdCByZWFjdCBzcGVjaWZpY2FsbHkgdG8gZXJyb3JzIGluIHJlYWN0aW9uc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nbG9iYWxSZWFjdGlvbkVycm9ySGFuZGxlcnMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdhcm4gaWYgY29tcHV0ZWQgdmFsdWVzIGFyZSBhY2Nlc3NlZCBvdXRzaWRlIGEgcmVhY3RpdmUgY29udGV4dFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb21wdXRlZFJlcXVpcmVzUmVhY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIChFeHBlcmltZW50YWwpXG4gICAgICAgICAqIFdhcm4gaWYgeW91IHRyeSB0byBjcmVhdGUgdG8gZGVyaXZhdGlvbiAvIHJlYWN0aXZlIGNvbnRleHQgd2l0aG91dCBhY2Nlc3NpbmcgYW55IG9ic2VydmFibGUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiAoRXhwZXJpbWVudGFsKVxuICAgICAgICAgKiBXYXJuIGlmIG9ic2VydmFibGVzIGFyZSBhY2Nlc3NlZCBvdXRzaWRlIGEgcmVhY3RpdmUgY29udGV4dFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbiA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQWxsb3dzIG92ZXJ3cml0aW5nIG9mIGNvbXB1dGVkIHByb3BlcnRpZXMsIHVzZWZ1bCBpbiB0ZXN0cyBidXQgbm90IHByb2QgYXMgaXQgY2FuIGNhdXNlXG4gICAgICAgICAqIG1lbW9yeSBsZWFrcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9pc3N1ZXMvMTg2N1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb21wdXRlZENvbmZpZ3VyYWJsZSA9IGZhbHNlO1xuICAgICAgICAvKlxuICAgICAgICAgKiBEb24ndCBjYXRjaCBhbmQgcmV0aHJvdyBleGNlcHRpb25zLiBUaGlzIGlzIHVzZWZ1bCBmb3IgaW5zcGVjdGluZyB0aGUgc3RhdGUgb2ZcbiAgICAgICAgICogdGhlIHN0YWNrIHdoZW4gYW4gZXhjZXB0aW9uIG9jY3VycyB3aGlsZSBkZWJ1Z2dpbmcuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpc2FibGVFcnJvckJvdW5kYXJpZXMgPSBmYWxzZTtcbiAgICAgICAgLypcbiAgICAgICAgICogSWYgdHJ1ZSwgd2UgYXJlIGFscmVhZHkgaGFuZGxpbmcgYW4gZXhjZXB0aW9uIGluIGFuIGFjdGlvbi4gQW55IGVycm9ycyBpbiByZWFjdGlvbnMgc2hvdWxkIGJlIHN1cHByZXNzZWQsIGFzXG4gICAgICAgICAqIHRoZXkgYXJlIG5vdCB0aGUgY2F1c2UsIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4L2lzc3Vlcy8xODM2XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN1cHByZXNzUmVhY3Rpb25FcnJvcnMgPSBmYWxzZTtcbiAgICAgICAgLypcbiAgICAgICAgICogQ3VycmVudCBhY3Rpb24gaWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmN1cnJlbnRBY3Rpb25JZCA9IDA7XG4gICAgICAgIC8qXG4gICAgICAgICAqIE5leHQgYWN0aW9uIGlkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uZXh0QWN0aW9uSWQgPSAxO1xuICAgIH1cbiAgICByZXR1cm4gTW9iWEdsb2JhbHM7XG59KCkpO1xudmFyIGNhbk1lcmdlR2xvYmFsU3RhdGUgPSB0cnVlO1xudmFyIGlzb2xhdGVDYWxsZWQgPSBmYWxzZTtcbnZhciBnbG9iYWxTdGF0ZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGdsb2JhbCA9IGdldEdsb2JhbCgpO1xuICAgIGlmIChnbG9iYWwuX19tb2J4SW5zdGFuY2VDb3VudCA+IDAgJiYgIWdsb2JhbC5fX21vYnhHbG9iYWxzKVxuICAgICAgICBjYW5NZXJnZUdsb2JhbFN0YXRlID0gZmFsc2U7XG4gICAgaWYgKGdsb2JhbC5fX21vYnhHbG9iYWxzICYmIGdsb2JhbC5fX21vYnhHbG9iYWxzLnZlcnNpb24gIT09IG5ldyBNb2JYR2xvYmFscygpLnZlcnNpb24pXG4gICAgICAgIGNhbk1lcmdlR2xvYmFsU3RhdGUgPSBmYWxzZTtcbiAgICBpZiAoIWNhbk1lcmdlR2xvYmFsU3RhdGUpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWlzb2xhdGVDYWxsZWQpIHtcbiAgICAgICAgICAgICAgICBmYWlsKFwiVGhlcmUgYXJlIG11bHRpcGxlLCBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgTW9iWCBhY3RpdmUuIE1ha2Ugc3VyZSBNb2JYIGlzIGxvYWRlZCBvbmx5IG9uY2Ugb3IgdXNlIGBjb25maWd1cmUoeyBpc29sYXRlR2xvYmFsU3RhdGU6IHRydWUgfSlgXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxKTtcbiAgICAgICAgcmV0dXJuIG5ldyBNb2JYR2xvYmFscygpO1xuICAgIH1cbiAgICBlbHNlIGlmIChnbG9iYWwuX19tb2J4R2xvYmFscykge1xuICAgICAgICBnbG9iYWwuX19tb2J4SW5zdGFuY2VDb3VudCArPSAxO1xuICAgICAgICBpZiAoIWdsb2JhbC5fX21vYnhHbG9iYWxzLlVOQ0hBTkdFRClcbiAgICAgICAgICAgIGdsb2JhbC5fX21vYnhHbG9iYWxzLlVOQ0hBTkdFRCA9IHt9OyAvLyBtYWtlIG1lcmdlIGJhY2t3YXJkIGNvbXBhdGlibGVcbiAgICAgICAgcmV0dXJuIGdsb2JhbC5fX21vYnhHbG9iYWxzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ2xvYmFsLl9fbW9ieEluc3RhbmNlQ291bnQgPSAxO1xuICAgICAgICByZXR1cm4gKGdsb2JhbC5fX21vYnhHbG9iYWxzID0gbmV3IE1vYlhHbG9iYWxzKCkpO1xuICAgIH1cbn0pKCk7XG5mdW5jdGlvbiBpc29sYXRlR2xvYmFsU3RhdGUoKSB7XG4gICAgaWYgKGdsb2JhbFN0YXRlLnBlbmRpbmdSZWFjdGlvbnMubGVuZ3RoIHx8XG4gICAgICAgIGdsb2JhbFN0YXRlLmluQmF0Y2ggfHxcbiAgICAgICAgZ2xvYmFsU3RhdGUuaXNSdW5uaW5nUmVhY3Rpb25zKVxuICAgICAgICBmYWlsKFwiaXNvbGF0ZUdsb2JhbFN0YXRlIHNob3VsZCBiZSBjYWxsZWQgYmVmb3JlIE1vYlggaXMgcnVubmluZyBhbnkgcmVhY3Rpb25zXCIpO1xuICAgIGlzb2xhdGVDYWxsZWQgPSB0cnVlO1xuICAgIGlmIChjYW5NZXJnZUdsb2JhbFN0YXRlKSB7XG4gICAgICAgIGlmICgtLWdldEdsb2JhbCgpLl9fbW9ieEluc3RhbmNlQ291bnQgPT09IDApXG4gICAgICAgICAgICBnZXRHbG9iYWwoKS5fX21vYnhHbG9iYWxzID0gdW5kZWZpbmVkO1xuICAgICAgICBnbG9iYWxTdGF0ZSA9IG5ldyBNb2JYR2xvYmFscygpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEdsb2JhbFN0YXRlKCkge1xuICAgIHJldHVybiBnbG9iYWxTdGF0ZTtcbn1cbi8qKlxuICogRm9yIHRlc3RpbmcgcHVycG9zZXMgb25seTsgdGhpcyB3aWxsIGJyZWFrIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiBleGlzdGluZyBvYnNlcnZhYmxlcyxcbiAqIGJ1dCBjYW4gYmUgdXNlZCB0byBnZXQgYmFjayBhdCBhIHN0YWJsZSBzdGF0ZSBhZnRlciB0aHJvd2luZyBlcnJvcnNcbiAqL1xuZnVuY3Rpb24gcmVzZXRHbG9iYWxTdGF0ZSgpIHtcbiAgICB2YXIgZGVmYXVsdEdsb2JhbHMgPSBuZXcgTW9iWEdsb2JhbHMoKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGVmYXVsdEdsb2JhbHMpXG4gICAgICAgIGlmIChwZXJzaXN0ZW50S2V5cy5pbmRleE9mKGtleSkgPT09IC0xKVxuICAgICAgICAgICAgZ2xvYmFsU3RhdGVba2V5XSA9IGRlZmF1bHRHbG9iYWxzW2tleV07XG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgPSAhZ2xvYmFsU3RhdGUuZW5mb3JjZUFjdGlvbnM7XG59XG52YXIgbW9ja0dsb2JhbCA9IHt9O1xuZnVuY3Rpb24gZ2V0R2xvYmFsKCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgfVxuICAgIHJldHVybiBtb2NrR2xvYmFsO1xufVxuXG5mdW5jdGlvbiBoYXNPYnNlcnZlcnMob2JzZXJ2YWJsZSkge1xuICAgIHJldHVybiBvYnNlcnZhYmxlLm9ic2VydmVycyAmJiBvYnNlcnZhYmxlLm9ic2VydmVycy5zaXplID4gMDtcbn1cbmZ1bmN0aW9uIGdldE9ic2VydmVycyhvYnNlcnZhYmxlKSB7XG4gICAgcmV0dXJuIG9ic2VydmFibGUub2JzZXJ2ZXJzO1xufVxuLy8gZnVuY3Rpb24gaW52YXJpYW50T2JzZXJ2ZXJzKG9ic2VydmFibGU6IElPYnNlcnZhYmxlKSB7XG4vLyAgICAgY29uc3QgbGlzdCA9IG9ic2VydmFibGUub2JzZXJ2ZXJzXG4vLyAgICAgY29uc3QgbWFwID0gb2JzZXJ2YWJsZS5vYnNlcnZlcnNJbmRleGVzXG4vLyAgICAgY29uc3QgbCA9IGxpc3QubGVuZ3RoXG4vLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbi8vICAgICAgICAgY29uc3QgaWQgPSBsaXN0W2ldLl9fbWFwaWRcbi8vICAgICAgICAgaWYgKGkpIHtcbi8vICAgICAgICAgICAgIGludmFyaWFudChtYXBbaWRdID09PSBpLCBcIklOVEVSTkFMIEVSUk9SIG1hcHMgZGVyaXZhdGlvbi5fX21hcGlkIHRvIGluZGV4IGluIGxpc3RcIikgLy8gZm9yIHBlcmZvcm1hbmNlXG4vLyAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICBpbnZhcmlhbnQoIShpZCBpbiBtYXApLCBcIklOVEVSTkFMIEVSUk9SIG9ic2VydmVyIG9uIGluZGV4IDAgc2hvdWxkbid0IGJlIGhlbGQgaW4gbWFwLlwiKSAvLyBmb3IgcGVyZm9ybWFuY2Vcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vICAgICBpbnZhcmlhbnQoXG4vLyAgICAgICAgIGxpc3QubGVuZ3RoID09PSAwIHx8IE9iamVjdC5rZXlzKG1hcCkubGVuZ3RoID09PSBsaXN0Lmxlbmd0aCAtIDEsXG4vLyAgICAgICAgIFwiSU5URVJOQUwgRVJST1IgdGhlcmUgaXMgbm8ganVuayBpbiBtYXBcIlxuLy8gICAgIClcbi8vIH1cbmZ1bmN0aW9uIGFkZE9ic2VydmVyKG9ic2VydmFibGUsIG5vZGUpIHtcbiAgICAvLyBpbnZhcmlhbnQobm9kZS5kZXBlbmRlbmNpZXNTdGF0ZSAhPT0gLTEsIFwiSU5URVJOQUwgRVJST1IsIGNhbiBhZGQgb25seSBkZXBlbmRlbmNpZXNTdGF0ZSAhPT0gLTFcIik7XG4gICAgLy8gaW52YXJpYW50KG9ic2VydmFibGUuX29ic2VydmVycy5pbmRleE9mKG5vZGUpID09PSAtMSwgXCJJTlRFUk5BTCBFUlJPUiBhZGQgYWxyZWFkeSBhZGRlZCBub2RlXCIpO1xuICAgIC8vIGludmFyaWFudE9ic2VydmVycyhvYnNlcnZhYmxlKTtcbiAgICBvYnNlcnZhYmxlLm9ic2VydmVycy5hZGQobm9kZSk7XG4gICAgaWYgKG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZSA+IG5vZGUuZGVwZW5kZW5jaWVzU3RhdGUpXG4gICAgICAgIG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZSA9IG5vZGUuZGVwZW5kZW5jaWVzU3RhdGU7XG4gICAgLy8gaW52YXJpYW50T2JzZXJ2ZXJzKG9ic2VydmFibGUpO1xuICAgIC8vIGludmFyaWFudChvYnNlcnZhYmxlLl9vYnNlcnZlcnMuaW5kZXhPZihub2RlKSAhPT0gLTEsIFwiSU5URVJOQUwgRVJST1IgZGlkbid0IGFkZCBub2RlXCIpO1xufVxuZnVuY3Rpb24gcmVtb3ZlT2JzZXJ2ZXIob2JzZXJ2YWJsZSwgbm9kZSkge1xuICAgIC8vIGludmFyaWFudChnbG9iYWxTdGF0ZS5pbkJhdGNoID4gMCwgXCJJTlRFUk5BTCBFUlJPUiwgcmVtb3ZlIHNob3VsZCBiZSBjYWxsZWQgb25seSBpbnNpZGUgYmF0Y2hcIik7XG4gICAgLy8gaW52YXJpYW50KG9ic2VydmFibGUuX29ic2VydmVycy5pbmRleE9mKG5vZGUpICE9PSAtMSwgXCJJTlRFUk5BTCBFUlJPUiByZW1vdmUgYWxyZWFkeSByZW1vdmVkIG5vZGVcIik7XG4gICAgLy8gaW52YXJpYW50T2JzZXJ2ZXJzKG9ic2VydmFibGUpO1xuICAgIG9ic2VydmFibGUub2JzZXJ2ZXJzLmRlbGV0ZShub2RlKTtcbiAgICBpZiAob2JzZXJ2YWJsZS5vYnNlcnZlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAvLyBkZWxldGluZyBsYXN0IG9ic2VydmVyXG4gICAgICAgIHF1ZXVlRm9yVW5vYnNlcnZhdGlvbihvYnNlcnZhYmxlKTtcbiAgICB9XG4gICAgLy8gaW52YXJpYW50T2JzZXJ2ZXJzKG9ic2VydmFibGUpO1xuICAgIC8vIGludmFyaWFudChvYnNlcnZhYmxlLl9vYnNlcnZlcnMuaW5kZXhPZihub2RlKSA9PT0gLTEsIFwiSU5URVJOQUwgRVJST1IgcmVtb3ZlIGFscmVhZHkgcmVtb3ZlZCBub2RlMlwiKTtcbn1cbmZ1bmN0aW9uIHF1ZXVlRm9yVW5vYnNlcnZhdGlvbihvYnNlcnZhYmxlKSB7XG4gICAgaWYgKG9ic2VydmFibGUuaXNQZW5kaW5nVW5vYnNlcnZhdGlvbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgLy8gaW52YXJpYW50KG9ic2VydmFibGUuX29ic2VydmVycy5sZW5ndGggPT09IDAsIFwiSU5URVJOQUwgRVJST1IsIHNob3VsZCBvbmx5IHF1ZXVlIGZvciB1bm9ic2VydmF0aW9uIHVub2JzZXJ2ZWQgb2JzZXJ2YWJsZXNcIik7XG4gICAgICAgIG9ic2VydmFibGUuaXNQZW5kaW5nVW5vYnNlcnZhdGlvbiA9IHRydWU7XG4gICAgICAgIGdsb2JhbFN0YXRlLnBlbmRpbmdVbm9ic2VydmF0aW9ucy5wdXNoKG9ic2VydmFibGUpO1xuICAgIH1cbn1cbi8qKlxuICogQmF0Y2ggc3RhcnRzIGEgdHJhbnNhY3Rpb24sIGF0IGxlYXN0IGZvciBwdXJwb3NlcyBvZiBtZW1vaXppbmcgQ29tcHV0ZWRWYWx1ZXMgd2hlbiBub3RoaW5nIGVsc2UgZG9lcy5cbiAqIER1cmluZyBhIGJhdGNoIGBvbkJlY29tZVVub2JzZXJ2ZWRgIHdpbGwgYmUgY2FsbGVkIGF0IG1vc3Qgb25jZSBwZXIgb2JzZXJ2YWJsZS5cbiAqIEF2b2lkcyB1bm5lY2Vzc2FyeSByZWNhbGN1bGF0aW9ucy5cbiAqL1xuZnVuY3Rpb24gc3RhcnRCYXRjaCgpIHtcbiAgICBnbG9iYWxTdGF0ZS5pbkJhdGNoKys7XG59XG5mdW5jdGlvbiBlbmRCYXRjaCgpIHtcbiAgICBpZiAoLS1nbG9iYWxTdGF0ZS5pbkJhdGNoID09PSAwKSB7XG4gICAgICAgIHJ1blJlYWN0aW9ucygpO1xuICAgICAgICAvLyB0aGUgYmF0Y2ggaXMgYWN0dWFsbHkgYWJvdXQgdG8gZmluaXNoLCBhbGwgdW5vYnNlcnZpbmcgc2hvdWxkIGhhcHBlbiBoZXJlLlxuICAgICAgICB2YXIgbGlzdCA9IGdsb2JhbFN0YXRlLnBlbmRpbmdVbm9ic2VydmF0aW9ucztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IGxpc3RbaV07XG4gICAgICAgICAgICBvYnNlcnZhYmxlLmlzUGVuZGluZ1Vub2JzZXJ2YXRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlLm9ic2VydmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9ic2VydmFibGUuaXNCZWluZ09ic2VydmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgb2JzZXJ2YWJsZSBoYWQgcmVhY3RpdmUgb2JzZXJ2ZXJzLCB0cmlnZ2VyIHRoZSBob29rc1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLmlzQmVpbmdPYnNlcnZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLm9uQmVjb21lVW5vYnNlcnZlZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob2JzZXJ2YWJsZSBpbnN0YW5jZW9mIENvbXB1dGVkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcHV0ZWQgdmFsdWVzIGFyZSBhdXRvbWF0aWNhbGx5IHRlYXJlZCBkb3duIHdoZW4gdGhlIGxhc3Qgb2JzZXJ2ZXIgbGVhdmVzXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgcHJvY2VzcyBoYXBwZW5zIHJlY3Vyc2l2ZWx5LCB0aGlzIGNvbXB1dGVkIG1pZ2h0IGJlIHRoZSBsYXN0IG9ic2VydmFiZSBvZiBhbm90aGVyLCBldGMuLlxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLnN1c3BlbmQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2xvYmFsU3RhdGUucGVuZGluZ1Vub2JzZXJ2YXRpb25zID0gW107XG4gICAgfVxufVxuZnVuY3Rpb24gcmVwb3J0T2JzZXJ2ZWQob2JzZXJ2YWJsZSkge1xuICAgIGNoZWNrSWZTdGF0ZVJlYWRzQXJlQWxsb3dlZChvYnNlcnZhYmxlKTtcbiAgICB2YXIgZGVyaXZhdGlvbiA9IGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbjtcbiAgICBpZiAoZGVyaXZhdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2ltcGxlIG9wdGltaXphdGlvbiwgZ2l2ZSBlYWNoIGRlcml2YXRpb24gcnVuIGFuIHVuaXF1ZSBpZCAocnVuSWQpXG4gICAgICAgICAqIENoZWNrIGlmIGxhc3QgdGltZSB0aGlzIG9ic2VydmFibGUgd2FzIGFjY2Vzc2VkIHRoZSBzYW1lIHJ1bklkIGlzIHVzZWRcbiAgICAgICAgICogaWYgdGhpcyBpcyB0aGUgY2FzZSwgdGhlIHJlbGF0aW9uIGlzIGFscmVhZHkga25vd25cbiAgICAgICAgICovXG4gICAgICAgIGlmIChkZXJpdmF0aW9uLnJ1bklkICE9PSBvYnNlcnZhYmxlLmxhc3RBY2Nlc3NlZEJ5KSB7XG4gICAgICAgICAgICBvYnNlcnZhYmxlLmxhc3RBY2Nlc3NlZEJ5ID0gZGVyaXZhdGlvbi5ydW5JZDtcbiAgICAgICAgICAgIC8vIFRyaWVkIHN0b3JpbmcgbmV3T2JzZXJ2aW5nLCBvciBvYnNlcnZpbmcsIG9yIGJvdGggYXMgU2V0LCBidXQgcGVyZm9ybWFuY2UgZGlkbid0IGNvbWUgY2xvc2UuLi5cbiAgICAgICAgICAgIGRlcml2YXRpb24ubmV3T2JzZXJ2aW5nW2Rlcml2YXRpb24udW5ib3VuZERlcHNDb3VudCsrXSA9IG9ic2VydmFibGU7XG4gICAgICAgICAgICBpZiAoIW9ic2VydmFibGUuaXNCZWluZ09ic2VydmVkKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5pc0JlaW5nT2JzZXJ2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIG9ic2VydmFibGUub25CZWNvbWVPYnNlcnZlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChvYnNlcnZhYmxlLm9ic2VydmVycy5zaXplID09PSAwICYmIGdsb2JhbFN0YXRlLmluQmF0Y2ggPiAwKSB7XG4gICAgICAgIHF1ZXVlRm9yVW5vYnNlcnZhdGlvbihvYnNlcnZhYmxlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLy8gZnVuY3Rpb24gaW52YXJpYW50TE9TKG9ic2VydmFibGU6IElPYnNlcnZhYmxlLCBtc2c6IHN0cmluZykge1xuLy8gICAgIC8vIGl0J3MgZXhwZW5zaXZlIHNvIGJldHRlciBub3QgcnVuIGl0IGluIHByb2R1Y2l0b24uIGJ1dCB0ZW1wb3JhcmlseSBoZWxwZnVsIGZvciB0ZXN0aW5nXG4vLyAgICAgY29uc3QgbWluID0gZ2V0T2JzZXJ2ZXJzKG9ic2VydmFibGUpLnJlZHVjZSgoYSwgYikgPT4gTWF0aC5taW4oYSwgYi5kZXBlbmRlbmNpZXNTdGF0ZSksIDIpXG4vLyAgICAgaWYgKG1pbiA+PSBvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGUpIHJldHVybiAvLyA8LSB0aGUgb25seSBhc3N1bXB0aW9uIGFib3V0IGBsb3dlc3RPYnNlcnZlclN0YXRlYFxuLy8gICAgIHRocm93IG5ldyBFcnJvcihcbi8vICAgICAgICAgXCJsb3dlc3RPYnNlcnZlclN0YXRlIGlzIHdyb25nIGZvciBcIiArXG4vLyAgICAgICAgICAgICBtc2cgK1xuLy8gICAgICAgICAgICAgXCIgYmVjYXVzZSBcIiArXG4vLyAgICAgICAgICAgICBtaW4gK1xuLy8gICAgICAgICAgICAgXCIgPCBcIiArXG4vLyAgICAgICAgICAgICBvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGVcbi8vICAgICApXG4vLyB9XG4vKipcbiAqIE5PVEU6IGN1cnJlbnQgcHJvcGFnYXRpb24gbWVjaGFuaXNtIHdpbGwgaW4gY2FzZSBvZiBzZWxmIHJlcnVuaW5nIGF1dG9ydW5zIGJlaGF2ZSB1bmV4cGVjdGVkbHlcbiAqIEl0IHdpbGwgcHJvcGFnYXRlIGNoYW5nZXMgdG8gb2JzZXJ2ZXJzIGZyb20gcHJldmlvdXMgcnVuXG4gKiBJdCdzIGhhcmQgb3IgbWF5YmUgaW1wb3NzaWJsZSAod2l0aCByZWFzb25hYmxlIHBlcmYpIHRvIGdldCBpdCByaWdodCB3aXRoIGN1cnJlbnQgYXBwcm9hY2hcbiAqIEhvcGVmdWxseSBzZWxmIHJlcnVuaW5nIGF1dG9ydW5zIGFyZW4ndCBhIGZlYXR1cmUgcGVvcGxlIHNob3VsZCBkZXBlbmQgb25cbiAqIEFsc28gbW9zdCBiYXNpYyB1c2UgY2FzZXMgc2hvdWxkIGJlIG9rXG4gKi9cbi8vIENhbGxlZCBieSBBdG9tIHdoZW4gaXRzIHZhbHVlIGNoYW5nZXNcbmZ1bmN0aW9uIHByb3BhZ2F0ZUNoYW5nZWQob2JzZXJ2YWJsZSkge1xuICAgIC8vIGludmFyaWFudExPUyhvYnNlcnZhYmxlLCBcImNoYW5nZWQgc3RhcnRcIik7XG4gICAgaWYgKG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5TVEFMRSlcbiAgICAgICAgcmV0dXJuO1xuICAgIG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuU1RBTEU7XG4gICAgLy8gSWRlYWxseSB3ZSB1c2UgZm9yLi5vZiBoZXJlLCBidXQgdGhlIGRvd25jb21waWxlZCB2ZXJzaW9uIGlzIHJlYWxseSBzbG93Li4uXG4gICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgICBpZiAoZC5kZXBlbmRlbmNpZXNTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5VUF9UT19EQVRFKSB7XG4gICAgICAgICAgICBpZiAoZC5pc1RyYWNpbmcgIT09IFRyYWNlTW9kZS5OT05FKSB7XG4gICAgICAgICAgICAgICAgbG9nVHJhY2VJbmZvKGQsIG9ic2VydmFibGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZC5vbkJlY29tZVN0YWxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZC5kZXBlbmRlbmNpZXNTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuU1RBTEU7XG4gICAgfSk7XG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwiY2hhbmdlZCBlbmRcIik7XG59XG4vLyBDYWxsZWQgYnkgQ29tcHV0ZWRWYWx1ZSB3aGVuIGl0IHJlY2FsY3VsYXRlIGFuZCBpdHMgdmFsdWUgY2hhbmdlZFxuZnVuY3Rpb24gcHJvcGFnYXRlQ2hhbmdlQ29uZmlybWVkKG9ic2VydmFibGUpIHtcbiAgICAvLyBpbnZhcmlhbnRMT1Mob2JzZXJ2YWJsZSwgXCJjb25maXJtZWQgc3RhcnRcIik7XG4gICAgaWYgKG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5TVEFMRSlcbiAgICAgICAgcmV0dXJuO1xuICAgIG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuU1RBTEU7XG4gICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgICBpZiAoZC5kZXBlbmRlbmNpZXNTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5QT1NTSUJMWV9TVEFMRSlcbiAgICAgICAgICAgIGQuZGVwZW5kZW5jaWVzU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLlNUQUxFO1xuICAgICAgICBlbHNlIGlmIChkLmRlcGVuZGVuY2llc1N0YXRlID09PSBJRGVyaXZhdGlvblN0YXRlLlVQX1RPX0RBVEUgLy8gdGhpcyBoYXBwZW5zIGR1cmluZyBjb21wdXRpbmcgb2YgYGRgLCBqdXN0IGtlZXAgbG93ZXN0T2JzZXJ2ZXJTdGF0ZSB1cCB0byBkYXRlLlxuICAgICAgICApXG4gICAgICAgICAgICBvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLlVQX1RPX0RBVEU7XG4gICAgfSk7XG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwiY29uZmlybWVkIGVuZFwiKTtcbn1cbi8vIFVzZWQgYnkgY29tcHV0ZWQgd2hlbiBpdHMgZGVwZW5kZW5jeSBjaGFuZ2VkLCBidXQgd2UgZG9uJ3Qgd2FuJ3QgdG8gaW1tZWRpYXRlbHkgcmVjb21wdXRlLlxuZnVuY3Rpb24gcHJvcGFnYXRlTWF5YmVDaGFuZ2VkKG9ic2VydmFibGUpIHtcbiAgICAvLyBpbnZhcmlhbnRMT1Mob2JzZXJ2YWJsZSwgXCJtYXliZSBzdGFydFwiKTtcbiAgICBpZiAob2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlICE9PSBJRGVyaXZhdGlvblN0YXRlLlVQX1RPX0RBVEUpXG4gICAgICAgIHJldHVybjtcbiAgICBvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLlBPU1NJQkxZX1NUQUxFO1xuICAgIG9ic2VydmFibGUub2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgaWYgKGQuZGVwZW5kZW5jaWVzU3RhdGUgPT09IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURSkge1xuICAgICAgICAgICAgZC5kZXBlbmRlbmNpZXNTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuUE9TU0lCTFlfU1RBTEU7XG4gICAgICAgICAgICBpZiAoZC5pc1RyYWNpbmcgIT09IFRyYWNlTW9kZS5OT05FKSB7XG4gICAgICAgICAgICAgICAgbG9nVHJhY2VJbmZvKGQsIG9ic2VydmFibGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZC5vbkJlY29tZVN0YWxlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBpbnZhcmlhbnRMT1Mob2JzZXJ2YWJsZSwgXCJtYXliZSBlbmRcIik7XG59XG5mdW5jdGlvbiBsb2dUcmFjZUluZm8oZGVyaXZhdGlvbiwgb2JzZXJ2YWJsZSkge1xuICAgIGNvbnNvbGUubG9nKFwiW21vYngudHJhY2VdICdcIiArIGRlcml2YXRpb24ubmFtZSArIFwiJyBpcyBpbnZhbGlkYXRlZCBkdWUgdG8gYSBjaGFuZ2UgaW46ICdcIiArIG9ic2VydmFibGUubmFtZSArIFwiJ1wiKTtcbiAgICBpZiAoZGVyaXZhdGlvbi5pc1RyYWNpbmcgPT09IFRyYWNlTW9kZS5CUkVBSykge1xuICAgICAgICB2YXIgbGluZXMgPSBbXTtcbiAgICAgICAgcHJpbnREZXBUcmVlKGdldERlcGVuZGVuY3lUcmVlKGRlcml2YXRpb24pLCBsaW5lcywgMSk7XG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICBuZXcgRnVuY3Rpb24oXCJkZWJ1Z2dlcjtcXG4vKlxcblRyYWNpbmcgJ1wiICsgZGVyaXZhdGlvbi5uYW1lICsgXCInXFxuXFxuWW91IGFyZSBlbnRlcmluZyB0aGlzIGJyZWFrIHBvaW50IGJlY2F1c2UgZGVyaXZhdGlvbiAnXCIgKyBkZXJpdmF0aW9uLm5hbWUgKyBcIicgaXMgYmVpbmcgdHJhY2VkIGFuZCAnXCIgKyBvYnNlcnZhYmxlLm5hbWUgKyBcIicgaXMgbm93IGZvcmNpbmcgaXQgdG8gdXBkYXRlLlxcbkp1c3QgZm9sbG93IHRoZSBzdGFja3RyYWNlIHlvdSBzaG91bGQgbm93IHNlZSBpbiB0aGUgZGV2dG9vbHMgdG8gc2VlIHByZWNpc2VseSB3aGF0IHBpZWNlIG9mIHlvdXIgY29kZSBpcyBjYXVzaW5nIHRoaXMgdXBkYXRlXFxuVGhlIHN0YWNrZnJhbWUgeW91IGFyZSBsb29raW5nIGZvciBpcyBhdCBsZWFzdCB+Ni04IHN0YWNrLWZyYW1lcyB1cC5cXG5cXG5cIiArIChkZXJpdmF0aW9uIGluc3RhbmNlb2YgQ29tcHV0ZWRWYWx1ZSA/IGRlcml2YXRpb24uZGVyaXZhdGlvbi50b1N0cmluZygpLnJlcGxhY2UoL1sqXVxcLy9nLCBcIi9cIikgOiBcIlwiKSArIFwiXFxuXFxuVGhlIGRlcGVuZGVuY2llcyBmb3IgdGhpcyBkZXJpdmF0aW9uIGFyZTpcXG5cXG5cIiArIGxpbmVzLmpvaW4oXCJcXG5cIikgKyBcIlxcbiovXFxuICAgIFwiKSgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHByaW50RGVwVHJlZSh0cmVlLCBsaW5lcywgZGVwdGgpIHtcbiAgICBpZiAobGluZXMubGVuZ3RoID49IDEwMDApIHtcbiAgICAgICAgbGluZXMucHVzaChcIihhbmQgbWFueSBtb3JlKVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsaW5lcy5wdXNoKFwiXCIgKyBuZXcgQXJyYXkoZGVwdGgpLmpvaW4oXCJcXHRcIikgKyB0cmVlLm5hbWUpOyAvLyBNV0U6IG5vdCB0aGUgZmFzdGVzdCwgYnV0IHRoZSBlYXNpZXN0IHdheSA6KVxuICAgIGlmICh0cmVlLmRlcGVuZGVuY2llcylcbiAgICAgICAgdHJlZS5kZXBlbmRlbmNpZXMuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIHByaW50RGVwVHJlZShjaGlsZCwgbGluZXMsIGRlcHRoICsgMSk7IH0pO1xufVxuXG52YXIgUmVhY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVhY3Rpb24obmFtZSwgb25JbnZhbGlkYXRlLCBlcnJvckhhbmRsZXIsIHJlcXVpcmVzT2JzZXJ2YWJsZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7IG5hbWUgPSBcIlJlYWN0aW9uQFwiICsgZ2V0TmV4dElkKCk7IH1cbiAgICAgICAgaWYgKHJlcXVpcmVzT2JzZXJ2YWJsZSA9PT0gdm9pZCAwKSB7IHJlcXVpcmVzT2JzZXJ2YWJsZSA9IGZhbHNlOyB9XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMub25JbnZhbGlkYXRlID0gb25JbnZhbGlkYXRlO1xuICAgICAgICB0aGlzLmVycm9ySGFuZGxlciA9IGVycm9ySGFuZGxlcjtcbiAgICAgICAgdGhpcy5yZXF1aXJlc09ic2VydmFibGUgPSByZXF1aXJlc09ic2VydmFibGU7XG4gICAgICAgIHRoaXMub2JzZXJ2aW5nID0gW107IC8vIG5vZGVzIHdlIGFyZSBsb29raW5nIGF0LiBPdXIgdmFsdWUgZGVwZW5kcyBvbiB0aGVzZSBub2Rlc1xuICAgICAgICB0aGlzLm5ld09ic2VydmluZyA9IFtdO1xuICAgICAgICB0aGlzLmRlcGVuZGVuY2llc1N0YXRlID0gSURlcml2YXRpb25TdGF0ZS5OT1RfVFJBQ0tJTkc7XG4gICAgICAgIHRoaXMuZGlmZlZhbHVlID0gMDtcbiAgICAgICAgdGhpcy5ydW5JZCA9IDA7XG4gICAgICAgIHRoaXMudW5ib3VuZERlcHNDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuX19tYXBpZCA9IFwiI1wiICsgZ2V0TmV4dElkKCk7XG4gICAgICAgIHRoaXMuaXNEaXNwb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc1NjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc1RyYWNrUGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc1J1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1RyYWNpbmcgPSBUcmFjZU1vZGUuTk9ORTtcbiAgICB9XG4gICAgUmVhY3Rpb24ucHJvdG90eXBlLm9uQmVjb21lU3RhbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICB9O1xuICAgIFJlYWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1NjaGVkdWxlZCkge1xuICAgICAgICAgICAgdGhpcy5faXNTY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgICAgZ2xvYmFsU3RhdGUucGVuZGluZ1JlYWN0aW9ucy5wdXNoKHRoaXMpO1xuICAgICAgICAgICAgcnVuUmVhY3Rpb25zKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlYWN0aW9uLnByb3RvdHlwZS5pc1NjaGVkdWxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzU2NoZWR1bGVkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogaW50ZXJuYWwsIHVzZSBzY2hlZHVsZSgpIGlmIHlvdSBpbnRlbmQgdG8ga2ljayBvZmYgYSByZWFjdGlvblxuICAgICAqL1xuICAgIFJlYWN0aW9uLnByb3RvdHlwZS5ydW5SZWFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHN0YXJ0QmF0Y2goKTtcbiAgICAgICAgICAgIHRoaXMuX2lzU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoc2hvdWxkQ29tcHV0ZSh0aGlzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzVHJhY2tQZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uSW52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNUcmFja1BlbmRpbmcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU3B5RW5hYmxlZCgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9uSW52YWxpZGF0ZSBkaWRuJ3QgdHJpZ2dlciB0cmFjayByaWdodCBhd2F5Li5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNweVJlcG9ydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic2NoZWR1bGVkLXJlYWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVwb3J0RXhjZXB0aW9uSW5EZXJpdmF0aW9uKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVuZEJhdGNoKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlYWN0aW9uLnByb3RvdHlwZS50cmFjayA9IGZ1bmN0aW9uIChmbikge1xuICAgICAgICBpZiAodGhpcy5pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oXCJSZWFjdGlvbiBhbHJlYWR5IGRpc3Bvc2VkXCIpIC8vIE5vdGU6IE5vdCBhIHdhcm5pbmcgLyBlcnJvciBpbiBtb2J4IDQgZWl0aGVyXG4gICAgICAgIH1cbiAgICAgICAgc3RhcnRCYXRjaCgpO1xuICAgICAgICB2YXIgbm90aWZ5ID0gaXNTcHlFbmFibGVkKCk7XG4gICAgICAgIHZhciBzdGFydFRpbWU7XG4gICAgICAgIGlmIChub3RpZnkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoe1xuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICB0eXBlOiBcInJlYWN0aW9uXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzUnVubmluZyA9IHRydWU7XG4gICAgICAgIHZhciByZXN1bHQgPSB0cmFja0Rlcml2ZWRGdW5jdGlvbih0aGlzLCBmbiwgdW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5faXNSdW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzVHJhY2tQZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmlzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIC8vIGRpc3Bvc2VkIGR1cmluZyBsYXN0IHJ1bi4gQ2xlYW4gdXAgZXZlcnl0aGluZyB0aGF0IHdhcyBib3VuZCBhZnRlciB0aGUgZGlzcG9zZSBjYWxsLlxuICAgICAgICAgICAgY2xlYXJPYnNlcnZpbmcodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ2F1Z2h0RXhjZXB0aW9uKHJlc3VsdCkpXG4gICAgICAgICAgICB0aGlzLnJlcG9ydEV4Y2VwdGlvbkluRGVyaXZhdGlvbihyZXN1bHQuY2F1c2UpO1xuICAgICAgICBpZiAobm90aWZ5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgc3B5UmVwb3J0RW5kKHtcbiAgICAgICAgICAgICAgICB0aW1lOiBEYXRlLm5vdygpIC0gc3RhcnRUaW1lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbmRCYXRjaCgpO1xuICAgIH07XG4gICAgUmVhY3Rpb24ucHJvdG90eXBlLnJlcG9ydEV4Y2VwdGlvbkluRGVyaXZhdGlvbiA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5lcnJvckhhbmRsZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyKGVycm9yLCB0aGlzKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2xvYmFsU3RhdGUuZGlzYWJsZUVycm9yQm91bmRhcmllcylcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB2YXIgbWVzc2FnZSA9IFwiW21vYnhdIEVuY291bnRlcmVkIGFuIHVuY2F1Z2h0IGV4Y2VwdGlvbiB0aGF0IHdhcyB0aHJvd24gYnkgYSByZWFjdGlvbiBvciBvYnNlcnZlciBjb21wb25lbnQsIGluOiAnXCIgKyB0aGlzICsgXCInXCI7XG4gICAgICAgIGlmIChnbG9iYWxTdGF0ZS5zdXBwcmVzc1JlYWN0aW9uRXJyb3JzKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJbbW9ieF0gKGVycm9yIGluIHJlYWN0aW9uICdcIiArIHRoaXMubmFtZSArIFwiJyBzdXBwcmVzc2VkLCBmaXggZXJyb3Igb2YgY2F1c2luZyBhY3Rpb24gYmVsb3cpXCIpOyAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgZXJyb3IpO1xuICAgICAgICAgICAgLyoqIElmIGRlYnVnZ2luZyBicm91Z2h0IHlvdSBoZXJlLCBwbGVhc2UsIHJlYWQgdGhlIGFib3ZlIG1lc3NhZ2UgOi0pLiBUbnghICovXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3B5RW5hYmxlZCgpKSB7XG4gICAgICAgICAgICBzcHlSZXBvcnQoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogXCJcIiArIGVycm9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBnbG9iYWxTdGF0ZS5nbG9iYWxSZWFjdGlvbkVycm9ySGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoZikgeyByZXR1cm4gZihlcnJvciwgX3RoaXMpOyB9KTtcbiAgICB9O1xuICAgIFJlYWN0aW9uLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5pc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghdGhpcy5faXNSdW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgZGlzcG9zZWQgd2hpbGUgcnVubmluZywgY2xlYW4gdXAgbGF0ZXIuIE1heWJlIG5vdCBvcHRpbWFsLCBidXQgcmFyZSBjYXNlXG4gICAgICAgICAgICAgICAgc3RhcnRCYXRjaCgpO1xuICAgICAgICAgICAgICAgIGNsZWFyT2JzZXJ2aW5nKHRoaXMpO1xuICAgICAgICAgICAgICAgIGVuZEJhdGNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlYWN0aW9uLnByb3RvdHlwZS5nZXREaXNwb3NlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLmRpc3Bvc2UuYmluZCh0aGlzKTtcbiAgICAgICAgclskbW9ieF0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuICAgIFJlYWN0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwiUmVhY3Rpb25bXCIgKyB0aGlzLm5hbWUgKyBcIl1cIjtcbiAgICB9O1xuICAgIFJlYWN0aW9uLnByb3RvdHlwZS50cmFjZSA9IGZ1bmN0aW9uIChlbnRlckJyZWFrUG9pbnQpIHtcbiAgICAgICAgaWYgKGVudGVyQnJlYWtQb2ludCA9PT0gdm9pZCAwKSB7IGVudGVyQnJlYWtQb2ludCA9IGZhbHNlOyB9XG4gICAgICAgIHRyYWNlKHRoaXMsIGVudGVyQnJlYWtQb2ludCk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVhY3Rpb247XG59KCkpO1xuZnVuY3Rpb24gb25SZWFjdGlvbkVycm9yKGhhbmRsZXIpIHtcbiAgICBnbG9iYWxTdGF0ZS5nbG9iYWxSZWFjdGlvbkVycm9ySGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaWR4ID0gZ2xvYmFsU3RhdGUuZ2xvYmFsUmVhY3Rpb25FcnJvckhhbmRsZXJzLmluZGV4T2YoaGFuZGxlcik7XG4gICAgICAgIGlmIChpZHggPj0gMClcbiAgICAgICAgICAgIGdsb2JhbFN0YXRlLmdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiAgICB9O1xufVxuLyoqXG4gKiBNYWdpYyBudW1iZXIgYWxlcnQhXG4gKiBEZWZpbmVzIHdpdGhpbiBob3cgbWFueSB0aW1lcyBhIHJlYWN0aW9uIGlzIGFsbG93ZWQgdG8gcmUtdHJpZ2dlciBpdHNlbGZcbiAqIHVudGlsIGl0IGlzIGFzc3VtZWQgdGhhdCB0aGlzIGlzIGdvbm5hIGJlIGEgbmV2ZXIgZW5kaW5nIGxvb3AuLi5cbiAqL1xudmFyIE1BWF9SRUFDVElPTl9JVEVSQVRJT05TID0gMTAwO1xudmFyIHJlYWN0aW9uU2NoZWR1bGVyID0gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYoKTsgfTtcbmZ1bmN0aW9uIHJ1blJlYWN0aW9ucygpIHtcbiAgICAvLyBUcmFtcG9saW5pbmcsIGlmIHJ1blJlYWN0aW9ucyBhcmUgYWxyZWFkeSBydW5uaW5nLCBuZXcgcmVhY3Rpb25zIHdpbGwgYmUgcGlja2VkIHVwXG4gICAgaWYgKGdsb2JhbFN0YXRlLmluQmF0Y2ggPiAwIHx8IGdsb2JhbFN0YXRlLmlzUnVubmluZ1JlYWN0aW9ucylcbiAgICAgICAgcmV0dXJuO1xuICAgIHJlYWN0aW9uU2NoZWR1bGVyKHJ1blJlYWN0aW9uc0hlbHBlcik7XG59XG5mdW5jdGlvbiBydW5SZWFjdGlvbnNIZWxwZXIoKSB7XG4gICAgZ2xvYmFsU3RhdGUuaXNSdW5uaW5nUmVhY3Rpb25zID0gdHJ1ZTtcbiAgICB2YXIgYWxsUmVhY3Rpb25zID0gZ2xvYmFsU3RhdGUucGVuZGluZ1JlYWN0aW9ucztcbiAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgLy8gV2hpbGUgcnVubmluZyByZWFjdGlvbnMsIG5ldyByZWFjdGlvbnMgbWlnaHQgYmUgdHJpZ2dlcmVkLlxuICAgIC8vIEhlbmNlIHdlIHdvcmsgd2l0aCB0d28gdmFyaWFibGVzIGFuZCBjaGVjayB3aGV0aGVyXG4gICAgLy8gd2UgY29udmVyZ2UgdG8gbm8gcmVtYWluaW5nIHJlYWN0aW9ucyBhZnRlciBhIHdoaWxlLlxuICAgIHdoaWxlIChhbGxSZWFjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoKytpdGVyYXRpb25zID09PSBNQVhfUkVBQ1RJT05fSVRFUkFUSU9OUykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlJlYWN0aW9uIGRvZXNuJ3QgY29udmVyZ2UgdG8gYSBzdGFibGUgc3RhdGUgYWZ0ZXIgXCIgKyBNQVhfUkVBQ1RJT05fSVRFUkFUSU9OUyArIFwiIGl0ZXJhdGlvbnMuXCIgK1xuICAgICAgICAgICAgICAgIChcIiBQcm9iYWJseSB0aGVyZSBpcyBhIGN5Y2xlIGluIHRoZSByZWFjdGl2ZSBmdW5jdGlvbjogXCIgKyBhbGxSZWFjdGlvbnNbMF0pKTtcbiAgICAgICAgICAgIGFsbFJlYWN0aW9ucy5zcGxpY2UoMCk7IC8vIGNsZWFyIHJlYWN0aW9uc1xuICAgICAgICB9XG4gICAgICAgIHZhciByZW1haW5pbmdSZWFjdGlvbnMgPSBhbGxSZWFjdGlvbnMuc3BsaWNlKDApO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHJlbWFpbmluZ1JlYWN0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspXG4gICAgICAgICAgICByZW1haW5pbmdSZWFjdGlvbnNbaV0ucnVuUmVhY3Rpb24oKTtcbiAgICB9XG4gICAgZ2xvYmFsU3RhdGUuaXNSdW5uaW5nUmVhY3Rpb25zID0gZmFsc2U7XG59XG52YXIgaXNSZWFjdGlvbiA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXCJSZWFjdGlvblwiLCBSZWFjdGlvbik7XG5mdW5jdGlvbiBzZXRSZWFjdGlvblNjaGVkdWxlcihmbikge1xuICAgIHZhciBiYXNlU2NoZWR1bGVyID0gcmVhY3Rpb25TY2hlZHVsZXI7XG4gICAgcmVhY3Rpb25TY2hlZHVsZXIgPSBmdW5jdGlvbiAoZikgeyByZXR1cm4gZm4oZnVuY3Rpb24gKCkgeyByZXR1cm4gYmFzZVNjaGVkdWxlcihmKTsgfSk7IH07XG59XG5cbmZ1bmN0aW9uIGlzU3B5RW5hYmxlZCgpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICEhZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzLmxlbmd0aDtcbn1cbmZ1bmN0aW9uIHNweVJlcG9ydChldmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpXG4gICAgICAgIHJldHVybjsgLy8gZGVhZCBjb2RlIGVsaW1pbmF0aW9uIGNhbiBkbyB0aGUgcmVzdFxuICAgIGlmICghZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzLmxlbmd0aClcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnM7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbDsgaSsrKVxuICAgICAgICBsaXN0ZW5lcnNbaV0oZXZlbnQpO1xufVxuZnVuY3Rpb24gc3B5UmVwb3J0U3RhcnQoZXZlbnQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIGNoYW5nZSA9IF9fYXNzaWduKHt9LCBldmVudCwgeyBzcHlSZXBvcnRTdGFydDogdHJ1ZSB9KTtcbiAgICBzcHlSZXBvcnQoY2hhbmdlKTtcbn1cbnZhciBFTkRfRVZFTlQgPSB7IHNweVJlcG9ydEVuZDogdHJ1ZSB9O1xuZnVuY3Rpb24gc3B5UmVwb3J0RW5kKGNoYW5nZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoY2hhbmdlKVxuICAgICAgICBzcHlSZXBvcnQoX19hc3NpZ24oe30sIGNoYW5nZSwgeyBzcHlSZXBvcnRFbmQ6IHRydWUgfSkpO1xuICAgIGVsc2VcbiAgICAgICAgc3B5UmVwb3J0KEVORF9FVkVOVCk7XG59XG5mdW5jdGlvbiBzcHkobGlzdGVuZXIpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlttb2J4LnNweV0gSXMgYSBuby1vcCBpbiBwcm9kdWN0aW9uIGJ1aWxkc1wiKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdsb2JhbFN0YXRlLnNweUxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIG9uY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzID0gZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAobCkgeyByZXR1cm4gbCAhPT0gbGlzdGVuZXI7IH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRvbnRSZWFzc2lnbkZpZWxkcygpIHtcbiAgICBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBcIkBhY3Rpb24gZmllbGRzIGFyZSBub3QgcmVhc3NpZ25hYmxlXCIpO1xufVxuZnVuY3Rpb24gbmFtZWRBY3Rpb25EZWNvcmF0b3IobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBwcm9wLCBkZXNjcmlwdG9yKSB7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGRlc2NyaXB0b3IuZ2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFpbChcIkBhY3Rpb24gY2Fubm90IGJlIHVzZWQgd2l0aCBnZXR0ZXJzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYmFiZWwgLyB0eXBlc2NyaXB0XG4gICAgICAgICAgICAvLyBAYWN0aW9uIG1ldGhvZCgpIHsgfVxuICAgICAgICAgICAgaWYgKGRlc2NyaXB0b3IudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyB0eXBlc2NyaXB0XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNyZWF0ZUFjdGlvbihuYW1lLCBkZXNjcmlwdG9yLnZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUgLy8gZm9yIHR5cGVzY3JpcHQsIHRoaXMgbXVzdCBiZSB3cml0YWJsZSwgb3RoZXJ3aXNlIGl0IGNhbm5vdCBpbmhlcml0IDovIChzZWUgaW5oZXJpdGFibGUgYWN0aW9ucyB0ZXN0KVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBiYWJlbCBvbmx5OiBAYWN0aW9uIG1ldGhvZCA9ICgpID0+IHt9XG4gICAgICAgICAgICB2YXIgaW5pdGlhbGl6ZXJfMSA9IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXI7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbml0aWFsaXplcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBOLkI6IHdlIGNhbid0IGltbWVkaWF0ZWx5IGludm9rZSBpbml0aWFsaXplcjsgdGhpcyB3b3VsZCBiZSB3cm9uZ1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQWN0aW9uKG5hbWUsIGluaXRpYWxpemVyXzEuY2FsbCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBib3VuZCBpbnN0YW5jZSBtZXRob2RzXG4gICAgICAgIHJldHVybiBhY3Rpb25GaWVsZERlY29yYXRvcihuYW1lKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5mdW5jdGlvbiBhY3Rpb25GaWVsZERlY29yYXRvcihuYW1lKSB7XG4gICAgLy8gU2ltcGxlIHByb3BlcnR5IHRoYXQgd3JpdGVzIG9uIGZpcnN0IGludm9jYXRpb24gdG8gdGhlIGN1cnJlbnQgaW5zdGFuY2VcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgcHJvcCwgZGVzY3JpcHRvcikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wLCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBhZGRIaWRkZW5Qcm9wKHRoaXMsIHByb3AsIGFjdGlvbihuYW1lLCB2YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYm91bmRBY3Rpb25EZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IsIGFwcGx5VG9JbnN0YW5jZSkge1xuICAgIGlmIChhcHBseVRvSW5zdGFuY2UgPT09IHRydWUpIHtcbiAgICAgICAgZGVmaW5lQm91bmRBY3Rpb24odGFyZ2V0LCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IudmFsdWUpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgICAgLy8gaWYgKGRlc2NyaXB0b3IudmFsdWUpXG4gICAgICAgIC8vIFR5cGVzY3JpcHQgLyBCYWJlbDogQGFjdGlvbi5ib3VuZCBtZXRob2QoKSB7IH1cbiAgICAgICAgLy8gYWxzbzogYmFiZWwgQGFjdGlvbi5ib3VuZCBtZXRob2QgPSAoKSA9PiB7fVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVCb3VuZEFjdGlvbih0aGlzLCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IudmFsdWUgfHwgZGVzY3JpcHRvci5pbml0aWFsaXplci5jYWxsKHRoaXMpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1twcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZG9udFJlYXNzaWduRmllbGRzXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIGZpZWxkIGRlY29yYXRvciBUeXBlc2NyaXB0IEBhY3Rpb24uYm91bmQgbWV0aG9kID0gKCkgPT4ge31cbiAgICByZXR1cm4ge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICBkZWZpbmVCb3VuZEFjdGlvbih0aGlzLCBwcm9wZXJ0eU5hbWUsIHYpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG52YXIgYWN0aW9uID0gZnVuY3Rpb24gYWN0aW9uKGFyZzEsIGFyZzIsIGFyZzMsIGFyZzQpIHtcbiAgICAvLyBhY3Rpb24oZm4oKSB7fSlcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXJnMSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICByZXR1cm4gY3JlYXRlQWN0aW9uKGFyZzEubmFtZSB8fCBcIjx1bm5hbWVkIGFjdGlvbj5cIiwgYXJnMSk7XG4gICAgLy8gYWN0aW9uKFwibmFtZVwiLCBmbigpIHt9KVxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBhcmcyID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHJldHVybiBjcmVhdGVBY3Rpb24oYXJnMSwgYXJnMik7XG4gICAgLy8gQGFjdGlvbihcIm5hbWVcIikgZm4oKSB7fVxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmcxID09PSBcInN0cmluZ1wiKVxuICAgICAgICByZXR1cm4gbmFtZWRBY3Rpb25EZWNvcmF0b3IoYXJnMSk7XG4gICAgLy8gQGFjdGlvbiBmbigpIHt9XG4gICAgaWYgKGFyZzQgPT09IHRydWUpIHtcbiAgICAgICAgLy8gYXBwbHkgdG8gaW5zdGFuY2UgaW1tZWRpYXRlbHlcbiAgICAgICAgYWRkSGlkZGVuUHJvcChhcmcxLCBhcmcyLCBjcmVhdGVBY3Rpb24oYXJnMS5uYW1lIHx8IGFyZzIsIGFyZzMudmFsdWUsIHRoaXMpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuYW1lZEFjdGlvbkRlY29yYXRvcihhcmcyKS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cbn07XG5hY3Rpb24uYm91bmQgPSBib3VuZEFjdGlvbkRlY29yYXRvcjtcbmZ1bmN0aW9uIHJ1bkluQWN0aW9uKGFyZzEsIGFyZzIpIHtcbiAgICB2YXIgYWN0aW9uTmFtZSA9IHR5cGVvZiBhcmcxID09PSBcInN0cmluZ1wiID8gYXJnMSA6IGFyZzEubmFtZSB8fCBcIjx1bm5hbWVkIGFjdGlvbj5cIjtcbiAgICB2YXIgZm4gPSB0eXBlb2YgYXJnMSA9PT0gXCJmdW5jdGlvblwiID8gYXJnMSA6IGFyZzI7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpbnZhcmlhbnQodHlwZW9mIGZuID09PSBcImZ1bmN0aW9uXCIgJiYgZm4ubGVuZ3RoID09PSAwLCBcImBydW5JbkFjdGlvbmAgZXhwZWN0cyBhIGZ1bmN0aW9uIHdpdGhvdXQgYXJndW1lbnRzXCIpO1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbk5hbWUgIT09IFwic3RyaW5nXCIgfHwgIWFjdGlvbk5hbWUpXG4gICAgICAgICAgICBmYWlsKFwiYWN0aW9ucyBzaG91bGQgaGF2ZSB2YWxpZCBuYW1lcywgZ290OiAnXCIgKyBhY3Rpb25OYW1lICsgXCInXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZXhlY3V0ZUFjdGlvbihhY3Rpb25OYW1lLCBmbiwgdGhpcywgdW5kZWZpbmVkKTtcbn1cbmZ1bmN0aW9uIGlzQWN0aW9uKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gXCJmdW5jdGlvblwiICYmIHRoaW5nLmlzTW9ieEFjdGlvbiA9PT0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGRlZmluZUJvdW5kQWN0aW9uKHRhcmdldCwgcHJvcGVydHlOYW1lLCBmbikge1xuICAgIGFkZEhpZGRlblByb3AodGFyZ2V0LCBwcm9wZXJ0eU5hbWUsIGNyZWF0ZUFjdGlvbihwcm9wZXJ0eU5hbWUsIGZuLmJpbmQodGFyZ2V0KSkpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuYW1lZCByZWFjdGl2ZSB2aWV3IGFuZCBrZWVwcyBpdCBhbGl2ZSwgc28gdGhhdCB0aGUgdmlldyBpcyBhbHdheXNcbiAqIHVwZGF0ZWQgaWYgb25lIG9mIHRoZSBkZXBlbmRlbmNpZXMgY2hhbmdlcywgZXZlbiB3aGVuIHRoZSB2aWV3IGlzIG5vdCBmdXJ0aGVyIHVzZWQgYnkgc29tZXRoaW5nIGVsc2UuXG4gKiBAcGFyYW0gdmlldyBUaGUgcmVhY3RpdmUgdmlld1xuICogQHJldHVybnMgZGlzcG9zZXIgZnVuY3Rpb24sIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHN0b3AgdGhlIHZpZXcgZnJvbSBiZWluZyB1cGRhdGVkIGluIHRoZSBmdXR1cmUuXG4gKi9cbmZ1bmN0aW9uIGF1dG9ydW4odmlldywgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHsgb3B0cyA9IEVNUFRZX09CSkVDVDsgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiB2aWV3ID09PSBcImZ1bmN0aW9uXCIsIFwiQXV0b3J1biBleHBlY3RzIGEgZnVuY3Rpb24gYXMgZmlyc3QgYXJndW1lbnRcIik7XG4gICAgICAgIGludmFyaWFudChpc0FjdGlvbih2aWV3KSA9PT0gZmFsc2UsIFwiQXV0b3J1biBkb2VzIG5vdCBhY2NlcHQgYWN0aW9ucyBzaW5jZSBhY3Rpb25zIGFyZSB1bnRyYWNrYWJsZVwiKTtcbiAgICB9XG4gICAgdmFyIG5hbWUgPSAob3B0cyAmJiBvcHRzLm5hbWUpIHx8IHZpZXcubmFtZSB8fCBcIkF1dG9ydW5AXCIgKyBnZXROZXh0SWQoKTtcbiAgICB2YXIgcnVuU3luYyA9ICFvcHRzLnNjaGVkdWxlciAmJiAhb3B0cy5kZWxheTtcbiAgICB2YXIgcmVhY3Rpb247XG4gICAgaWYgKHJ1blN5bmMpIHtcbiAgICAgICAgLy8gbm9ybWFsIGF1dG9ydW5cbiAgICAgICAgcmVhY3Rpb24gPSBuZXcgUmVhY3Rpb24obmFtZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy50cmFjayhyZWFjdGlvblJ1bm5lcik7XG4gICAgICAgIH0sIG9wdHMub25FcnJvciwgb3B0cy5yZXF1aXJlc09ic2VydmFibGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHNjaGVkdWxlcl8xID0gY3JlYXRlU2NoZWR1bGVyRnJvbU9wdGlvbnMob3B0cyk7XG4gICAgICAgIC8vIGRlYm91bmNlZCBhdXRvcnVuXG4gICAgICAgIHZhciBpc1NjaGVkdWxlZF8xID0gZmFsc2U7XG4gICAgICAgIHJlYWN0aW9uID0gbmV3IFJlYWN0aW9uKG5hbWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghaXNTY2hlZHVsZWRfMSkge1xuICAgICAgICAgICAgICAgIGlzU2NoZWR1bGVkXzEgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNjaGVkdWxlcl8xKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNTY2hlZHVsZWRfMSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlYWN0aW9uLmlzRGlzcG9zZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFjdGlvbi50cmFjayhyZWFjdGlvblJ1bm5lcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdHMub25FcnJvciwgb3B0cy5yZXF1aXJlc09ic2VydmFibGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWFjdGlvblJ1bm5lcigpIHtcbiAgICAgICAgdmlldyhyZWFjdGlvbik7XG4gICAgfVxuICAgIHJlYWN0aW9uLnNjaGVkdWxlKCk7XG4gICAgcmV0dXJuIHJlYWN0aW9uLmdldERpc3Bvc2VyKCk7XG59XG52YXIgcnVuID0gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYoKTsgfTtcbmZ1bmN0aW9uIGNyZWF0ZVNjaGVkdWxlckZyb21PcHRpb25zKG9wdHMpIHtcbiAgICByZXR1cm4gb3B0cy5zY2hlZHVsZXJcbiAgICAgICAgPyBvcHRzLnNjaGVkdWxlclxuICAgICAgICA6IG9wdHMuZGVsYXlcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHNldFRpbWVvdXQoZiwgb3B0cy5kZWxheSk7IH1cbiAgICAgICAgICAgIDogcnVuO1xufVxuZnVuY3Rpb24gcmVhY3Rpb24oZXhwcmVzc2lvbiwgZWZmZWN0LCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkgeyBvcHRzID0gRU1QVFlfT0JKRUNUOyB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpbnZhcmlhbnQodHlwZW9mIGV4cHJlc3Npb24gPT09IFwiZnVuY3Rpb25cIiwgXCJGaXJzdCBhcmd1bWVudCB0byByZWFjdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiBvcHRzID09PSBcIm9iamVjdFwiLCBcIlRoaXJkIGFyZ3VtZW50IG9mIHJlYWN0aW9ucyBzaG91bGQgYmUgYW4gb2JqZWN0XCIpO1xuICAgIH1cbiAgICB2YXIgbmFtZSA9IG9wdHMubmFtZSB8fCBcIlJlYWN0aW9uQFwiICsgZ2V0TmV4dElkKCk7XG4gICAgdmFyIGVmZmVjdEFjdGlvbiA9IGFjdGlvbihuYW1lLCBvcHRzLm9uRXJyb3IgPyB3cmFwRXJyb3JIYW5kbGVyKG9wdHMub25FcnJvciwgZWZmZWN0KSA6IGVmZmVjdCk7XG4gICAgdmFyIHJ1blN5bmMgPSAhb3B0cy5zY2hlZHVsZXIgJiYgIW9wdHMuZGVsYXk7XG4gICAgdmFyIHNjaGVkdWxlciA9IGNyZWF0ZVNjaGVkdWxlckZyb21PcHRpb25zKG9wdHMpO1xuICAgIHZhciBmaXJzdFRpbWUgPSB0cnVlO1xuICAgIHZhciBpc1NjaGVkdWxlZCA9IGZhbHNlO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YXIgZXF1YWxzID0gb3B0cy5jb21wYXJlU3RydWN0dXJhbFxuICAgICAgICA/IGNvbXBhcmVyLnN0cnVjdHVyYWxcbiAgICAgICAgOiBvcHRzLmVxdWFscyB8fCBjb21wYXJlci5kZWZhdWx0O1xuICAgIHZhciByID0gbmV3IFJlYWN0aW9uKG5hbWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGZpcnN0VGltZSB8fCBydW5TeW5jKSB7XG4gICAgICAgICAgICByZWFjdGlvblJ1bm5lcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpc1NjaGVkdWxlZCkge1xuICAgICAgICAgICAgaXNTY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgICAgc2NoZWR1bGVyKHJlYWN0aW9uUnVubmVyKTtcbiAgICAgICAgfVxuICAgIH0sIG9wdHMub25FcnJvciwgb3B0cy5yZXF1aXJlc09ic2VydmFibGUpO1xuICAgIGZ1bmN0aW9uIHJlYWN0aW9uUnVubmVyKCkge1xuICAgICAgICBpc1NjaGVkdWxlZCA9IGZhbHNlOyAvLyBROiBtb3ZlIGludG8gcmVhY3Rpb24gcnVubmVyP1xuICAgICAgICBpZiAoci5pc0Rpc3Bvc2VkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICByLnRyYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBuZXh0VmFsdWUgPSBleHByZXNzaW9uKHIpO1xuICAgICAgICAgICAgY2hhbmdlZCA9IGZpcnN0VGltZSB8fCAhZXF1YWxzKHZhbHVlLCBuZXh0VmFsdWUpO1xuICAgICAgICAgICAgdmFsdWUgPSBuZXh0VmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZmlyc3RUaW1lICYmIG9wdHMuZmlyZUltbWVkaWF0ZWx5KVxuICAgICAgICAgICAgZWZmZWN0QWN0aW9uKHZhbHVlLCByKTtcbiAgICAgICAgaWYgKCFmaXJzdFRpbWUgJiYgY2hhbmdlZCA9PT0gdHJ1ZSlcbiAgICAgICAgICAgIGVmZmVjdEFjdGlvbih2YWx1ZSwgcik7XG4gICAgICAgIGlmIChmaXJzdFRpbWUpXG4gICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcbiAgICB9XG4gICAgci5zY2hlZHVsZSgpO1xuICAgIHJldHVybiByLmdldERpc3Bvc2VyKCk7XG59XG5mdW5jdGlvbiB3cmFwRXJyb3JIYW5kbGVyKGVycm9ySGFuZGxlciwgYmFzZUZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlRm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyb3JIYW5kbGVyLmNhbGwodGhpcywgZSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBvbkJlY29tZU9ic2VydmVkKHRoaW5nLCBhcmcyLCBhcmczKSB7XG4gICAgcmV0dXJuIGludGVyY2VwdEhvb2soXCJvbkJlY29tZU9ic2VydmVkXCIsIHRoaW5nLCBhcmcyLCBhcmczKTtcbn1cbmZ1bmN0aW9uIG9uQmVjb21lVW5vYnNlcnZlZCh0aGluZywgYXJnMiwgYXJnMykge1xuICAgIHJldHVybiBpbnRlcmNlcHRIb29rKFwib25CZWNvbWVVbm9ic2VydmVkXCIsIHRoaW5nLCBhcmcyLCBhcmczKTtcbn1cbmZ1bmN0aW9uIGludGVyY2VwdEhvb2soaG9vaywgdGhpbmcsIGFyZzIsIGFyZzMpIHtcbiAgICB2YXIgYXRvbSA9IHR5cGVvZiBhcmczID09PSBcImZ1bmN0aW9uXCIgPyBnZXRBdG9tKHRoaW5nLCBhcmcyKSA6IGdldEF0b20odGhpbmcpO1xuICAgIHZhciBjYiA9IHR5cGVvZiBhcmczID09PSBcImZ1bmN0aW9uXCIgPyBhcmczIDogYXJnMjtcbiAgICB2YXIgbGlzdGVuZXJzS2V5ID0gaG9vayArIFwiTGlzdGVuZXJzXCI7XG4gICAgaWYgKGF0b21bbGlzdGVuZXJzS2V5XSkge1xuICAgICAgICBhdG9tW2xpc3RlbmVyc0tleV0uYWRkKGNiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGF0b21bbGlzdGVuZXJzS2V5XSA9IG5ldyBTZXQoW2NiXSk7XG4gICAgfVxuICAgIHZhciBvcmlnID0gYXRvbVtob29rXTtcbiAgICBpZiAodHlwZW9mIG9yaWcgIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIFwiTm90IGFuIGF0b20gdGhhdCBjYW4gYmUgKHVuKW9ic2VydmVkXCIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBob29rTGlzdGVuZXJzID0gYXRvbVtsaXN0ZW5lcnNLZXldO1xuICAgICAgICBpZiAoaG9va0xpc3RlbmVycykge1xuICAgICAgICAgICAgaG9va0xpc3RlbmVycy5kZWxldGUoY2IpO1xuICAgICAgICAgICAgaWYgKGhvb2tMaXN0ZW5lcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBhdG9tW2xpc3RlbmVyc0tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjb25maWd1cmUob3B0aW9ucykge1xuICAgIHZhciBlbmZvcmNlQWN0aW9ucyA9IG9wdGlvbnMuZW5mb3JjZUFjdGlvbnMsIGNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvbiA9IG9wdGlvbnMuY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uLCBjb21wdXRlZENvbmZpZ3VyYWJsZSA9IG9wdGlvbnMuY29tcHV0ZWRDb25maWd1cmFibGUsIGRpc2FibGVFcnJvckJvdW5kYXJpZXMgPSBvcHRpb25zLmRpc2FibGVFcnJvckJvdW5kYXJpZXMsIHJlYWN0aW9uU2NoZWR1bGVyID0gb3B0aW9ucy5yZWFjdGlvblNjaGVkdWxlciwgcmVhY3Rpb25SZXF1aXJlc09ic2VydmFibGUgPSBvcHRpb25zLnJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlLCBvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbiA9IG9wdGlvbnMub2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb247XG4gICAgaWYgKG9wdGlvbnMuaXNvbGF0ZUdsb2JhbFN0YXRlID09PSB0cnVlKSB7XG4gICAgICAgIGlzb2xhdGVHbG9iYWxTdGF0ZSgpO1xuICAgIH1cbiAgICBpZiAoZW5mb3JjZUFjdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIGVuZm9yY2VBY3Rpb25zID09PSBcImJvb2xlYW5cIiB8fCBlbmZvcmNlQWN0aW9ucyA9PT0gXCJzdHJpY3RcIilcbiAgICAgICAgICAgIGRlcHJlY2F0ZWQoXCJEZXByZWNhdGVkIHZhbHVlIGZvciAnZW5mb3JjZUFjdGlvbnMnLCB1c2UgJ2ZhbHNlJyA9PiAnXFxcIm5ldmVyXFxcIicsICd0cnVlJyA9PiAnXFxcIm9ic2VydmVkXFxcIicsICdcXFwic3RyaWN0XFxcIicgPT4gXFxcIidhbHdheXMnXFxcIiBpbnN0ZWFkXCIpO1xuICAgICAgICB2YXIgZWEgPSB2b2lkIDA7XG4gICAgICAgIHN3aXRjaCAoZW5mb3JjZUFjdGlvbnMpIHtcbiAgICAgICAgICAgIGNhc2UgdHJ1ZTpcbiAgICAgICAgICAgIGNhc2UgXCJvYnNlcnZlZFwiOlxuICAgICAgICAgICAgICAgIGVhID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZmFsc2U6XG4gICAgICAgICAgICBjYXNlIFwibmV2ZXJcIjpcbiAgICAgICAgICAgICAgICBlYSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInN0cmljdFwiOlxuICAgICAgICAgICAgY2FzZSBcImFsd2F5c1wiOlxuICAgICAgICAgICAgICAgIGVhID0gXCJzdHJpY3RcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgZmFpbChcIkludmFsaWQgdmFsdWUgZm9yICdlbmZvcmNlQWN0aW9ucyc6ICdcIiArIGVuZm9yY2VBY3Rpb25zICsgXCInLCBleHBlY3RlZCAnbmV2ZXInLCAnYWx3YXlzJyBvciAnb2JzZXJ2ZWQnXCIpO1xuICAgICAgICB9XG4gICAgICAgIGdsb2JhbFN0YXRlLmVuZm9yY2VBY3Rpb25zID0gZWE7XG4gICAgICAgIGdsb2JhbFN0YXRlLmFsbG93U3RhdGVDaGFuZ2VzID0gZWEgPT09IHRydWUgfHwgZWEgPT09IFwic3RyaWN0XCIgPyBmYWxzZSA6IHRydWU7XG4gICAgfVxuICAgIGlmIChjb21wdXRlZFJlcXVpcmVzUmVhY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBnbG9iYWxTdGF0ZS5jb21wdXRlZFJlcXVpcmVzUmVhY3Rpb24gPSAhIWNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvbjtcbiAgICB9XG4gICAgaWYgKHJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZ2xvYmFsU3RhdGUucmVhY3Rpb25SZXF1aXJlc09ic2VydmFibGUgPSAhIXJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlO1xuICAgIH1cbiAgICBpZiAob2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBnbG9iYWxTdGF0ZS5vYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbiA9ICEhb2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb247XG4gICAgICAgIGdsb2JhbFN0YXRlLmFsbG93U3RhdGVSZWFkcyA9ICFnbG9iYWxTdGF0ZS5vYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbjtcbiAgICB9XG4gICAgaWYgKGNvbXB1dGVkQ29uZmlndXJhYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZ2xvYmFsU3RhdGUuY29tcHV0ZWRDb25maWd1cmFibGUgPSAhIWNvbXB1dGVkQ29uZmlndXJhYmxlO1xuICAgIH1cbiAgICBpZiAoZGlzYWJsZUVycm9yQm91bmRhcmllcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChkaXNhYmxlRXJyb3JCb3VuZGFyaWVzID09PSB0cnVlKVxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiV0FSTklORzogRGVidWcgZmVhdHVyZSBvbmx5LiBNb2JYIHdpbGwgTk9UIHJlY292ZXIgZnJvbSBlcnJvcnMgd2hlbiBgZGlzYWJsZUVycm9yQm91bmRhcmllc2AgaXMgZW5hYmxlZC5cIik7XG4gICAgICAgIGdsb2JhbFN0YXRlLmRpc2FibGVFcnJvckJvdW5kYXJpZXMgPSAhIWRpc2FibGVFcnJvckJvdW5kYXJpZXM7XG4gICAgfVxuICAgIGlmIChyZWFjdGlvblNjaGVkdWxlcikge1xuICAgICAgICBzZXRSZWFjdGlvblNjaGVkdWxlcihyZWFjdGlvblNjaGVkdWxlcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkZWNvcmF0ZSh0aGluZywgZGVjb3JhdG9ycykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICBpbnZhcmlhbnQoaXNQbGFpbk9iamVjdChkZWNvcmF0b3JzKSwgXCJEZWNvcmF0b3JzIHNob3VsZCBiZSBhIGtleSB2YWx1ZSBtYXBcIik7XG4gICAgdmFyIHRhcmdldCA9IHR5cGVvZiB0aGluZyA9PT0gXCJmdW5jdGlvblwiID8gdGhpbmcucHJvdG90eXBlIDogdGhpbmc7XG4gICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICB2YXIgcHJvcGVydHlEZWNvcmF0b3JzID0gZGVjb3JhdG9yc1twcm9wXTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHByb3BlcnR5RGVjb3JhdG9ycykpIHtcbiAgICAgICAgICAgIHByb3BlcnR5RGVjb3JhdG9ycyA9IFtwcm9wZXJ0eURlY29yYXRvcnNdO1xuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICAgICAgaW52YXJpYW50KHByb3BlcnR5RGVjb3JhdG9ycy5ldmVyeShmdW5jdGlvbiAoZGVjb3JhdG9yKSB7IHJldHVybiB0eXBlb2YgZGVjb3JhdG9yID09PSBcImZ1bmN0aW9uXCI7IH0pLCBcIkRlY29yYXRlOiBleHBlY3RlZCBhIGRlY29yYXRvciBmdW5jdGlvbiBvciBhcnJheSBvZiBkZWNvcmF0b3IgZnVuY3Rpb25zIGZvciAnXCIgKyBwcm9wICsgXCInXCIpO1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wKTtcbiAgICAgICAgdmFyIG5ld0Rlc2NyaXB0b3IgPSBwcm9wZXJ0eURlY29yYXRvcnMucmVkdWNlKGZ1bmN0aW9uIChhY2NEZXNjcmlwdG9yLCBkZWNvcmF0b3IpIHsgcmV0dXJuIGRlY29yYXRvcih0YXJnZXQsIHByb3AsIGFjY0Rlc2NyaXB0b3IpOyB9LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgaWYgKG5ld0Rlc2NyaXB0b3IpXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wLCBuZXdEZXNjcmlwdG9yKTtcbiAgICB9O1xuICAgIGZvciAodmFyIHByb3AgaW4gZGVjb3JhdG9ycykge1xuICAgICAgICBfbG9vcF8xKHByb3ApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpbmc7XG59XG5cbmZ1bmN0aW9uIGV4dGVuZE9ic2VydmFibGUodGFyZ2V0LCBwcm9wZXJ0aWVzLCBkZWNvcmF0b3JzLCBvcHRpb25zKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpbnZhcmlhbnQoYXJndW1lbnRzLmxlbmd0aCA+PSAyICYmIGFyZ3VtZW50cy5sZW5ndGggPD0gNCwgXCInZXh0ZW5kT2JzZXJ2YWJsZScgZXhwZWN0ZWQgMi00IGFyZ3VtZW50c1wiKTtcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiB0YXJnZXQgPT09IFwib2JqZWN0XCIsIFwiJ2V4dGVuZE9ic2VydmFibGUnIGV4cGVjdHMgYW4gb2JqZWN0IGFzIGZpcnN0IGFyZ3VtZW50XCIpO1xuICAgICAgICBpbnZhcmlhbnQoIWlzT2JzZXJ2YWJsZU1hcCh0YXJnZXQpLCBcIidleHRlbmRPYnNlcnZhYmxlJyBzaG91bGQgbm90IGJlIHVzZWQgb24gbWFwcywgdXNlIG1hcC5tZXJnZSBpbnN0ZWFkXCIpO1xuICAgIH1cbiAgICBvcHRpb25zID0gYXNDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyhvcHRpb25zKTtcbiAgICB2YXIgZGVmYXVsdERlY29yYXRvciA9IGdldERlZmF1bHREZWNvcmF0b3JGcm9tT2JqZWN0T3B0aW9ucyhvcHRpb25zKTtcbiAgICBpbml0aWFsaXplSW5zdGFuY2UodGFyZ2V0KTsgLy8gRml4ZXMgIzE3NDBcbiAgICBhc09ic2VydmFibGVPYmplY3QodGFyZ2V0LCBvcHRpb25zLm5hbWUsIGRlZmF1bHREZWNvcmF0b3IuZW5oYW5jZXIpOyAvLyBtYWtlIHN1cmUgb2JqZWN0IGlzIG9ic2VydmFibGUsIGV2ZW4gd2l0aG91dCBpbml0aWFsIHByb3BzXG4gICAgaWYgKHByb3BlcnRpZXMpXG4gICAgICAgIGV4dGVuZE9ic2VydmFibGVPYmplY3RXaXRoUHJvcGVydGllcyh0YXJnZXQsIHByb3BlcnRpZXMsIGRlY29yYXRvcnMsIGRlZmF1bHREZWNvcmF0b3IpO1xuICAgIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0RGVjb3JhdG9yRnJvbU9iamVjdE9wdGlvbnMob3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zLmRlZmF1bHREZWNvcmF0b3IgfHwgKG9wdGlvbnMuZGVlcCA9PT0gZmFsc2UgPyByZWZEZWNvcmF0b3IgOiBkZWVwRGVjb3JhdG9yKTtcbn1cbmZ1bmN0aW9uIGV4dGVuZE9ic2VydmFibGVPYmplY3RXaXRoUHJvcGVydGllcyh0YXJnZXQsIHByb3BlcnRpZXMsIGRlY29yYXRvcnMsIGRlZmF1bHREZWNvcmF0b3IpIHtcbiAgICB2YXIgZV8xLCBfYSwgZV8yLCBfYjtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGludmFyaWFudCghaXNPYnNlcnZhYmxlKHByb3BlcnRpZXMpLCBcIkV4dGVuZGluZyBhbiBvYmplY3Qgd2l0aCBhbm90aGVyIG9ic2VydmFibGUgKG9iamVjdCkgaXMgbm90IHN1cHBvcnRlZC4gUGxlYXNlIGNvbnN0cnVjdCBhbiBleHBsaWNpdCBwcm9wZXJ0eW1hcCwgdXNpbmcgYHRvSlNgIGlmIG5lZWQuIFNlZSBpc3N1ZSAjNTQwXCIpO1xuICAgICAgICBpZiAoZGVjb3JhdG9ycykge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBnZXRQbGFpbk9iamVjdEtleXMoZGVjb3JhdG9ycyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleXNfMSA9IF9fdmFsdWVzKGtleXMpLCBrZXlzXzFfMSA9IGtleXNfMS5uZXh0KCk7ICFrZXlzXzFfMS5kb25lOyBrZXlzXzFfMSA9IGtleXNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gcHJvcGVydGllcykpXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsKFwiVHJ5aW5nIHRvIGRlY2xhcmUgYSBkZWNvcmF0b3IgZm9yIHVuc3BlY2lmaWVkIHByb3BlcnR5ICdcIiArIHN0cmluZ2lmeUtleShrZXkpICsgXCInXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5c18xXzEgJiYgIWtleXNfMV8xLmRvbmUgJiYgKF9hID0ga2V5c18xLnJldHVybikpIF9hLmNhbGwoa2V5c18xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXJ0QmF0Y2goKTtcbiAgICB0cnkge1xuICAgICAgICB2YXIga2V5cyA9IGdldFBsYWluT2JqZWN0S2V5cyhwcm9wZXJ0aWVzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIGtleXNfMiA9IF9fdmFsdWVzKGtleXMpLCBrZXlzXzJfMSA9IGtleXNfMi5uZXh0KCk7ICFrZXlzXzJfMS5kb25lOyBrZXlzXzJfMSA9IGtleXNfMi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c18yXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3BlcnRpZXMsIGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUGxhaW5PYmplY3QocHJvcGVydGllcykpXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsKFwiJ2V4dGVuZE9ic2VydmFiZScgb25seSBhY2NlcHRzIHBsYWluIG9iamVjdHMgYXMgc2Vjb25kIGFyZ3VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsKFwiJ2V4dGVuZE9ic2VydmFibGUnIGNhbiBvbmx5IGJlIHVzZWQgdG8gaW50cm9kdWNlIG5ldyBwcm9wZXJ0aWVzLiBVc2UgJ3NldCcgb3IgJ2RlY29yYXRlJyBpbnN0ZWFkLiBUaGUgcHJvcGVydHkgJ1wiICsgc3RyaW5naWZ5S2V5KGtleSkgKyBcIicgYWxyZWFkeSBleGlzdHMgb24gJ1wiICsgdGFyZ2V0ICsgXCInXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDb21wdXRlZChkZXNjcmlwdG9yLnZhbHVlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwoXCJQYXNzaW5nIGEgJ2NvbXB1dGVkJyBhcyBpbml0aWFsIHByb3BlcnR5IHZhbHVlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgYnkgZXh0ZW5kT2JzZXJ2YWJsZS4gVXNlIGEgZ2V0dGVyIG9yIGRlY29yYXRvciBpbnN0ZWFkXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZGVjb3JhdG9yID0gZGVjb3JhdG9ycyAmJiBrZXkgaW4gZGVjb3JhdG9yc1xuICAgICAgICAgICAgICAgICAgICA/IGRlY29yYXRvcnNba2V5XVxuICAgICAgICAgICAgICAgICAgICA6IGRlc2NyaXB0b3IuZ2V0XG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNvbXB1dGVkRGVjb3JhdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGRlZmF1bHREZWNvcmF0b3I7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiB0eXBlb2YgZGVjb3JhdG9yICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIGZhaWwoXCJOb3QgYSB2YWxpZCBkZWNvcmF0b3IgZm9yICdcIiArIHN0cmluZ2lmeUtleShrZXkpICsgXCInLCBnb3Q6IFwiICsgZGVjb3JhdG9yKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0RGVzY3JpcHRvciA9IGRlY29yYXRvcih0YXJnZXQsIGtleSwgZGVzY3JpcHRvciwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdERlc2NyaXB0b3IgLy8gb3RoZXJ3aXNlLCBhc3N1bWUgYWxyZWFkeSBhcHBsaWVkLCBkdWUgdG8gYGFwcGx5VG9JbnN0YW5jZWBcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgcmVzdWx0RGVzY3JpcHRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChrZXlzXzJfMSAmJiAha2V5c18yXzEuZG9uZSAmJiAoX2IgPSBrZXlzXzIucmV0dXJuKSkgX2IuY2FsbChrZXlzXzIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBlbmRCYXRjaCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jeVRyZWUodGhpbmcsIHByb3BlcnR5KSB7XG4gICAgcmV0dXJuIG5vZGVUb0RlcGVuZGVuY3lUcmVlKGdldEF0b20odGhpbmcsIHByb3BlcnR5KSk7XG59XG5mdW5jdGlvbiBub2RlVG9EZXBlbmRlbmN5VHJlZShub2RlKSB7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogbm9kZS5uYW1lXG4gICAgfTtcbiAgICBpZiAobm9kZS5vYnNlcnZpbmcgJiYgbm9kZS5vYnNlcnZpbmcubGVuZ3RoID4gMClcbiAgICAgICAgcmVzdWx0LmRlcGVuZGVuY2llcyA9IHVuaXF1ZShub2RlLm9ic2VydmluZykubWFwKG5vZGVUb0RlcGVuZGVuY3lUcmVlKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0T2JzZXJ2ZXJUcmVlKHRoaW5nLCBwcm9wZXJ0eSkge1xuICAgIHJldHVybiBub2RlVG9PYnNlcnZlclRyZWUoZ2V0QXRvbSh0aGluZywgcHJvcGVydHkpKTtcbn1cbmZ1bmN0aW9uIG5vZGVUb09ic2VydmVyVHJlZShub2RlKSB7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogbm9kZS5uYW1lXG4gICAgfTtcbiAgICBpZiAoaGFzT2JzZXJ2ZXJzKG5vZGUpKVxuICAgICAgICByZXN1bHQub2JzZXJ2ZXJzID0gQXJyYXkuZnJvbShnZXRPYnNlcnZlcnMobm9kZSkpLm1hcChub2RlVG9PYnNlcnZlclRyZWUpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBnZW5lcmF0b3JJZCA9IDA7XG5mdW5jdGlvbiBmbG93KGdlbmVyYXRvcikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAxKVxuICAgICAgICBmYWlsKCEhcHJvY2Vzcy5lbnYuTk9ERV9FTlYgJiYgXCJGbG93IGV4cGVjdHMgb25lIDEgYXJndW1lbnQgYW5kIGNhbm5vdCBiZSB1c2VkIGFzIGRlY29yYXRvclwiKTtcbiAgICB2YXIgbmFtZSA9IGdlbmVyYXRvci5uYW1lIHx8IFwiPHVubmFtZWQgZmxvdz5cIjtcbiAgICAvLyBJbXBsZW1lbnRhdGlvbiBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vdGovY28vYmxvYi9tYXN0ZXIvaW5kZXguanNcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY3R4ID0gdGhpcztcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHZhciBydW5JZCA9ICsrZ2VuZXJhdG9ySWQ7XG4gICAgICAgIHZhciBnZW4gPSBhY3Rpb24obmFtZSArIFwiIC0gcnVuaWQ6IFwiICsgcnVuSWQgKyBcIiAtIGluaXRcIiwgZ2VuZXJhdG9yKS5hcHBseShjdHgsIGFyZ3MpO1xuICAgICAgICB2YXIgcmVqZWN0b3I7XG4gICAgICAgIHZhciBwZW5kaW5nUHJvbWlzZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgc3RlcElkID0gMDtcbiAgICAgICAgICAgIHJlamVjdG9yID0gcmVqZWN0O1xuICAgICAgICAgICAgZnVuY3Rpb24gb25GdWxmaWxsZWQocmVzKSB7XG4gICAgICAgICAgICAgICAgcGVuZGluZ1Byb21pc2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdmFyIHJldDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXQgPSBhY3Rpb24obmFtZSArIFwiIC0gcnVuaWQ6IFwiICsgcnVuSWQgKyBcIiAtIHlpZWxkIFwiICsgc3RlcElkKyssIGdlbi5uZXh0KS5jYWxsKGdlbiwgcmVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dChyZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gb25SZWplY3RlZChlcnIpIHtcbiAgICAgICAgICAgICAgICBwZW5kaW5nUHJvbWlzZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB2YXIgcmV0O1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldCA9IGFjdGlvbihuYW1lICsgXCIgLSBydW5pZDogXCIgKyBydW5JZCArIFwiIC0geWllbGQgXCIgKyBzdGVwSWQrKywgZ2VuLnRocm93KS5jYWxsKGdlbiwgZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dChyZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbmV4dChyZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmV0ICYmIHR5cGVvZiByZXQudGhlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFuIGFzeW5jIGl0ZXJhdG9yXG4gICAgICAgICAgICAgICAgICAgIHJldC50aGVuKG5leHQsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJldC5kb25lKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXQudmFsdWUpO1xuICAgICAgICAgICAgICAgIHBlbmRpbmdQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHJldC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBlbmRpbmdQcm9taXNlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb25GdWxmaWxsZWQodW5kZWZpbmVkKTsgLy8ga2ljayBvZmYgdGhlIHByb2Nlc3NcbiAgICAgICAgfSk7XG4gICAgICAgIHByb21pc2UuY2FuY2VsID0gYWN0aW9uKG5hbWUgKyBcIiAtIHJ1bmlkOiBcIiArIHJ1bklkICsgXCIgLSBjYW5jZWxcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAocGVuZGluZ1Byb21pc2UpXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbFByb21pc2UocGVuZGluZ1Byb21pc2UpO1xuICAgICAgICAgICAgICAgIC8vIEZpbmFsbHkgYmxvY2sgY2FuIHJldHVybiAob3IgeWllbGQpIHN0dWZmLi5cbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gZ2VuLnJldHVybigpO1xuICAgICAgICAgICAgICAgIC8vIGVhdCBhbnl0aGluZyB0aGF0IHByb21pc2Ugd291bGQgZG8sIGl0J3MgY2FuY2VsbGVkIVxuICAgICAgICAgICAgICAgIHZhciB5aWVsZGVkUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShyZXMudmFsdWUpO1xuICAgICAgICAgICAgICAgIHlpZWxkZWRQcm9taXNlLnRoZW4obm9vcCwgbm9vcCk7XG4gICAgICAgICAgICAgICAgY2FuY2VsUHJvbWlzZSh5aWVsZGVkUHJvbWlzZSk7IC8vIG1heWJlIGl0IGNhbiBiZSBjYW5jZWxsZWQgOilcbiAgICAgICAgICAgICAgICAvLyByZWplY3Qgb3VyIG9yaWdpbmFsIHByb21pc2VcbiAgICAgICAgICAgICAgICByZWplY3RvcihuZXcgRXJyb3IoXCJGTE9XX0NBTkNFTExFRFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJlamVjdG9yKGUpOyAvLyB0aGVyZSBjb3VsZCBiZSBhIHRocm93aW5nIGZpbmFsbHkgYmxvY2tcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG59XG5mdW5jdGlvbiBjYW5jZWxQcm9taXNlKHByb21pc2UpIHtcbiAgICBpZiAodHlwZW9mIHByb21pc2UuY2FuY2VsID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHByb21pc2UuY2FuY2VsKCk7XG59XG5cbmZ1bmN0aW9uIGludGVyY2VwdFJlYWRzKHRoaW5nLCBwcm9wT3JIYW5kbGVyLCBoYW5kbGVyKSB7XG4gICAgdmFyIHRhcmdldDtcbiAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKHRoaW5nKSB8fCBpc09ic2VydmFibGVBcnJheSh0aGluZykgfHwgaXNPYnNlcnZhYmxlVmFsdWUodGhpbmcpKSB7XG4gICAgICAgIHRhcmdldCA9IGdldEFkbWluaXN0cmF0aW9uKHRoaW5nKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHRoaW5nKSkge1xuICAgICAgICBpZiAodHlwZW9mIHByb3BPckhhbmRsZXIgIT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgICAgICAgICBcIkludGVyY2VwdFJlYWRzIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCBhIHNwZWNpZmljIHByb3BlcnR5LCBub3Qgd2l0aCBhbiBvYmplY3QgaW4gZ2VuZXJhbFwiKTtcbiAgICAgICAgdGFyZ2V0ID0gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcsIHByb3BPckhhbmRsZXIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICAgICBcIkV4cGVjdGVkIG9ic2VydmFibGUgbWFwLCBvYmplY3Qgb3IgYXJyYXkgYXMgZmlyc3QgYXJyYXlcIik7XG4gICAgfVxuICAgIGlmICh0YXJnZXQuZGVoYW5jZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIFwiQW4gaW50ZXJjZXB0IHJlYWRlciB3YXMgYWxyZWFkeSBlc3RhYmxpc2hlZFwiKTtcbiAgICB0YXJnZXQuZGVoYW5jZXIgPSB0eXBlb2YgcHJvcE9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiID8gcHJvcE9ySGFuZGxlciA6IGhhbmRsZXI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGFyZ2V0LmRlaGFuY2VyID0gdW5kZWZpbmVkO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGludGVyY2VwdCh0aGluZywgcHJvcE9ySGFuZGxlciwgaGFuZGxlcikge1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICByZXR1cm4gaW50ZXJjZXB0UHJvcGVydHkodGhpbmcsIHByb3BPckhhbmRsZXIsIGhhbmRsZXIpO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGludGVyY2VwdEludGVyY2VwdGFibGUodGhpbmcsIHByb3BPckhhbmRsZXIpO1xufVxuZnVuY3Rpb24gaW50ZXJjZXB0SW50ZXJjZXB0YWJsZSh0aGluZywgaGFuZGxlcikge1xuICAgIHJldHVybiBnZXRBZG1pbmlzdHJhdGlvbih0aGluZykuaW50ZXJjZXB0KGhhbmRsZXIpO1xufVxuZnVuY3Rpb24gaW50ZXJjZXB0UHJvcGVydHkodGhpbmcsIHByb3BlcnR5LCBoYW5kbGVyKSB7XG4gICAgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uKHRoaW5nLCBwcm9wZXJ0eSkuaW50ZXJjZXB0KGhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiBfaXNDb21wdXRlZCh2YWx1ZSwgcHJvcGVydHkpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChpc09ic2VydmFibGVPYmplY3QodmFsdWUpID09PSBmYWxzZSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKCF2YWx1ZVskbW9ieF0udmFsdWVzLmhhcyhwcm9wZXJ0eSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBhdG9tID0gZ2V0QXRvbSh2YWx1ZSwgcHJvcGVydHkpO1xuICAgICAgICByZXR1cm4gaXNDb21wdXRlZFZhbHVlKGF0b20pO1xuICAgIH1cbiAgICByZXR1cm4gaXNDb21wdXRlZFZhbHVlKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGlzQ29tcHV0ZWQodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpXG4gICAgICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICAgICAgXCJpc0NvbXB1dGVkIGV4cGVjdHMgb25seSAxIGFyZ3VtZW50LiBVc2UgaXNPYnNlcnZhYmxlUHJvcCB0byBpbnNwZWN0IHRoZSBvYnNlcnZhYmlsaXR5IG9mIGEgcHJvcGVydHlcIik7XG4gICAgcmV0dXJuIF9pc0NvbXB1dGVkKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGlzQ29tcHV0ZWRQcm9wKHZhbHVlLCBwcm9wTmFtZSkge1xuICAgIGlmICh0eXBlb2YgcHJvcE5hbWUgIT09IFwic3RyaW5nXCIpXG4gICAgICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICAgICAgXCJpc0NvbXB1dGVkIGV4cGVjdGVkIGEgcHJvcGVydHkgbmFtZSBhcyBzZWNvbmQgYXJndW1lbnRcIik7XG4gICAgcmV0dXJuIF9pc0NvbXB1dGVkKHZhbHVlLCBwcm9wTmFtZSk7XG59XG5cbmZ1bmN0aW9uIF9pc09ic2VydmFibGUodmFsdWUsIHByb3BlcnR5KSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICAgICAoaXNPYnNlcnZhYmxlTWFwKHZhbHVlKSB8fCBpc09ic2VydmFibGVBcnJheSh2YWx1ZSkpKVxuICAgICAgICAgICAgcmV0dXJuIGZhaWwoXCJpc09ic2VydmFibGUob2JqZWN0LCBwcm9wZXJ0eU5hbWUpIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIGFycmF5cyBhbmQgbWFwcy4gVXNlIG1hcC5oYXMgb3IgYXJyYXkubGVuZ3RoIGluc3RlYWQuXCIpO1xuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlWyRtb2J4XS52YWx1ZXMuaGFzKHByb3BlcnR5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIEZvciBmaXJzdCBjaGVjaywgc2VlICM3MDFcbiAgICByZXR1cm4gKGlzT2JzZXJ2YWJsZU9iamVjdCh2YWx1ZSkgfHxcbiAgICAgICAgISF2YWx1ZVskbW9ieF0gfHxcbiAgICAgICAgaXNBdG9tKHZhbHVlKSB8fFxuICAgICAgICBpc1JlYWN0aW9uKHZhbHVlKSB8fFxuICAgICAgICBpc0NvbXB1dGVkVmFsdWUodmFsdWUpKTtcbn1cbmZ1bmN0aW9uIGlzT2JzZXJ2YWJsZSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAxKVxuICAgICAgICBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICAgICAgXCJpc09ic2VydmFibGUgZXhwZWN0cyBvbmx5IDEgYXJndW1lbnQuIFVzZSBpc09ic2VydmFibGVQcm9wIHRvIGluc3BlY3QgdGhlIG9ic2VydmFiaWxpdHkgb2YgYSBwcm9wZXJ0eVwiKTtcbiAgICByZXR1cm4gX2lzT2JzZXJ2YWJsZSh2YWx1ZSk7XG59XG5mdW5jdGlvbiBpc09ic2VydmFibGVQcm9wKHZhbHVlLCBwcm9wTmFtZSkge1xuICAgIGlmICh0eXBlb2YgcHJvcE5hbWUgIT09IFwic3RyaW5nXCIpXG4gICAgICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBcImV4cGVjdGVkIGEgcHJvcGVydHkgbmFtZSBhcyBzZWNvbmQgYXJndW1lbnRcIik7XG4gICAgcmV0dXJuIF9pc09ic2VydmFibGUodmFsdWUsIHByb3BOYW1lKTtcbn1cblxuZnVuY3Rpb24ga2V5cyhvYmopIHtcbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9ialskbW9ieF0uZ2V0S2V5cygpO1xuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20ob2JqLmtleXMoKSk7XG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVTZXQob2JqKSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShvYmoua2V5cygpKTtcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai5tYXAoZnVuY3Rpb24gKF8sIGluZGV4KSB7IHJldHVybiBpbmRleDsgfSk7XG4gICAgfVxuICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICBcIidrZXlzKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMsIHNldHMgYW5kIG1hcHNcIik7XG59XG5mdW5jdGlvbiB2YWx1ZXMob2JqKSB7XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XG4gICAgICAgIHJldHVybiBrZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIG9ialtrZXldOyB9KTtcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopKSB7XG4gICAgICAgIHJldHVybiBrZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIG9iai5nZXQoa2V5KTsgfSk7XG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVTZXQob2JqKSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShvYmoudmFsdWVzKCkpO1xuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICBcIid2YWx1ZXMoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cywgc2V0cyBhbmQgbWFwc1wiKTtcbn1cbmZ1bmN0aW9uIGVudHJpZXMob2JqKSB7XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XG4gICAgICAgIHJldHVybiBrZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIFtrZXksIG9ialtrZXldXTsgfSk7XG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVNYXAob2JqKSkge1xuICAgICAgICByZXR1cm4ga2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBba2V5LCBvYmouZ2V0KGtleSldOyB9KTtcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZVNldChvYmopKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKG9iai5lbnRyaWVzKCkpO1xuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqLm1hcChmdW5jdGlvbiAoa2V5LCBpbmRleCkgeyByZXR1cm4gW2luZGV4LCBrZXldOyB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgIFwiJ2VudHJpZXMoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cyBhbmQgbWFwc1wiKTtcbn1cbmZ1bmN0aW9uIHNldChvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiAhaXNPYnNlcnZhYmxlU2V0KG9iaikpIHtcbiAgICAgICAgc3RhcnRCYXRjaCgpO1xuICAgICAgICB2YXIgdmFsdWVzXzEgPSBrZXk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXlfMSBpbiB2YWx1ZXNfMSlcbiAgICAgICAgICAgICAgICBzZXQob2JqLCBrZXlfMSwgdmFsdWVzXzFba2V5XzFdKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGVuZEJhdGNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KG9iaikpIHtcbiAgICAgICAgdmFyIGFkbSA9IG9ialskbW9ieF07XG4gICAgICAgIHZhciBleGlzdGluZ09ic2VydmFibGUgPSBhZG0udmFsdWVzLmdldChrZXkpO1xuICAgICAgICBpZiAoZXhpc3RpbmdPYnNlcnZhYmxlKSB7XG4gICAgICAgICAgICBhZG0ud3JpdGUoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhZG0uYWRkT2JzZXJ2YWJsZVByb3Aoa2V5LCB2YWx1ZSwgYWRtLmRlZmF1bHRFbmhhbmNlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcbiAgICAgICAgb2JqLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlU2V0KG9iaikpIHtcbiAgICAgICAgb2JqLmFkZChrZXkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09ic2VydmFibGVBcnJheShvYmopKSB7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSBcIm51bWJlclwiKVxuICAgICAgICAgICAga2V5ID0gcGFyc2VJbnQoa2V5LCAxMCk7XG4gICAgICAgIGludmFyaWFudChrZXkgPj0gMCwgXCJOb3QgYSB2YWxpZCBpbmRleDogJ1wiICsga2V5ICsgXCInXCIpO1xuICAgICAgICBzdGFydEJhdGNoKCk7XG4gICAgICAgIGlmIChrZXkgPj0gb2JqLmxlbmd0aClcbiAgICAgICAgICAgIG9iai5sZW5ndGggPSBrZXkgKyAxO1xuICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgICAgICBlbmRCYXRjaCgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICAgICBcIidzZXQoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cyBhbmQgbWFwc1wiKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZW1vdmUob2JqLCBrZXkpIHtcbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KG9iaikpIHtcbiAgICAgICAgb2JqWyRtb2J4XS5yZW1vdmUoa2V5KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcbiAgICAgICAgb2JqLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09ic2VydmFibGVTZXQob2JqKSkge1xuICAgICAgICBvYmouZGVsZXRlKGtleSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KG9iaikpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICBrZXkgPSBwYXJzZUludChrZXksIDEwKTtcbiAgICAgICAgaW52YXJpYW50KGtleSA+PSAwLCBcIk5vdCBhIHZhbGlkIGluZGV4OiAnXCIgKyBrZXkgKyBcIidcIik7XG4gICAgICAgIG9iai5zcGxpY2Uoa2V5LCAxKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICAgICAgXCIncmVtb3ZlKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIik7XG4gICAgfVxufVxuZnVuY3Rpb24gaGFzKG9iaiwga2V5KSB7XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XG4gICAgICAgIC8vIHJldHVybiBrZXlzKG9iaikuaW5kZXhPZihrZXkpID49IDBcbiAgICAgICAgdmFyIGFkbSA9IGdldEFkbWluaXN0cmF0aW9uKG9iaik7XG4gICAgICAgIHJldHVybiBhZG0uaGFzKGtleSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmouaGFzKGtleSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JzZXJ2YWJsZVNldChvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmouaGFzKGtleSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIGtleSA+PSAwICYmIGtleSA8IG9iai5sZW5ndGg7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgICAgIFwiJ2hhcygpJyBjYW4gb25seSBiZSB1c2VkIG9uIG9ic2VydmFibGUgb2JqZWN0cywgYXJyYXlzIGFuZCBtYXBzXCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldChvYmosIGtleSkge1xuICAgIGlmICghaGFzKG9iaiwga2V5KSlcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9ialtrZXldO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09ic2VydmFibGVNYXAob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqLmdldChrZXkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09ic2VydmFibGVBcnJheShvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmpba2V5XTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICAgICAgXCInZ2V0KCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBvYnNlcnZlKHRoaW5nLCBwcm9wT3JDYiwgY2JPckZpcmUsIGZpcmVJbW1lZGlhdGVseSkge1xuICAgIGlmICh0eXBlb2YgY2JPckZpcmUgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgcmV0dXJuIG9ic2VydmVPYnNlcnZhYmxlUHJvcGVydHkodGhpbmcsIHByb3BPckNiLCBjYk9yRmlyZSwgZmlyZUltbWVkaWF0ZWx5KTtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiBvYnNlcnZlT2JzZXJ2YWJsZSh0aGluZywgcHJvcE9yQ2IsIGNiT3JGaXJlKTtcbn1cbmZ1bmN0aW9uIG9ic2VydmVPYnNlcnZhYmxlKHRoaW5nLCBsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KSB7XG4gICAgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uKHRoaW5nKS5vYnNlcnZlKGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHkpO1xufVxuZnVuY3Rpb24gb2JzZXJ2ZU9ic2VydmFibGVQcm9wZXJ0eSh0aGluZywgcHJvcGVydHksIGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHkpIHtcbiAgICByZXR1cm4gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcsIHByb3BlcnR5KS5vYnNlcnZlKGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHkpO1xufVxuXG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgZGV0ZWN0Q3ljbGVzOiB0cnVlLFxuICAgIGV4cG9ydE1hcHNBc09iamVjdHM6IHRydWUsXG4gICAgcmVjdXJzZUV2ZXJ5dGhpbmc6IGZhbHNlXG59O1xuZnVuY3Rpb24gY2FjaGUobWFwLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuZGV0ZWN0Q3ljbGVzKVxuICAgICAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHRvSlNIZWxwZXIoc291cmNlLCBvcHRpb25zLCBfX2FscmVhZHlTZWVuKSB7XG4gICAgaWYgKCFvcHRpb25zLnJlY3Vyc2VFdmVyeXRoaW5nICYmICFpc09ic2VydmFibGUoc291cmNlKSlcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gXCJvYmplY3RcIilcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAvLyBEaXJlY3RseSByZXR1cm4gbnVsbCBpZiBzb3VyY2UgaXMgbnVsbFxuICAgIGlmIChzb3VyY2UgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIC8vIERpcmVjdGx5IHJldHVybiB0aGUgRGF0ZSBvYmplY3QgaXRzZWxmIGlmIGNvbnRhaW5lZCBpbiB0aGUgb2JzZXJ2YWJsZVxuICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBEYXRlKVxuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIGlmIChpc09ic2VydmFibGVWYWx1ZShzb3VyY2UpKVxuICAgICAgICByZXR1cm4gdG9KU0hlbHBlcihzb3VyY2UuZ2V0KCksIG9wdGlvbnMsIF9fYWxyZWFkeVNlZW4pO1xuICAgIC8vIG1ha2Ugc3VyZSB3ZSB0cmFjayB0aGUga2V5cyBvZiB0aGUgb2JqZWN0XG4gICAgaWYgKGlzT2JzZXJ2YWJsZShzb3VyY2UpKVxuICAgICAgICBrZXlzKHNvdXJjZSk7XG4gICAgdmFyIGRldGVjdEN5Y2xlcyA9IG9wdGlvbnMuZGV0ZWN0Q3ljbGVzID09PSB0cnVlO1xuICAgIGlmIChkZXRlY3RDeWNsZXMgJiYgc291cmNlICE9PSBudWxsICYmIF9fYWxyZWFkeVNlZW4uaGFzKHNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuIF9fYWxyZWFkeVNlZW4uZ2V0KHNvdXJjZSk7XG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVBcnJheShzb3VyY2UpIHx8IEFycmF5LmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICB2YXIgcmVzXzEgPSBjYWNoZShfX2FscmVhZHlTZWVuLCBzb3VyY2UsIFtdLCBvcHRpb25zKTtcbiAgICAgICAgdmFyIHRvQWRkID0gc291cmNlLm1hcChmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHRvSlNIZWxwZXIodmFsdWUsIG9wdGlvbnMsIF9fYWxyZWFkeVNlZW4pOyB9KTtcbiAgICAgICAgcmVzXzEubGVuZ3RoID0gdG9BZGQubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRvQWRkLmxlbmd0aDsgaSA8IGw7IGkrKylcbiAgICAgICAgICAgIHJlc18xW2ldID0gdG9BZGRbaV07XG4gICAgICAgIHJldHVybiByZXNfMTtcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZVNldChzb3VyY2UpIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihzb3VyY2UpID09PSBTZXQucHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmV4cG9ydE1hcHNBc09iamVjdHMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgcmVzXzIgPSBjYWNoZShfX2FscmVhZHlTZWVuLCBzb3VyY2UsIG5ldyBTZXQoKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXNfMi5hZGQodG9KU0hlbHBlcih2YWx1ZSwgb3B0aW9ucywgX19hbHJlYWR5U2VlbikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzXzI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgcmVzXzMgPSBjYWNoZShfX2FscmVhZHlTZWVuLCBzb3VyY2UsIFtdLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJlc18zLnB1c2godG9KU0hlbHBlcih2YWx1ZSwgb3B0aW9ucywgX19hbHJlYWR5U2VlbikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzXzM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU1hcChzb3VyY2UpIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihzb3VyY2UpID09PSBNYXAucHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmV4cG9ydE1hcHNBc09iamVjdHMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgcmVzXzQgPSBjYWNoZShfX2FscmVhZHlTZWVuLCBzb3VyY2UsIG5ldyBNYXAoKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgIHJlc180LnNldChrZXksIHRvSlNIZWxwZXIodmFsdWUsIG9wdGlvbnMsIF9fYWxyZWFkeVNlZW4pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc180O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHJlc181ID0gY2FjaGUoX19hbHJlYWR5U2Vlbiwgc291cmNlLCB7fSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgIHJlc181W2tleV0gPSB0b0pTSGVscGVyKHZhbHVlLCBvcHRpb25zLCBfX2FscmVhZHlTZWVuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc181O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEZhbGxiYWNrIHRvIHRoZSBzaXR1YXRpb24gdGhhdCBzb3VyY2UgaXMgYW4gT2JzZXJ2YWJsZU9iamVjdCBvciBhIHBsYWluIG9iamVjdFxuICAgIHZhciByZXMgPSBjYWNoZShfX2FscmVhZHlTZWVuLCBzb3VyY2UsIHt9LCBvcHRpb25zKTtcbiAgICBnZXRQbGFpbk9iamVjdEtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmVzW2tleV0gPSB0b0pTSGVscGVyKHNvdXJjZVtrZXldLCBvcHRpb25zLCBfX2FscmVhZHlTZWVuKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gdG9KUyhzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcImJvb2xlYW5cIilcbiAgICAgICAgb3B0aW9ucyA9IHsgZGV0ZWN0Q3ljbGVzOiBvcHRpb25zIH07XG4gICAgaWYgKCFvcHRpb25zKVxuICAgICAgICBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG4gICAgb3B0aW9ucy5kZXRlY3RDeWNsZXMgPVxuICAgICAgICBvcHRpb25zLmRldGVjdEN5Y2xlcyA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG9wdGlvbnMucmVjdXJzZUV2ZXJ5dGhpbmcgPT09IHRydWVcbiAgICAgICAgICAgIDogb3B0aW9ucy5kZXRlY3RDeWNsZXMgPT09IHRydWU7XG4gICAgdmFyIF9fYWxyZWFkeVNlZW47XG4gICAgaWYgKG9wdGlvbnMuZGV0ZWN0Q3ljbGVzKVxuICAgICAgICBfX2FscmVhZHlTZWVuID0gbmV3IE1hcCgpO1xuICAgIHJldHVybiB0b0pTSGVscGVyKHNvdXJjZSwgb3B0aW9ucywgX19hbHJlYWR5U2Vlbik7XG59XG5cbmZ1bmN0aW9uIHRyYWNlKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgZW50ZXJCcmVha1BvaW50ID0gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09IFwiYm9vbGVhblwiKVxuICAgICAgICBlbnRlckJyZWFrUG9pbnQgPSBhcmdzLnBvcCgpO1xuICAgIHZhciBkZXJpdmF0aW9uID0gZ2V0QXRvbUZyb21BcmdzKGFyZ3MpO1xuICAgIGlmICghZGVyaXZhdGlvbikge1xuICAgICAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgICAgIFwiJ3RyYWNlKGJyZWFrPyknIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIGEgdHJhY2tlZCBjb21wdXRlZCB2YWx1ZSBvciBhIFJlYWN0aW9uLiBDb25zaWRlciBwYXNzaW5nIGluIHRoZSBjb21wdXRlZCB2YWx1ZSBvciByZWFjdGlvbiBleHBsaWNpdGx5XCIpO1xuICAgIH1cbiAgICBpZiAoZGVyaXZhdGlvbi5pc1RyYWNpbmcgPT09IFRyYWNlTW9kZS5OT05FKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiW21vYngudHJhY2VdICdcIiArIGRlcml2YXRpb24ubmFtZSArIFwiJyB0cmFjaW5nIGVuYWJsZWRcIik7XG4gICAgfVxuICAgIGRlcml2YXRpb24uaXNUcmFjaW5nID0gZW50ZXJCcmVha1BvaW50ID8gVHJhY2VNb2RlLkJSRUFLIDogVHJhY2VNb2RlLkxPRztcbn1cbmZ1bmN0aW9uIGdldEF0b21Gcm9tQXJncyhhcmdzKSB7XG4gICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gZ2V0QXRvbShhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuIGdldEF0b20oYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgfVxufVxuXG4vKipcbiAqIER1cmluZyBhIHRyYW5zYWN0aW9uIG5vIHZpZXdzIGFyZSB1cGRhdGVkIHVudGlsIHRoZSBlbmQgb2YgdGhlIHRyYW5zYWN0aW9uLlxuICogVGhlIHRyYW5zYWN0aW9uIHdpbGwgYmUgcnVuIHN5bmNocm9ub3VzbHkgbm9uZXRoZWxlc3MuXG4gKlxuICogQHBhcmFtIGFjdGlvbiBhIGZ1bmN0aW9uIHRoYXQgdXBkYXRlcyBzb21lIHJlYWN0aXZlIHN0YXRlXG4gKiBAcmV0dXJucyBhbnkgdmFsdWUgdGhhdCB3YXMgcmV0dXJuZWQgYnkgdGhlICdhY3Rpb24nIHBhcmFtZXRlci5cbiAqL1xuZnVuY3Rpb24gdHJhbnNhY3Rpb24oYWN0aW9uLCB0aGlzQXJnKSB7XG4gICAgaWYgKHRoaXNBcmcgPT09IHZvaWQgMCkgeyB0aGlzQXJnID0gdW5kZWZpbmVkOyB9XG4gICAgc3RhcnRCYXRjaCgpO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24uYXBwbHkodGhpc0FyZyk7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBlbmRCYXRjaCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gd2hlbihwcmVkaWNhdGUsIGFyZzEsIGFyZzIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSB8fCAoYXJnMSAmJiB0eXBlb2YgYXJnMSA9PT0gXCJvYmplY3RcIikpXG4gICAgICAgIHJldHVybiB3aGVuUHJvbWlzZShwcmVkaWNhdGUsIGFyZzEpO1xuICAgIHJldHVybiBfd2hlbihwcmVkaWNhdGUsIGFyZzEsIGFyZzIgfHwge30pO1xufVxuZnVuY3Rpb24gX3doZW4ocHJlZGljYXRlLCBlZmZlY3QsIG9wdHMpIHtcbiAgICB2YXIgdGltZW91dEhhbmRsZTtcbiAgICBpZiAodHlwZW9mIG9wdHMudGltZW91dCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB0aW1lb3V0SGFuZGxlID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWRpc3Bvc2VyWyRtb2J4XS5pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICAgICAgZGlzcG9zZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoXCJXSEVOX1RJTUVPVVRcIik7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMub25FcnJvcilcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5vbkVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBvcHRzLnRpbWVvdXQpO1xuICAgIH1cbiAgICBvcHRzLm5hbWUgPSBvcHRzLm5hbWUgfHwgXCJXaGVuQFwiICsgZ2V0TmV4dElkKCk7XG4gICAgdmFyIGVmZmVjdEFjdGlvbiA9IGNyZWF0ZUFjdGlvbihvcHRzLm5hbWUgKyBcIi1lZmZlY3RcIiwgZWZmZWN0KTtcbiAgICB2YXIgZGlzcG9zZXIgPSBhdXRvcnVuKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUoKSkge1xuICAgICAgICAgICAgci5kaXNwb3NlKCk7XG4gICAgICAgICAgICBpZiAodGltZW91dEhhbmRsZSlcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dEhhbmRsZSk7XG4gICAgICAgICAgICBlZmZlY3RBY3Rpb24oKTtcbiAgICAgICAgfVxuICAgIH0sIG9wdHMpO1xuICAgIHJldHVybiBkaXNwb3Nlcjtcbn1cbmZ1bmN0aW9uIHdoZW5Qcm9taXNlKHByZWRpY2F0ZSwgb3B0cykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgb3B0cyAmJiBvcHRzLm9uRXJyb3IpXG4gICAgICAgIHJldHVybiBmYWlsKFwidGhlIG9wdGlvbnMgJ29uRXJyb3InIGFuZCAncHJvbWlzZScgY2Fubm90IGJlIGNvbWJpbmVkXCIpO1xuICAgIHZhciBjYW5jZWw7XG4gICAgdmFyIHJlcyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIGRpc3Bvc2VyID0gX3doZW4ocHJlZGljYXRlLCByZXNvbHZlLCBfX2Fzc2lnbih7fSwgb3B0cywgeyBvbkVycm9yOiByZWplY3QgfSkpO1xuICAgICAgICBjYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkaXNwb3NlcigpO1xuICAgICAgICAgICAgcmVqZWN0KFwiV0hFTl9DQU5DRUxMRURcIik7XG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcmVzLmNhbmNlbCA9IGNhbmNlbDtcbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBnZXRBZG0odGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRhcmdldFskbW9ieF07XG59XG5mdW5jdGlvbiBpc1Byb3BlcnR5S2V5KHZhbCkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHZhbCA9PT0gXCJzeW1ib2xcIjtcbn1cbi8vIE9wdGltaXphdGlvbjogd2UgZG9uJ3QgbmVlZCB0aGUgaW50ZXJtZWRpYXRlIG9iamVjdHMgYW5kIGNvdWxkIGhhdmUgYSBjb21wbGV0ZWx5IGN1c3RvbSBhZG1pbmlzdHJhdGlvbiBmb3IgRHluYW1pY09iamVjdHMsXG4vLyBhbmQgc2tpcCBlaXRoZXIgdGhlIGludGVybmFsIHZhbHVlcyBtYXAsIG9yIHRoZSBiYXNlIG9iamVjdCB3aXRoIGl0cyBwcm9wZXJ0eSBkZXNjcmlwdG9ycyFcbnZhciBvYmplY3RQcm94eVRyYXBzID0ge1xuICAgIGhhczogZnVuY3Rpb24gKHRhcmdldCwgbmFtZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gJG1vYnggfHwgbmFtZSA9PT0gXCJjb25zdHJ1Y3RvclwiIHx8IG5hbWUgPT09IG1vYnhEaWRSdW5MYXp5SW5pdGlhbGl6ZXJzU3ltYm9sKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIHZhciBhZG0gPSBnZXRBZG0odGFyZ2V0KTtcbiAgICAgICAgLy8gTVdFOiBzaG91bGQgYGluYCBvcGVyYXRvciBiZSByZWFjdGl2ZT8gSWYgbm90LCBiZWxvdyBjb2RlIHBhdGggd2lsbCBiZSBmYXN0ZXIgLyBtb3JlIG1lbW9yeSBlZmZpY2llbnRcbiAgICAgICAgLy8gVE9ETzogY2hlY2sgcGVyZm9ybWFuY2Ugc3RhdHMhXG4gICAgICAgIC8vIGlmIChhZG0udmFsdWVzLmdldChuYW1lIGFzIHN0cmluZykpIHJldHVybiB0cnVlXG4gICAgICAgIGlmIChpc1Byb3BlcnR5S2V5KG5hbWUpKVxuICAgICAgICAgICAgcmV0dXJuIGFkbS5oYXMobmFtZSk7XG4gICAgICAgIHJldHVybiBuYW1lIGluIHRhcmdldDtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gKHRhcmdldCwgbmFtZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gJG1vYnggfHwgbmFtZSA9PT0gXCJjb25zdHJ1Y3RvclwiIHx8IG5hbWUgPT09IG1vYnhEaWRSdW5MYXp5SW5pdGlhbGl6ZXJzU3ltYm9sKVxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtuYW1lXTtcbiAgICAgICAgdmFyIGFkbSA9IGdldEFkbSh0YXJnZXQpO1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IGFkbS52YWx1ZXMuZ2V0KG5hbWUpO1xuICAgICAgICBpZiAob2JzZXJ2YWJsZSBpbnN0YW5jZW9mIEF0b20pIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYnNlcnZhYmxlLmdldCgpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBmaXhlcyAjMTc5NiwgYmVjYXVzZSBkZWxldGluZyBhIHByb3AgdGhhdCBoYXMgYW5cbiAgICAgICAgICAgICAgICAvLyB1bmRlZmluZWQgdmFsdWUgd29uJ3QgcmV0cmlnZ2VyIGEgb2JzZXJ2ZXIgKG5vIHZpc2libGUgZWZmZWN0KSxcbiAgICAgICAgICAgICAgICAvLyB0aGUgYXV0b3J1biB3b3VsZG4ndCBzdWJzY3JpYmUgdG8gZnV0dXJlIGtleSBjaGFuZ2VzIChzZWUgYWxzbyBuZXh0IGNvbW1lbnQpXG4gICAgICAgICAgICAgICAgYWRtLmhhcyhuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWFrZSBzdXJlIHdlIHN0YXJ0IGxpc3RlbmluZyB0byBmdXR1cmUga2V5c1xuICAgICAgICAvLyBub3RlIHRoYXQgd2Ugb25seSBkbyB0aGlzIGhlcmUgZm9yIG9wdGltaXphdGlvblxuICAgICAgICBpZiAoaXNQcm9wZXJ0eUtleShuYW1lKSlcbiAgICAgICAgICAgIGFkbS5oYXMobmFtZSk7XG4gICAgICAgIHJldHVybiB0YXJnZXRbbmFtZV07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmICghaXNQcm9wZXJ0eUtleShuYW1lKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgc2V0KHRhcmdldCwgbmFtZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lKSB7XG4gICAgICAgIGlmICghaXNQcm9wZXJ0eUtleShuYW1lKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGFkbSA9IGdldEFkbSh0YXJnZXQpO1xuICAgICAgICBhZG0ucmVtb3ZlKG5hbWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIG93bktleXM6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIGFkbSA9IGdldEFkbSh0YXJnZXQpO1xuICAgICAgICBhZG0ua2V5c0F0b20ucmVwb3J0T2JzZXJ2ZWQoKTtcbiAgICAgICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xuICAgIH0sXG4gICAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgZmFpbChcIkR5bmFtaWMgb2JzZXJ2YWJsZSBvYmplY3RzIGNhbm5vdCBiZSBmcm96ZW5cIik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlRHluYW1pY09ic2VydmFibGVPYmplY3QoYmFzZSkge1xuICAgIHZhciBwcm94eSA9IG5ldyBQcm94eShiYXNlLCBvYmplY3RQcm94eVRyYXBzKTtcbiAgICBiYXNlWyRtb2J4XS5wcm94eSA9IHByb3h5O1xuICAgIHJldHVybiBwcm94eTtcbn1cblxuZnVuY3Rpb24gaGFzSW50ZXJjZXB0b3JzKGludGVyY2VwdGFibGUpIHtcbiAgICByZXR1cm4gaW50ZXJjZXB0YWJsZS5pbnRlcmNlcHRvcnMgIT09IHVuZGVmaW5lZCAmJiBpbnRlcmNlcHRhYmxlLmludGVyY2VwdG9ycy5sZW5ndGggPiAwO1xufVxuZnVuY3Rpb24gcmVnaXN0ZXJJbnRlcmNlcHRvcihpbnRlcmNlcHRhYmxlLCBoYW5kbGVyKSB7XG4gICAgdmFyIGludGVyY2VwdG9ycyA9IGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzIHx8IChpbnRlcmNlcHRhYmxlLmludGVyY2VwdG9ycyA9IFtdKTtcbiAgICBpbnRlcmNlcHRvcnMucHVzaChoYW5kbGVyKTtcbiAgICByZXR1cm4gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpZHggPSBpbnRlcmNlcHRvcnMuaW5kZXhPZihoYW5kbGVyKTtcbiAgICAgICAgaWYgKGlkeCAhPT0gLTEpXG4gICAgICAgICAgICBpbnRlcmNlcHRvcnMuc3BsaWNlKGlkeCwgMSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBpbnRlcmNlcHRDaGFuZ2UoaW50ZXJjZXB0YWJsZSwgY2hhbmdlKSB7XG4gICAgdmFyIHByZXZVID0gdW50cmFja2VkU3RhcnQoKTtcbiAgICB0cnkge1xuICAgICAgICB2YXIgaW50ZXJjZXB0b3JzID0gaW50ZXJjZXB0YWJsZS5pbnRlcmNlcHRvcnM7XG4gICAgICAgIGlmIChpbnRlcmNlcHRvcnMpXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGludGVyY2VwdG9ycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2UgPSBpbnRlcmNlcHRvcnNbaV0oY2hhbmdlKTtcbiAgICAgICAgICAgICAgICBpbnZhcmlhbnQoIWNoYW5nZSB8fCBjaGFuZ2UudHlwZSwgXCJJbnRlcmNlcHQgaGFuZGxlcnMgc2hvdWxkIHJldHVybiBub3RoaW5nIG9yIGEgY2hhbmdlIG9iamVjdFwiKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNoYW5nZSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB1bnRyYWNrZWRFbmQocHJldlUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaGFzTGlzdGVuZXJzKGxpc3RlbmFibGUpIHtcbiAgICByZXR1cm4gbGlzdGVuYWJsZS5jaGFuZ2VMaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCAmJiBsaXN0ZW5hYmxlLmNoYW5nZUxpc3RlbmVycy5sZW5ndGggPiAwO1xufVxuZnVuY3Rpb24gcmVnaXN0ZXJMaXN0ZW5lcihsaXN0ZW5hYmxlLCBoYW5kbGVyKSB7XG4gICAgdmFyIGxpc3RlbmVycyA9IGxpc3RlbmFibGUuY2hhbmdlTGlzdGVuZXJzIHx8IChsaXN0ZW5hYmxlLmNoYW5nZUxpc3RlbmVycyA9IFtdKTtcbiAgICBsaXN0ZW5lcnMucHVzaChoYW5kbGVyKTtcbiAgICByZXR1cm4gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpZHggPSBsaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKTtcbiAgICAgICAgaWYgKGlkeCAhPT0gLTEpXG4gICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGlkeCwgMSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMobGlzdGVuYWJsZSwgY2hhbmdlKSB7XG4gICAgdmFyIHByZXZVID0gdW50cmFja2VkU3RhcnQoKTtcbiAgICB2YXIgbGlzdGVuZXJzID0gbGlzdGVuYWJsZS5jaGFuZ2VMaXN0ZW5lcnM7XG4gICAgaWYgKCFsaXN0ZW5lcnMpXG4gICAgICAgIHJldHVybjtcbiAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbGlzdGVuZXJzW2ldKGNoYW5nZSk7XG4gICAgfVxuICAgIHVudHJhY2tlZEVuZChwcmV2VSk7XG59XG5cbnZhciBNQVhfU1BMSUNFX1NJWkUgPSAxMDAwMDsgLy8gU2VlIGUuZy4gaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4L2lzc3Vlcy84NTlcbnZhciBhcnJheVRyYXBzID0ge1xuICAgIGdldDogZnVuY3Rpb24gKHRhcmdldCwgbmFtZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gJG1vYngpXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0WyRtb2J4XTtcbiAgICAgICAgaWYgKG5hbWUgPT09IFwibGVuZ3RoXCIpXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0WyRtb2J4XS5nZXRBcnJheUxlbmd0aCgpO1xuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnJheUV4dGVuc2lvbnMuZ2V0LmNhbGwodGFyZ2V0LCBuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIgJiYgIWlzTmFOKG5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlFeHRlbnNpb25zLmdldC5jYWxsKHRhcmdldCwgcGFyc2VJbnQobmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcnJheUV4dGVuc2lvbnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnJheUV4dGVuc2lvbnNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldFtuYW1lXTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHRhcmdldCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09IFwibGVuZ3RoXCIpIHtcbiAgICAgICAgICAgIHRhcmdldFskbW9ieF0uc2V0QXJyYXlMZW5ndGgodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgYXJyYXlFeHRlbnNpb25zLnNldC5jYWxsKHRhcmdldCwgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIiB8fCBpc05hTihuYW1lKSkge1xuICAgICAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBudW1lcmljIHN0cmluZ1xuICAgICAgICAgICAgYXJyYXlFeHRlbnNpb25zLnNldC5jYWxsKHRhcmdldCwgcGFyc2VJbnQobmFtZSksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGZhaWwoXCJPYnNlcnZhYmxlIGFycmF5cyBjYW5ub3QgYmUgZnJvemVuXCIpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZU9ic2VydmFibGVBcnJheShpbml0aWFsVmFsdWVzLCBlbmhhbmNlciwgbmFtZSwgb3duZWQpIHtcbiAgICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7IG5hbWUgPSBcIk9ic2VydmFibGVBcnJheUBcIiArIGdldE5leHRJZCgpOyB9XG4gICAgaWYgKG93bmVkID09PSB2b2lkIDApIHsgb3duZWQgPSBmYWxzZTsgfVxuICAgIHZhciBhZG0gPSBuZXcgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24obmFtZSwgZW5oYW5jZXIsIG93bmVkKTtcbiAgICBhZGRIaWRkZW5GaW5hbFByb3AoYWRtLnZhbHVlcywgJG1vYngsIGFkbSk7XG4gICAgdmFyIHByb3h5ID0gbmV3IFByb3h5KGFkbS52YWx1ZXMsIGFycmF5VHJhcHMpO1xuICAgIGFkbS5wcm94eSA9IHByb3h5O1xuICAgIGlmIChpbml0aWFsVmFsdWVzICYmIGluaXRpYWxWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBwcmV2ID0gYWxsb3dTdGF0ZUNoYW5nZXNTdGFydCh0cnVlKTtcbiAgICAgICAgYWRtLnNwbGljZVdpdGhBcnJheSgwLCAwLCBpbml0aWFsVmFsdWVzKTtcbiAgICAgICAgYWxsb3dTdGF0ZUNoYW5nZXNFbmQocHJldik7XG4gICAgfVxuICAgIHJldHVybiBwcm94eTtcbn1cbnZhciBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbihuYW1lLCBlbmhhbmNlciwgb3duZWQpIHtcbiAgICAgICAgdGhpcy5vd25lZCA9IG93bmVkO1xuICAgICAgICB0aGlzLnZhbHVlcyA9IFtdO1xuICAgICAgICB0aGlzLnByb3h5ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxhc3RLbm93bkxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuYXRvbSA9IG5ldyBBdG9tKG5hbWUgfHwgXCJPYnNlcnZhYmxlQXJyYXlAXCIgKyBnZXROZXh0SWQoKSk7XG4gICAgICAgIHRoaXMuZW5oYW5jZXIgPSBmdW5jdGlvbiAobmV3Viwgb2xkVikgeyByZXR1cm4gZW5oYW5jZXIobmV3Viwgb2xkViwgbmFtZSArIFwiWy4uXVwiKTsgfTtcbiAgICB9XG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLmRlaGFuY2VWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5kZWhhbmNlciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZXIodmFsdWUpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUuZGVoYW5jZVZhbHVlcyA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVoYW5jZXIgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZXMubGVuZ3RoID4gMClcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXMubWFwKHRoaXMuZGVoYW5jZXIpO1xuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLmludGVyY2VwdCA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiByZWdpc3RlckludGVyY2VwdG9yKHRoaXMsIGhhbmRsZXIpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAobGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseSkge1xuICAgICAgICBpZiAoZmlyZUltbWVkaWF0ZWx5ID09PSB2b2lkIDApIHsgZmlyZUltbWVkaWF0ZWx5ID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKGZpcmVJbW1lZGlhdGVseSkge1xuICAgICAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eSxcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNwbGljZVwiLFxuICAgICAgICAgICAgICAgIGluZGV4OiAwLFxuICAgICAgICAgICAgICAgIGFkZGVkOiB0aGlzLnZhbHVlcy5zbGljZSgpLFxuICAgICAgICAgICAgICAgIGFkZGVkQ291bnQ6IHRoaXMudmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICByZW1vdmVkOiBbXSxcbiAgICAgICAgICAgICAgICByZW1vdmVkQ291bnQ6IDBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWdpc3Rlckxpc3RlbmVyKHRoaXMsIGxpc3RlbmVyKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5nZXRBcnJheUxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hdG9tLnJlcG9ydE9ic2VydmVkKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlcy5sZW5ndGg7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUuc2V0QXJyYXlMZW5ndGggPSBmdW5jdGlvbiAobmV3TGVuZ3RoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmV3TGVuZ3RoICE9PSBcIm51bWJlclwiIHx8IG5ld0xlbmd0aCA8IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbbW9ieC5hcnJheV0gT3V0IG9mIHJhbmdlOiBcIiArIG5ld0xlbmd0aCk7XG4gICAgICAgIHZhciBjdXJyZW50TGVuZ3RoID0gdGhpcy52YWx1ZXMubGVuZ3RoO1xuICAgICAgICBpZiAobmV3TGVuZ3RoID09PSBjdXJyZW50TGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBlbHNlIGlmIChuZXdMZW5ndGggPiBjdXJyZW50TGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgbmV3SXRlbXMgPSBuZXcgQXJyYXkobmV3TGVuZ3RoIC0gY3VycmVudExlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0xlbmd0aCAtIGN1cnJlbnRMZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICBuZXdJdGVtc1tpXSA9IHVuZGVmaW5lZDsgLy8gTm8gQXJyYXkuZmlsbCBldmVyeXdoZXJlLi4uXG4gICAgICAgICAgICB0aGlzLnNwbGljZVdpdGhBcnJheShjdXJyZW50TGVuZ3RoLCAwLCBuZXdJdGVtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5zcGxpY2VXaXRoQXJyYXkobmV3TGVuZ3RoLCBjdXJyZW50TGVuZ3RoIC0gbmV3TGVuZ3RoKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS51cGRhdGVBcnJheUxlbmd0aCA9IGZ1bmN0aW9uIChvbGRMZW5ndGgsIGRlbHRhKSB7XG4gICAgICAgIGlmIChvbGRMZW5ndGggIT09IHRoaXMubGFzdEtub3duTGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW21vYnhdIE1vZGlmaWNhdGlvbiBleGNlcHRpb246IHRoZSBpbnRlcm5hbCBzdHJ1Y3R1cmUgb2YgYW4gb2JzZXJ2YWJsZSBhcnJheSB3YXMgY2hhbmdlZC5cIik7XG4gICAgICAgIHRoaXMubGFzdEtub3duTGVuZ3RoICs9IGRlbHRhO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLnNwbGljZVdpdGhBcnJheSA9IGZ1bmN0aW9uIChpbmRleCwgZGVsZXRlQ291bnQsIG5ld0l0ZW1zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkKHRoaXMuYXRvbSk7XG4gICAgICAgIHZhciBsZW5ndGggPSB0aGlzLnZhbHVlcy5sZW5ndGg7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICBlbHNlIGlmIChpbmRleCA+IGxlbmd0aClcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICBlbHNlIGlmIChpbmRleCA8IDApXG4gICAgICAgICAgICBpbmRleCA9IE1hdGgubWF4KDAsIGxlbmd0aCArIGluZGV4KTtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IGxlbmd0aCAtIGluZGV4O1xuICAgICAgICBlbHNlIGlmIChkZWxldGVDb3VudCA9PT0gdW5kZWZpbmVkIHx8IGRlbGV0ZUNvdW50ID09PSBudWxsKVxuICAgICAgICAgICAgZGVsZXRlQ291bnQgPSAwO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGRlbGV0ZUNvdW50LCBsZW5ndGggLSBpbmRleCkpO1xuICAgICAgICBpZiAobmV3SXRlbXMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIG5ld0l0ZW1zID0gRU1QVFlfQVJSQVk7XG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2UodGhpcywge1xuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eSxcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNwbGljZVwiLFxuICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICAgICAgICByZW1vdmVkQ291bnQ6IGRlbGV0ZUNvdW50LFxuICAgICAgICAgICAgICAgIGFkZGVkOiBuZXdJdGVtc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWNoYW5nZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gRU1QVFlfQVJSQVk7XG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IGNoYW5nZS5yZW1vdmVkQ291bnQ7XG4gICAgICAgICAgICBuZXdJdGVtcyA9IGNoYW5nZS5hZGRlZDtcbiAgICAgICAgfVxuICAgICAgICBuZXdJdGVtcyA9IG5ld0l0ZW1zLmxlbmd0aCA9PT0gMCA/IG5ld0l0ZW1zIDogbmV3SXRlbXMubWFwKGZ1bmN0aW9uICh2KSB7IHJldHVybiBfdGhpcy5lbmhhbmNlcih2LCB1bmRlZmluZWQpOyB9KTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgdmFyIGxlbmd0aERlbHRhID0gbmV3SXRlbXMubGVuZ3RoIC0gZGVsZXRlQ291bnQ7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUFycmF5TGVuZ3RoKGxlbmd0aCwgbGVuZ3RoRGVsdGEpOyAvLyBjaGVja3MgaWYgaW50ZXJuYWwgYXJyYXkgd2Fzbid0IG1vZGlmaWVkXG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlcyA9IHRoaXMuc3BsaWNlSXRlbXNJbnRvVmFsdWVzKGluZGV4LCBkZWxldGVDb3VudCwgbmV3SXRlbXMpO1xuICAgICAgICBpZiAoZGVsZXRlQ291bnQgIT09IDAgfHwgbmV3SXRlbXMubGVuZ3RoICE9PSAwKVxuICAgICAgICAgICAgdGhpcy5ub3RpZnlBcnJheVNwbGljZShpbmRleCwgbmV3SXRlbXMsIHJlcyk7XG4gICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZXMocmVzKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5zcGxpY2VJdGVtc0ludG9WYWx1ZXMgPSBmdW5jdGlvbiAoaW5kZXgsIGRlbGV0ZUNvdW50LCBuZXdJdGVtcykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChuZXdJdGVtcy5sZW5ndGggPCBNQVhfU1BMSUNFX1NJWkUpIHtcbiAgICAgICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnZhbHVlcykuc3BsaWNlLmFwcGx5KF9hLCBfX3NwcmVhZChbaW5kZXgsIGRlbGV0ZUNvdW50XSwgbmV3SXRlbXMpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLnZhbHVlcy5zbGljZShpbmRleCwgaW5kZXggKyBkZWxldGVDb3VudCk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlcyA9IHRoaXMudmFsdWVzXG4gICAgICAgICAgICAgICAgLnNsaWNlKDAsIGluZGV4KVxuICAgICAgICAgICAgICAgIC5jb25jYXQobmV3SXRlbXMsIHRoaXMudmFsdWVzLnNsaWNlKGluZGV4ICsgZGVsZXRlQ291bnQpKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5ub3RpZnlBcnJheUNoaWxkVXBkYXRlID0gZnVuY3Rpb24gKGluZGV4LCBuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgdmFyIG5vdGlmeVNweSA9ICF0aGlzLm93bmVkICYmIGlzU3B5RW5hYmxlZCgpO1xuICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xuICAgICAgICB2YXIgY2hhbmdlID0gbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5LFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCIsXG4gICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZTogb2xkVmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgLy8gVGhlIHJlYXNvbiB3aHkgdGhpcyBpcyBvbiByaWdodCBoYW5kIHNpZGUgaGVyZSAoYW5kIG5vdCBhYm92ZSksIGlzIHRoaXMgd2F5IHRoZSB1Z2xpZmllciB3aWxsIGRyb3AgaXQsIGJ1dCBpdCB3b24ndFxuICAgICAgICAvLyBjYXVzZSBhbnkgcnVudGltZSBvdmVyaGVhZCBpbiBkZXZlbG9wbWVudCBtb2RlIHdpdGhvdXQgTk9ERV9FTlYgc2V0LCB1bmxlc3Mgc3B5aW5nIGlzIGVuYWJsZWRcbiAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXG4gICAgICAgICAgICBzcHlSZXBvcnRTdGFydChfX2Fzc2lnbih7fSwgY2hhbmdlLCB7IG5hbWU6IHRoaXMuYXRvbS5uYW1lIH0pKTtcbiAgICAgICAgdGhpcy5hdG9tLnJlcG9ydENoYW5nZWQoKTtcbiAgICAgICAgaWYgKG5vdGlmeSlcbiAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpO1xuICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcbiAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLm5vdGlmeUFycmF5U3BsaWNlID0gZnVuY3Rpb24gKGluZGV4LCBhZGRlZCwgcmVtb3ZlZCkge1xuICAgICAgICB2YXIgbm90aWZ5U3B5ID0gIXRoaXMub3duZWQgJiYgaXNTcHlFbmFibGVkKCk7XG4gICAgICAgIHZhciBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcyk7XG4gICAgICAgIHZhciBjaGFuZ2UgPSBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHksXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzcGxpY2VcIixcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgICAgICAgcmVtb3ZlZDogcmVtb3ZlZCxcbiAgICAgICAgICAgICAgICBhZGRlZDogYWRkZWQsXG4gICAgICAgICAgICAgICAgcmVtb3ZlZENvdW50OiByZW1vdmVkLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBhZGRlZENvdW50OiBhZGRlZC5sZW5ndGhcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXG4gICAgICAgICAgICBzcHlSZXBvcnRTdGFydChfX2Fzc2lnbih7fSwgY2hhbmdlLCB7IG5hbWU6IHRoaXMuYXRvbS5uYW1lIH0pKTtcbiAgICAgICAgdGhpcy5hdG9tLnJlcG9ydENoYW5nZWQoKTtcbiAgICAgICAgLy8gY29uZm9ybTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvb2JzZXJ2ZVxuICAgICAgICBpZiAobm90aWZ5KVxuICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSk7XG4gICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxuICAgICAgICAgICAgc3B5UmVwb3J0RW5kKCk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb247XG59KCkpO1xudmFyIGFycmF5RXh0ZW5zaW9ucyA9IHtcbiAgICBpbnRlcmNlcHQ6IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzWyRtb2J4XS5pbnRlcmNlcHQoaGFuZGxlcik7XG4gICAgfSxcbiAgICBvYnNlcnZlOiBmdW5jdGlvbiAobGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseSkge1xuICAgICAgICBpZiAoZmlyZUltbWVkaWF0ZWx5ID09PSB2b2lkIDApIHsgZmlyZUltbWVkaWF0ZWx5ID0gZmFsc2U7IH1cbiAgICAgICAgdmFyIGFkbSA9IHRoaXNbJG1vYnhdO1xuICAgICAgICByZXR1cm4gYWRtLm9ic2VydmUobGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseSk7XG4gICAgfSxcbiAgICBjbGVhcjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpY2UoMCk7XG4gICAgfSxcbiAgICByZXBsYWNlOiBmdW5jdGlvbiAobmV3SXRlbXMpIHtcbiAgICAgICAgdmFyIGFkbSA9IHRoaXNbJG1vYnhdO1xuICAgICAgICByZXR1cm4gYWRtLnNwbGljZVdpdGhBcnJheSgwLCBhZG0udmFsdWVzLmxlbmd0aCwgbmV3SXRlbXMpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhpcyBhcnJheSBiYWNrIHRvIGEgKHNoYWxsb3cpIGphdmFzY3JpcHQgc3RydWN0dXJlLlxuICAgICAqIEZvciBhIGRlZXAgY2xvbmUgdXNlIG1vYngudG9KU1xuICAgICAqL1xuICAgIHRvSlM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2xpY2UoKTtcbiAgICB9LFxuICAgIHRvSlNPTjogZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBVc2VkIGJ5IEpTT04uc3RyaW5naWZ5XG4gICAgICAgIHJldHVybiB0aGlzLnRvSlMoKTtcbiAgICB9LFxuICAgIC8qXG4gICAgICogZnVuY3Rpb25zIHRoYXQgZG8gYWx0ZXIgdGhlIGludGVybmFsIHN0cnVjdHVyZSBvZiB0aGUgYXJyYXksIChiYXNlZCBvbiBsaWIuZXM2LmQudHMpXG4gICAgICogc2luY2UgdGhlc2UgZnVuY3Rpb25zIGFsdGVyIHRoZSBpbm5lciBzdHJ1Y3R1cmUgb2YgdGhlIGFycmF5LCB0aGUgaGF2ZSBzaWRlIGVmZmVjdHMuXG4gICAgICogQmVjYXVzZSB0aGUgaGF2ZSBzaWRlIGVmZmVjdHMsIHRoZXkgc2hvdWxkIG5vdCBiZSB1c2VkIGluIGNvbXB1dGVkIGZ1bmN0aW9uLFxuICAgICAqIGFuZCBmb3IgdGhhdCByZWFzb24gdGhlIGRvIG5vdCBjYWxsIGRlcGVuZGVuY3lTdGF0ZS5ub3RpZnlPYnNlcnZlZFxuICAgICAqL1xuICAgIHNwbGljZTogZnVuY3Rpb24gKGluZGV4LCBkZWxldGVDb3VudCkge1xuICAgICAgICB2YXIgbmV3SXRlbXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG5ld0l0ZW1zW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhZG0gPSB0aGlzWyRtb2J4XTtcbiAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBhZG0uc3BsaWNlV2l0aEFycmF5KGluZGV4KTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRtLnNwbGljZVdpdGhBcnJheShpbmRleCwgZGVsZXRlQ291bnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhZG0uc3BsaWNlV2l0aEFycmF5KGluZGV4LCBkZWxldGVDb3VudCwgbmV3SXRlbXMpO1xuICAgIH0sXG4gICAgc3BsaWNlV2l0aEFycmF5OiBmdW5jdGlvbiAoaW5kZXgsIGRlbGV0ZUNvdW50LCBuZXdJdGVtcykge1xuICAgICAgICB2YXIgYWRtID0gdGhpc1skbW9ieF07XG4gICAgICAgIHJldHVybiBhZG0uc3BsaWNlV2l0aEFycmF5KGluZGV4LCBkZWxldGVDb3VudCwgbmV3SXRlbXMpO1xuICAgIH0sXG4gICAgcHVzaDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGl0ZW1zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFkbSA9IHRoaXNbJG1vYnhdO1xuICAgICAgICBhZG0uc3BsaWNlV2l0aEFycmF5KGFkbS52YWx1ZXMubGVuZ3RoLCAwLCBpdGVtcyk7XG4gICAgICAgIHJldHVybiBhZG0udmFsdWVzLmxlbmd0aDtcbiAgICB9LFxuICAgIHBvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpY2UoTWF0aC5tYXgodGhpc1skbW9ieF0udmFsdWVzLmxlbmd0aCAtIDEsIDApLCAxKVswXTtcbiAgICB9LFxuICAgIHNoaWZ0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGljZSgwLCAxKVswXTtcbiAgICB9LFxuICAgIHVuc2hpZnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGl0ZW1zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBpdGVtc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhZG0gPSB0aGlzWyRtb2J4XTtcbiAgICAgICAgYWRtLnNwbGljZVdpdGhBcnJheSgwLCAwLCBpdGVtcyk7XG4gICAgICAgIHJldHVybiBhZG0udmFsdWVzLmxlbmd0aDtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gcmV2ZXJzZSBieSBkZWZhdWx0IG11dGF0ZXMgaW4gcGxhY2UgYmVmb3JlIHJldHVybmluZyB0aGUgcmVzdWx0XG4gICAgICAgIC8vIHdoaWNoIG1ha2VzIGl0IGJvdGggYSAnZGVyaXZhdGlvbicgYW5kIGEgJ211dGF0aW9uJy5cbiAgICAgICAgLy8gc28gd2UgZGV2aWF0ZSBmcm9tIHRoZSBkZWZhdWx0IGFuZCBqdXN0IG1ha2UgaXQgYW4gZGVydml0YXRpb25cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW21vYnhdIGBvYnNlcnZhYmxlQXJyYXkucmV2ZXJzZSgpYCB3aWxsIG5vdCB1cGRhdGUgdGhlIGFycmF5IGluIHBsYWNlLiBVc2UgYG9ic2VydmFibGVBcnJheS5zbGljZSgpLnJldmVyc2UoKWAgdG8gc3VwcHJlc3MgdGhpcyB3YXJuaW5nIGFuZCBwZXJmb3JtIHRoZSBvcGVyYXRpb24gb24gYSBjb3B5LCBvciBgb2JzZXJ2YWJsZUFycmF5LnJlcGxhY2Uob2JzZXJ2YWJsZUFycmF5LnNsaWNlKCkucmV2ZXJzZSgpKWAgdG8gcmV2ZXJzZSAmIHVwZGF0ZSBpbiBwbGFjZVwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2xvbmUgPSB0aGlzLnNsaWNlKCk7XG4gICAgICAgIHJldHVybiBjbG9uZS5yZXZlcnNlLmFwcGx5KGNsb25lLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc29ydDogZnVuY3Rpb24gKGNvbXBhcmVGbikge1xuICAgICAgICAvLyBzb3J0IGJ5IGRlZmF1bHQgbXV0YXRlcyBpbiBwbGFjZSBiZWZvcmUgcmV0dXJuaW5nIHRoZSByZXN1bHRcbiAgICAgICAgLy8gd2hpY2ggZ29lcyBhZ2FpbnN0IGFsbCBnb29kIHByYWN0aWNlcy4gTGV0J3Mgbm90IGNoYW5nZSB0aGUgYXJyYXkgaW4gcGxhY2UhXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlttb2J4XSBgb2JzZXJ2YWJsZUFycmF5LnNvcnQoKWAgd2lsbCBub3QgdXBkYXRlIHRoZSBhcnJheSBpbiBwbGFjZS4gVXNlIGBvYnNlcnZhYmxlQXJyYXkuc2xpY2UoKS5zb3J0KClgIHRvIHN1cHByZXNzIHRoaXMgd2FybmluZyBhbmQgcGVyZm9ybSB0aGUgb3BlcmF0aW9uIG9uIGEgY29weSwgb3IgYG9ic2VydmFibGVBcnJheS5yZXBsYWNlKG9ic2VydmFibGVBcnJheS5zbGljZSgpLnNvcnQoKSlgIHRvIHNvcnQgJiB1cGRhdGUgaW4gcGxhY2VcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNsb25lID0gdGhpcy5zbGljZSgpO1xuICAgICAgICByZXR1cm4gY2xvbmUuc29ydC5hcHBseShjbG9uZSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBhZG0gPSB0aGlzWyRtb2J4XTtcbiAgICAgICAgdmFyIGlkeCA9IGFkbS5kZWhhbmNlVmFsdWVzKGFkbS52YWx1ZXMpLmluZGV4T2YodmFsdWUpO1xuICAgICAgICBpZiAoaWR4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgYWRtID0gdGhpc1skbW9ieF07XG4gICAgICAgIGlmIChhZG0pIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IGFkbS52YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYWRtLmF0b20ucmVwb3J0T2JzZXJ2ZWQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRtLmRlaGFuY2VWYWx1ZShhZG0udmFsdWVzW2luZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJbbW9ieC5hcnJheV0gQXR0ZW1wdCB0byByZWFkIGFuIGFycmF5IGluZGV4IChcIiArIGluZGV4ICsgXCIpIHRoYXQgaXMgb3V0IG9mIGJvdW5kcyAoXCIgKyBhZG0udmFsdWVzLmxlbmd0aCArIFwiKS4gUGxlYXNlIGNoZWNrIGxlbmd0aCBmaXJzdC4gT3V0IG9mIGJvdW5kIGluZGljZXMgd2lsbCBub3QgYmUgdHJhY2tlZCBieSBNb2JYXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChpbmRleCwgbmV3VmFsdWUpIHtcbiAgICAgICAgdmFyIGFkbSA9IHRoaXNbJG1vYnhdO1xuICAgICAgICB2YXIgdmFsdWVzID0gYWRtLnZhbHVlcztcbiAgICAgICAgaWYgKGluZGV4IDwgdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gdXBkYXRlIGF0IGluZGV4IGluIHJhbmdlXG4gICAgICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZChhZG0uYXRvbSk7XG4gICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyhhZG0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoYW5nZSA9IGludGVyY2VwdENoYW5nZShhZG0sIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiBhZG0ucHJveHksXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKCFjaGFuZ2UpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IGNoYW5nZS5uZXdWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld1ZhbHVlID0gYWRtLmVuaGFuY2VyKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgICB2YXIgY2hhbmdlZCA9IG5ld1ZhbHVlICE9PSBvbGRWYWx1ZTtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzW2luZGV4XSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgIGFkbS5ub3RpZnlBcnJheUNoaWxkVXBkYXRlKGluZGV4LCBuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluZGV4ID09PSB2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBhZGQgYSBuZXcgaXRlbVxuICAgICAgICAgICAgYWRtLnNwbGljZVdpdGhBcnJheShpbmRleCwgMCwgW25ld1ZhbHVlXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBvdXQgb2YgYm91bmRzXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbbW9ieC5hcnJheV0gSW5kZXggb3V0IG9mIGJvdW5kcywgXCIgKyBpbmRleCArIFwiIGlzIGxhcmdlciB0aGFuIFwiICsgdmFsdWVzLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuW1xuICAgIFwiY29uY2F0XCIsXG4gICAgXCJldmVyeVwiLFxuICAgIFwiZmlsdGVyXCIsXG4gICAgXCJmb3JFYWNoXCIsXG4gICAgXCJpbmRleE9mXCIsXG4gICAgXCJqb2luXCIsXG4gICAgXCJsYXN0SW5kZXhPZlwiLFxuICAgIFwibWFwXCIsXG4gICAgXCJyZWR1Y2VcIixcbiAgICBcInJlZHVjZVJpZ2h0XCIsXG4gICAgXCJzbGljZVwiLFxuICAgIFwic29tZVwiLFxuICAgIFwidG9TdHJpbmdcIixcbiAgICBcInRvTG9jYWxlU3RyaW5nXCJcbl0uZm9yRWFjaChmdW5jdGlvbiAoZnVuY05hbWUpIHtcbiAgICBhcnJheUV4dGVuc2lvbnNbZnVuY05hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWRtID0gdGhpc1skbW9ieF07XG4gICAgICAgIGFkbS5hdG9tLnJlcG9ydE9ic2VydmVkKCk7XG4gICAgICAgIHZhciByZXMgPSBhZG0uZGVoYW5jZVZhbHVlcyhhZG0udmFsdWVzKTtcbiAgICAgICAgcmV0dXJuIHJlc1tmdW5jTmFtZV0uYXBwbHkocmVzLCBhcmd1bWVudHMpO1xuICAgIH07XG59KTtcbnZhciBpc09ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIk9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uXCIsIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKTtcbmZ1bmN0aW9uIGlzT2JzZXJ2YWJsZUFycmF5KHRoaW5nKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRoaW5nKSAmJiBpc09ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKHRoaW5nWyRtb2J4XSk7XG59XG5cbnZhciBfYTtcbnZhciBPYnNlcnZhYmxlTWFwTWFya2VyID0ge307XG4vLyBqdXN0IGV4dGVuZCBNYXA/IFNlZSBhbHNvIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL25lc3RoYXJ1cy8xM2I0ZDc0ZjJlZjRhMmY0MzU3ZGJkM2ZjMjNjMWU1NFxuLy8gQnV0OiBodHRwczovL2dpdGh1Yi5jb20vbW9ieGpzL21vYngvaXNzdWVzLzE1NTZcbnZhciBPYnNlcnZhYmxlTWFwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGVNYXAoaW5pdGlhbERhdGEsIGVuaGFuY2VyLCBuYW1lKSB7XG4gICAgICAgIGlmIChlbmhhbmNlciA9PT0gdm9pZCAwKSB7IGVuaGFuY2VyID0gZGVlcEVuaGFuY2VyOyB9XG4gICAgICAgIGlmIChuYW1lID09PSB2b2lkIDApIHsgbmFtZSA9IFwiT2JzZXJ2YWJsZU1hcEBcIiArIGdldE5leHRJZCgpOyB9XG4gICAgICAgIHRoaXMuZW5oYW5jZXIgPSBlbmhhbmNlcjtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpc1tfYV0gPSBPYnNlcnZhYmxlTWFwTWFya2VyO1xuICAgICAgICB0aGlzLl9rZXlzQXRvbSA9IGNyZWF0ZUF0b20odGhpcy5uYW1lICsgXCIua2V5cygpXCIpO1xuICAgICAgICB0aGlzW1N5bWJvbC50b1N0cmluZ1RhZ10gPSBcIk1hcFwiO1xuICAgICAgICBpZiAodHlwZW9mIE1hcCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtb2J4Lm1hcCByZXF1aXJlcyBNYXAgcG9seWZpbGwgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuIENoZWNrIGJhYmVsLXBvbHlmaWxsIG9yIGNvcmUtanMvZXM2L21hcC5qc1wiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kYXRhID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9oYXNNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMubWVyZ2UoaW5pdGlhbERhdGEpO1xuICAgIH1cbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5faGFzID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5oYXMoa2V5KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCFnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24pXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGFzKGtleSk7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMuX2hhc01hcC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFlbnRyeSkge1xuICAgICAgICAgICAgLy8gdG9kbzogcmVwbGFjZSB3aXRoIGF0b20gKGJyZWFraW5nIGNoYW5nZSlcbiAgICAgICAgICAgIHZhciBuZXdFbnRyeSA9IChlbnRyeSA9IG5ldyBPYnNlcnZhYmxlVmFsdWUodGhpcy5faGFzKGtleSksIHJlZmVyZW5jZUVuaGFuY2VyLCB0aGlzLm5hbWUgKyBcIi5cIiArIHN0cmluZ2lmeUtleShrZXkpICsgXCI/XCIsIGZhbHNlKSk7XG4gICAgICAgICAgICB0aGlzLl9oYXNNYXAuc2V0KGtleSwgbmV3RW50cnkpO1xuICAgICAgICAgICAgb25CZWNvbWVVbm9ic2VydmVkKG5ld0VudHJ5LCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5faGFzTWFwLmRlbGV0ZShrZXkpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW50cnkuZ2V0KCk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgaGFzS2V5ID0gdGhpcy5faGFzKGtleSk7XG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2UodGhpcywge1xuICAgICAgICAgICAgICAgIHR5cGU6IGhhc0tleSA/IFwidXBkYXRlXCIgOiBcImFkZFwiLFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgbmFtZToga2V5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghY2hhbmdlKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgdmFsdWUgPSBjaGFuZ2UubmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc0tleSkge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVmFsdWUoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRWYWx1ZShrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IGludGVyY2VwdENoYW5nZSh0aGlzLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJkZWxldGVcIixcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgbmFtZToga2V5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghY2hhbmdlKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faGFzKGtleSkpIHtcbiAgICAgICAgICAgIHZhciBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKTtcbiAgICAgICAgICAgIHZhciBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcyk7XG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRlbGV0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiB0aGlzLl9kYXRhLmdldChrZXkpLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoX19hc3NpZ24oe30sIGNoYW5nZSwgeyBuYW1lOiB0aGlzLm5hbWUsIGtleToga2V5IH0pKTtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fa2V5c0F0b20ucmVwb3J0Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIF90aGlzLl91cGRhdGVIYXNNYXBFbnRyeShrZXksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IF90aGlzLl9kYXRhLmdldChrZXkpO1xuICAgICAgICAgICAgICAgIG9ic2VydmFibGUuc2V0TmV3VmFsdWUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fZGF0YS5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG5vdGlmeSlcbiAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKTtcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxuICAgICAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuX3VwZGF0ZUhhc01hcEVudHJ5ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5faGFzTWFwLmdldChrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgIGVudHJ5LnNldE5ld1ZhbHVlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuX3VwZGF0ZVZhbHVlID0gZnVuY3Rpb24gKGtleSwgbmV3VmFsdWUpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSB0aGlzLl9kYXRhLmdldChrZXkpO1xuICAgICAgICBuZXdWYWx1ZSA9IG9ic2VydmFibGUucHJlcGFyZU5ld1ZhbHVlKG5ld1ZhbHVlKTtcbiAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBnbG9iYWxTdGF0ZS5VTkNIQU5HRUQpIHtcbiAgICAgICAgICAgIHZhciBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKTtcbiAgICAgICAgICAgIHZhciBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcyk7XG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBvYnNlcnZhYmxlLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRTdGFydChfX2Fzc2lnbih7fSwgY2hhbmdlLCB7IG5hbWU6IHRoaXMubmFtZSwga2V5OiBrZXkgfSkpO1xuICAgICAgICAgICAgb2JzZXJ2YWJsZS5zZXROZXdWYWx1ZShuZXdWYWx1ZSk7XG4gICAgICAgICAgICBpZiAobm90aWZ5KVxuICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpO1xuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0RW5kKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLl9hZGRWYWx1ZSA9IGZ1bmN0aW9uIChrZXksIG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkKHRoaXMuX2tleXNBdG9tKTtcbiAgICAgICAgdHJhbnNhY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZVZhbHVlKG5ld1ZhbHVlLCBfdGhpcy5lbmhhbmNlciwgX3RoaXMubmFtZSArIFwiLlwiICsgc3RyaW5naWZ5S2V5KGtleSksIGZhbHNlKTtcbiAgICAgICAgICAgIF90aGlzLl9kYXRhLnNldChrZXksIG9ic2VydmFibGUpO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBvYnNlcnZhYmxlLnZhbHVlOyAvLyB2YWx1ZSBtaWdodCBoYXZlIGJlZW4gY2hhbmdlZFxuICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZUhhc01hcEVudHJ5KGtleSwgdHJ1ZSk7XG4gICAgICAgICAgICBfdGhpcy5fa2V5c0F0b20ucmVwb3J0Q2hhbmdlZCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIG5vdGlmeVNweSA9IGlzU3B5RW5hYmxlZCgpO1xuICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xuICAgICAgICB2YXIgY2hhbmdlID0gbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRcIixcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcbiAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KF9fYXNzaWduKHt9LCBjaGFuZ2UsIHsgbmFtZTogdGhpcy5uYW1lLCBrZXk6IGtleSB9KSk7XG4gICAgICAgIGlmIChub3RpZnkpXG4gICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKTtcbiAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXG4gICAgICAgICAgICBzcHlSZXBvcnRFbmQoKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzKGtleSkpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlVmFsdWUodGhpcy5fZGF0YS5nZXQoa2V5KS5nZXQoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZSh1bmRlZmluZWQpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuZGVoYW5jZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmRlaGFuY2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VyKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9rZXlzQXRvbS5yZXBvcnRPYnNlcnZlZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5rZXlzKCk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIG5leHRJbmRleCA9IDA7XG4gICAgICAgIHZhciBrZXlzID0gQXJyYXkuZnJvbSh0aGlzLmtleXMoKSk7XG4gICAgICAgIHJldHVybiBtYWtlSXRlcmFibGUoe1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0SW5kZXggPCBrZXlzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICA/IHsgdmFsdWU6IHNlbGYuZ2V0KGtleXNbbmV4dEluZGV4KytdKSwgZG9uZTogZmFsc2UgfVxuICAgICAgICAgICAgICAgICAgICA6IHsgZG9uZTogdHJ1ZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIG5leHRJbmRleCA9IDA7XG4gICAgICAgIHZhciBrZXlzID0gQXJyYXkuZnJvbSh0aGlzLmtleXMoKSk7XG4gICAgICAgIHJldHVybiBtYWtlSXRlcmFibGUoe1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChuZXh0SW5kZXggPCBrZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tuZXh0SW5kZXgrK107XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogW2tleSwgc2VsZi5nZXQoa2V5KV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGVbKF9hID0gJG1vYngsIFN5bWJvbC5pdGVyYXRvcildID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRyaWVzKCk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciBfZCA9IF9fcmVhZChfYy52YWx1ZSwgMiksIGtleSA9IF9kWzBdLCB2YWx1ZSA9IF9kWzFdO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsdWUsIGtleSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqIE1lcmdlIGFub3RoZXIgb2JqZWN0IGludG8gdGhpcyBvYmplY3QsIHJldHVybnMgdGhpcy4gKi9cbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKG90aGVyKSkge1xuICAgICAgICAgICAgb3RoZXIgPSBvdGhlci50b0pTKCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNhY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlzUGxhaW5PYmplY3Qob3RoZXIpKVxuICAgICAgICAgICAgICAgIGdldFBsYWluT2JqZWN0S2V5cyhvdGhlcikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBfdGhpcy5zZXQoa2V5LCBvdGhlcltrZXldKTsgfSk7XG4gICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG90aGVyKSlcbiAgICAgICAgICAgICAgICBvdGhlci5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2IgPSBfX3JlYWQoX2EsIDIpLCBrZXkgPSBfYlswXSwgdmFsdWUgPSBfYlsxXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRVM2TWFwKG90aGVyKSkge1xuICAgICAgICAgICAgICAgIGlmIChvdGhlci5jb25zdHJ1Y3RvciAhPT0gTWFwKVxuICAgICAgICAgICAgICAgICAgICBmYWlsKFwiQ2Fubm90IGluaXRpYWxpemUgZnJvbSBjbGFzc2VzIHRoYXQgaW5oZXJpdCBmcm9tIE1hcDogXCIgKyBvdGhlci5jb25zdHJ1Y3Rvci5uYW1lKTsgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgICAgICAgb3RoZXIuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkgeyByZXR1cm4gX3RoaXMuc2V0KGtleSwgdmFsdWUpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG90aGVyICE9PSBudWxsICYmIG90aGVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgZmFpbChcIkNhbm5vdCBpbml0aWFsaXplIG1hcCBmcm9tIFwiICsgb3RoZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdHJhbnNhY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdW50cmFja2VkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZV8yLCBfYTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKF90aGlzLmtleXMoKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfYy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRyYW5zYWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIGdyYWIgYWxsIHRoZSBrZXlzIHRoYXQgYXJlIHByZXNlbnQgaW4gdGhlIG5ldyBtYXAgYnV0IG5vdCBwcmVzZW50IGluIHRoZSBjdXJyZW50IG1hcFxuICAgICAgICAgICAgLy8gYW5kIGRlbGV0ZSB0aGVtIGZyb20gdGhlIG1hcCwgdGhlbiBtZXJnZSB0aGUgbmV3IG1hcFxuICAgICAgICAgICAgLy8gdGhpcyB3aWxsIGNhdXNlIHJlYWN0aW9ucyBvbmx5IG9uIGNoYW5nZWQgdmFsdWVzXG4gICAgICAgICAgICB2YXIgbmV3S2V5cyA9IGdldE1hcExpa2VLZXlzKHZhbHVlcyk7XG4gICAgICAgICAgICB2YXIgb2xkS2V5cyA9IEFycmF5LmZyb20oX3RoaXMua2V5cygpKTtcbiAgICAgICAgICAgIHZhciBtaXNzaW5nS2V5cyA9IG9sZEtleXMuZmlsdGVyKGZ1bmN0aW9uIChrKSB7IHJldHVybiBuZXdLZXlzLmluZGV4T2YoaykgPT09IC0xOyB9KTtcbiAgICAgICAgICAgIG1pc3NpbmdLZXlzLmZvckVhY2goZnVuY3Rpb24gKGspIHsgcmV0dXJuIF90aGlzLmRlbGV0ZShrKTsgfSk7XG4gICAgICAgICAgICBfdGhpcy5tZXJnZSh2YWx1ZXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fa2V5c0F0b20ucmVwb3J0T2JzZXJ2ZWQoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kYXRhLnNpemU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBwbGFpbiBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoaXMgbWFwLlxuICAgICAqIE5vdGUgdGhhdCBhbGwgdGhlIGtleXMgYmVpbmcgc3RyaW5naWZpZWQuXG4gICAgICogSWYgdGhlcmUgYXJlIGR1cGxpY2F0aW5nIGtleXMgYWZ0ZXIgY29udmVydGluZyB0aGVtIHRvIHN0cmluZ3MsIGJlaGF2aW91ciBpcyB1bmRldGVybWluZWQuXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUudG9QT0pPID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8zLCBfYTtcbiAgICAgICAgdmFyIHJlcyA9IHt9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciBfZCA9IF9fcmVhZChfYy52YWx1ZSwgMiksIGtleSA9IF9kWzBdLCB2YWx1ZSA9IF9kWzFdO1xuICAgICAgICAgICAgICAgIC8vIFdlIGxpZSBhYm91dCBzeW1ib2wga2V5IHR5cGVzIGR1ZSB0byBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzE4NjNcbiAgICAgICAgICAgICAgICByZXNbdHlwZW9mIGtleSA9PT0gXCJzeW1ib2xcIiA/IGtleSA6IHN0cmluZ2lmeUtleShrZXkpXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzNfMSkgeyBlXzMgPSB7IGVycm9yOiBlXzNfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMykgdGhyb3cgZV8zLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzaGFsbG93IG5vbiBvYnNlcnZhYmxlIG9iamVjdCBjbG9uZSBvZiB0aGlzIG1hcC5cbiAgICAgKiBOb3RlIHRoYXQgdGhlIHZhbHVlcyBtaWd0aCBzdGlsbCBiZSBvYnNlcnZhYmxlLiBGb3IgYSBkZWVwIGNsb25lIHVzZSBtb2J4LnRvSlMuXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUudG9KUyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXAodGhpcyk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFVzZWQgYnkgSlNPTi5zdHJpbmdpZnlcbiAgICAgICAgcmV0dXJuIHRoaXMudG9QT0pPKCk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuICh0aGlzLm5hbWUgK1xuICAgICAgICAgICAgXCJbeyBcIiArXG4gICAgICAgICAgICBBcnJheS5mcm9tKHRoaXMua2V5cygpKVxuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gc3RyaW5naWZ5S2V5KGtleSkgKyBcIjogXCIgKyAoXCJcIiArIF90aGlzLmdldChrZXkpKTsgfSlcbiAgICAgICAgICAgICAgICAuam9pbihcIiwgXCIpICtcbiAgICAgICAgICAgIFwiIH1dXCIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogT2JzZXJ2ZXMgdGhpcyBvYmplY3QuIFRyaWdnZXJzIGZvciB0aGUgZXZlbnRzICdhZGQnLCAndXBkYXRlJyBhbmQgJ2RlbGV0ZScuXG4gICAgICogU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3Qvb2JzZXJ2ZVxuICAgICAqIGZvciBjYWxsYmFjayBkZXRhaWxzXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uIChsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICAgICAgaW52YXJpYW50KGZpcmVJbW1lZGlhdGVseSAhPT0gdHJ1ZSwgXCJgb2JzZXJ2ZWAgZG9lc24ndCBzdXBwb3J0IGZpcmVJbW1lZGlhdGVseT10cnVlIGluIGNvbWJpbmF0aW9uIHdpdGggbWFwcy5cIik7XG4gICAgICAgIHJldHVybiByZWdpc3Rlckxpc3RlbmVyKHRoaXMsIGxpc3RlbmVyKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLmludGVyY2VwdCA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiByZWdpc3RlckludGVyY2VwdG9yKHRoaXMsIGhhbmRsZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGVNYXA7XG59KCkpO1xuLyogJ3ZhcicgZml4ZXMgc21hbGwtYnVpbGQgaXNzdWUgKi9cbnZhciBpc09ic2VydmFibGVNYXAgPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiT2JzZXJ2YWJsZU1hcFwiLCBPYnNlcnZhYmxlTWFwKTtcblxudmFyIF9hJDE7XG52YXIgT2JzZXJ2YWJsZVNldE1hcmtlciA9IHt9O1xudmFyIE9ic2VydmFibGVTZXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZVNldChpbml0aWFsRGF0YSwgZW5oYW5jZXIsIG5hbWUpIHtcbiAgICAgICAgaWYgKGVuaGFuY2VyID09PSB2b2lkIDApIHsgZW5oYW5jZXIgPSBkZWVwRW5oYW5jZXI7IH1cbiAgICAgICAgaWYgKG5hbWUgPT09IHZvaWQgMCkgeyBuYW1lID0gXCJPYnNlcnZhYmxlU2V0QFwiICsgZ2V0TmV4dElkKCk7IH1cbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpc1tfYSQxXSA9IE9ic2VydmFibGVTZXRNYXJrZXI7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMuX2F0b20gPSBjcmVhdGVBdG9tKHRoaXMubmFtZSk7XG4gICAgICAgIHRoaXNbU3ltYm9sLnRvU3RyaW5nVGFnXSA9IFwiU2V0XCI7XG4gICAgICAgIGlmICh0eXBlb2YgU2V0ICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1vYnguc2V0IHJlcXVpcmVzIFNldCBwb2x5ZmlsbCBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci4gQ2hlY2sgYmFiZWwtcG9seWZpbGwgb3IgY29yZS1qcy9lczYvc2V0LmpzXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW5oYW5jZXIgPSBmdW5jdGlvbiAobmV3Viwgb2xkVikgeyByZXR1cm4gZW5oYW5jZXIobmV3Viwgb2xkViwgbmFtZSk7IH07XG4gICAgICAgIGlmIChpbml0aWFsRGF0YSkge1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlKGluaXRpYWxEYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYnNlcnZhYmxlU2V0LnByb3RvdHlwZS5kZWhhbmNlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVoYW5jZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZXIodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0cmFuc2FjdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB1bnRyYWNrZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXMoX3RoaXMuX2RhdGEudmFsdWVzKCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfYy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRlbGV0ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFja0ZuLCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciBlXzIsIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrRm4uY2FsbCh0aGlzQXJnLCB2YWx1ZSwgdmFsdWUsIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYnNlcnZhYmxlU2V0LnByb3RvdHlwZSwgXCJzaXplXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9hdG9tLnJlcG9ydE9ic2VydmVkKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5zaXplO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYnNlcnZhYmxlU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcy5fYXRvbSk7XG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2UodGhpcywge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkXCIsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWNoYW5nZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIC8vIFRPRE86IGlkZWFsbHksIHZhbHVlID0gY2hhbmdlLnZhbHVlIHdvdWxkIGJlIGRvbmUgaGVyZSwgc28gdGhhdCB2YWx1ZXMgY2FuIGJlXG4gICAgICAgICAgICAvLyBjaGFuZ2VkIGJ5IGludGVyY2VwdG9yLiBTYW1lIGFwcGxpZXMgZm9yIG90aGVyIFNldCBhbmQgTWFwIGFwaSdzLlxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5oYXModmFsdWUpKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2RhdGEuYWRkKF90aGlzLmVuaGFuY2VyKHZhbHVlLCB1bmRlZmluZWQpKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fYXRvbS5yZXBvcnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKTtcbiAgICAgICAgICAgIHZhciBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcyk7XG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZFwiLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRTdGFydChjaGFuZ2UpO1xuICAgICAgICAgICAgaWYgKG5vdGlmeSlcbiAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKTtcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxuICAgICAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2UodGhpcywge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZGVsZXRlXCIsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIG9sZFZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWNoYW5nZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzKHZhbHVlKSkge1xuICAgICAgICAgICAgdmFyIG5vdGlmeVNweSA9IGlzU3B5RW5hYmxlZCgpO1xuICAgICAgICAgICAgdmFyIG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKTtcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGVsZXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IHZhbHVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxuICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KF9fYXNzaWduKHt9LCBjaGFuZ2UsIHsgbmFtZTogdGhpcy5uYW1lIH0pKTtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fYXRvbS5yZXBvcnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2RhdGEuZGVsZXRlKHZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG5vdGlmeSlcbiAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKTtcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxuICAgICAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2F0b20ucmVwb3J0T2JzZXJ2ZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGEuaGFzKHRoaXMuZGVoYW5jZVZhbHVlKHZhbHVlKSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlU2V0LnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV4dEluZGV4ID0gMDtcbiAgICAgICAgdmFyIGtleXMgPSBBcnJheS5mcm9tKHRoaXMua2V5cygpKTtcbiAgICAgICAgdmFyIHZhbHVlcyA9IEFycmF5LmZyb20odGhpcy52YWx1ZXMoKSk7XG4gICAgICAgIHJldHVybiBtYWtlSXRlcmFibGUoe1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IG5leHRJbmRleDtcbiAgICAgICAgICAgICAgICBuZXh0SW5kZXggKz0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXggPCB2YWx1ZXMubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgID8geyB2YWx1ZTogW2tleXNbaW5kZXhdLCB2YWx1ZXNbaW5kZXhdXSwgZG9uZTogZmFsc2UgfVxuICAgICAgICAgICAgICAgICAgICA6IHsgZG9uZTogdHJ1ZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVTZXQucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlcygpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9hdG9tLnJlcG9ydE9ic2VydmVkKCk7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIG5leHRJbmRleCA9IDA7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlVmFsdWVzID0gQXJyYXkuZnJvbSh0aGlzLl9kYXRhLnZhbHVlcygpKTtcbiAgICAgICAgcmV0dXJuIG1ha2VJdGVyYWJsZSh7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHRJbmRleCA8IG9ic2VydmFibGVWYWx1ZXMubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgID8geyB2YWx1ZTogc2VsZi5kZWhhbmNlVmFsdWUob2JzZXJ2YWJsZVZhbHVlc1tuZXh0SW5kZXgrK10pLCBkb25lOiBmYWxzZSB9XG4gICAgICAgICAgICAgICAgICAgIDogeyBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlU2V0KG90aGVyKSkge1xuICAgICAgICAgICAgb3RoZXIgPSBvdGhlci50b0pTKCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNhY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3RoZXIpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBvdGhlci5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gX3RoaXMuYWRkKHZhbHVlKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0VTNlNldChvdGhlcikpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgICAgIG90aGVyLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBfdGhpcy5hZGQodmFsdWUpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG90aGVyICE9PSBudWxsICYmIG90aGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBmYWlsKFwiQ2Fubm90IGluaXRpYWxpemUgc2V0IGZyb20gXCIgKyBvdGhlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGVTZXQucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAobGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseSkge1xuICAgICAgICAvLyBUT0RPICdmaXJlSW1tZWRpYXRlbHknIGNhbiBiZSB0cnVlP1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgICAgIGludmFyaWFudChmaXJlSW1tZWRpYXRlbHkgIT09IHRydWUsIFwiYG9ic2VydmVgIGRvZXNuJ3Qgc3VwcG9ydCBmaXJlSW1tZWRpYXRlbHk9dHJ1ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHNldHMuXCIpO1xuICAgICAgICByZXR1cm4gcmVnaXN0ZXJMaXN0ZW5lcih0aGlzLCBsaXN0ZW5lcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlU2V0LnByb3RvdHlwZS5pbnRlcmNlcHQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gcmVnaXN0ZXJJbnRlcmNlcHRvcih0aGlzLCBoYW5kbGVyKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVTZXQucHJvdG90eXBlLnRvSlMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2V0KHRoaXMpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVNldC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWUgKyBcIlsgXCIgKyBBcnJheS5mcm9tKHRoaXMpLmpvaW4oXCIsIFwiKSArIFwiIF1cIjtcbiAgICB9O1xuICAgIE9ic2VydmFibGVTZXQucHJvdG90eXBlWyhfYSQxID0gJG1vYngsIFN5bWJvbC5pdGVyYXRvcildID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMoKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlU2V0O1xufSgpKTtcbnZhciBpc09ic2VydmFibGVTZXQgPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiT2JzZXJ2YWJsZVNldFwiLCBPYnNlcnZhYmxlU2V0KTtcblxudmFyIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24odGFyZ2V0LCB2YWx1ZXMsIG5hbWUsIGRlZmF1bHRFbmhhbmNlcikge1xuICAgICAgICBpZiAodmFsdWVzID09PSB2b2lkIDApIHsgdmFsdWVzID0gbmV3IE1hcCgpOyB9XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5kZWZhdWx0RW5oYW5jZXIgPSBkZWZhdWx0RW5oYW5jZXI7XG4gICAgICAgIHRoaXMua2V5c0F0b20gPSBuZXcgQXRvbShuYW1lICsgXCIua2V5c1wiKTtcbiAgICB9XG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMuZ2V0KGtleSkuZ2V0KCk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGtleSwgbmV3VmFsdWUpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy50YXJnZXQ7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gdGhpcy52YWx1ZXMuZ2V0KGtleSk7XG4gICAgICAgIGlmIChvYnNlcnZhYmxlIGluc3RhbmNlb2YgQ29tcHV0ZWRWYWx1ZSkge1xuICAgICAgICAgICAgb2JzZXJ2YWJsZS5zZXQobmV3VmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGludGVyY2VwdFxuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlKHRoaXMsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eSB8fCBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghY2hhbmdlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2hhbmdlLm5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG5ld1ZhbHVlID0gb2JzZXJ2YWJsZS5wcmVwYXJlTmV3VmFsdWUobmV3VmFsdWUpO1xuICAgICAgICAvLyBub3RpZnkgc3B5ICYgb2JzZXJ2ZXJzXG4gICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gZ2xvYmFsU3RhdGUuVU5DSEFOR0VEKSB7XG4gICAgICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xuICAgICAgICAgICAgdmFyIG5vdGlmeVNweSA9IGlzU3B5RW5hYmxlZCgpO1xuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IG5vdGlmeSB8fCBub3RpZnlTcHlcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5IHx8IGluc3RhbmNlLFxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZTogb2JzZXJ2YWJsZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsdWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoX19hc3NpZ24oe30sIGNoYW5nZSwgeyBuYW1lOiB0aGlzLm5hbWUsIGtleToga2V5IH0pKTtcbiAgICAgICAgICAgIG9ic2VydmFibGUuc2V0TmV3VmFsdWUobmV3VmFsdWUpO1xuICAgICAgICAgICAgaWYgKG5vdGlmeSlcbiAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKTtcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxuICAgICAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIG1hcCA9IHRoaXMucGVuZGluZ0tleXMgfHwgKHRoaXMucGVuZGluZ0tleXMgPSBuZXcgTWFwKCkpO1xuICAgICAgICB2YXIgZW50cnkgPSBtYXAuZ2V0KGtleSk7XG4gICAgICAgIGlmIChlbnRyeSlcbiAgICAgICAgICAgIHJldHVybiBlbnRyeS5nZXQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZXhpc3RzID0gISF0aGlzLnZhbHVlcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIC8vIFBvc3NpYmxlIG9wdGltaXphdGlvbjogRG9uJ3QgaGF2ZSBhIHNlcGFyYXRlIG1hcCBmb3Igbm9uIGV4aXN0aW5nIGtleXMsXG4gICAgICAgICAgICAvLyBidXQgc3RvcmUgdGhlbSBpbiB0aGUgdmFsdWVzIG1hcCBpbnN0ZWFkLCB1c2luZyBhIHNwZWNpYWwgc3ltYm9sIHRvIGRlbm90ZSBcIm5vdCBleGlzdGluZ1wiXG4gICAgICAgICAgICBlbnRyeSA9IG5ldyBPYnNlcnZhYmxlVmFsdWUoZXhpc3RzLCByZWZlcmVuY2VFbmhhbmNlciwgdGhpcy5uYW1lICsgXCIuXCIgKyBzdHJpbmdpZnlLZXkoa2V5KSArIFwiP1wiLCBmYWxzZSk7XG4gICAgICAgICAgICBtYXAuc2V0KGtleSwgZW50cnkpO1xuICAgICAgICAgICAgcmV0dXJuIGVudHJ5LmdldCgpOyAvLyByZWFkIHRvIHN1YnNjcmliZVxuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLmFkZE9ic2VydmFibGVQcm9wID0gZnVuY3Rpb24gKHByb3BOYW1lLCBuZXdWYWx1ZSwgZW5oYW5jZXIpIHtcbiAgICAgICAgaWYgKGVuaGFuY2VyID09PSB2b2lkIDApIHsgZW5oYW5jZXIgPSB0aGlzLmRlZmF1bHRFbmhhbmNlcjsgfVxuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XG4gICAgICAgIGFzc2VydFByb3BlcnR5Q29uZmlndXJhYmxlKHRhcmdldCwgcHJvcE5hbWUpO1xuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHkgfHwgdGFyZ2V0LFxuICAgICAgICAgICAgICAgIG5hbWU6IHByb3BOYW1lLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkXCIsXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghY2hhbmdlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2hhbmdlLm5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGVWYWx1ZShuZXdWYWx1ZSwgZW5oYW5jZXIsIHRoaXMubmFtZSArIFwiLlwiICsgc3RyaW5naWZ5S2V5KHByb3BOYW1lKSwgZmFsc2UpO1xuICAgICAgICB0aGlzLnZhbHVlcy5zZXQocHJvcE5hbWUsIG9ic2VydmFibGUpO1xuICAgICAgICBuZXdWYWx1ZSA9IG9ic2VydmFibGUudmFsdWU7IC8vIG9ic2VydmFibGVWYWx1ZSBtaWdodCBoYXZlIGNoYW5nZWQgaXRcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcE5hbWUsIGdlbmVyYXRlT2JzZXJ2YWJsZVByb3BDb25maWcocHJvcE5hbWUpKTtcbiAgICAgICAgdGhpcy5ub3RpZnlQcm9wZXJ0eUFkZGl0aW9uKHByb3BOYW1lLCBuZXdWYWx1ZSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLmFkZENvbXB1dGVkUHJvcCA9IGZ1bmN0aW9uIChwcm9wZXJ0eU93bmVyLCAvLyB3aGVyZSBpcyB0aGUgcHJvcGVydHkgZGVjbGFyZWQ/XG4gICAgcHJvcE5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMudGFyZ2V0O1xuICAgICAgICBvcHRpb25zLm5hbWUgPSBvcHRpb25zLm5hbWUgfHwgdGhpcy5uYW1lICsgXCIuXCIgKyBzdHJpbmdpZnlLZXkocHJvcE5hbWUpO1xuICAgICAgICB0aGlzLnZhbHVlcy5zZXQocHJvcE5hbWUsIG5ldyBDb21wdXRlZFZhbHVlKG9wdGlvbnMpKTtcbiAgICAgICAgaWYgKHByb3BlcnR5T3duZXIgPT09IHRhcmdldCB8fCBpc1Byb3BlcnR5Q29uZmlndXJhYmxlKHByb3BlcnR5T3duZXIsIHByb3BOYW1lKSlcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wZXJ0eU93bmVyLCBwcm9wTmFtZSwgZ2VuZXJhdGVDb21wdXRlZFByb3BDb25maWcocHJvcE5hbWUpKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIXRoaXMudmFsdWVzLmhhcyhrZXkpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2UodGhpcywge1xuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eSB8fCB0YXJnZXQsXG4gICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgIHR5cGU6IFwicmVtb3ZlXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdGFydEJhdGNoKCk7XG4gICAgICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xuICAgICAgICAgICAgdmFyIG5vdGlmeVNweSA9IGlzU3B5RW5hYmxlZCgpO1xuICAgICAgICAgICAgdmFyIG9sZE9ic2VydmFibGUgPSB0aGlzLnZhbHVlcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIHZhciBvbGRWYWx1ZSA9IG9sZE9ic2VydmFibGUgJiYgb2xkT2JzZXJ2YWJsZS5nZXQoKTtcbiAgICAgICAgICAgIG9sZE9ic2VydmFibGUgJiYgb2xkT2JzZXJ2YWJsZS5zZXQodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIC8vIG5vdGlmeSBrZXkgYW5kIGtleXNldCBsaXN0ZW5lcnNcbiAgICAgICAgICAgIHRoaXMua2V5c0F0b20ucmVwb3J0Q2hhbmdlZCgpO1xuICAgICAgICAgICAgdGhpcy52YWx1ZXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nS2V5cykge1xuICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IHRoaXMucGVuZGluZ0tleXMuZ2V0KGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5KVxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5zZXQoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZGVsZXRlIHRoZSBwcm9wXG4gICAgICAgICAgICBkZWxldGUgdGhpcy50YXJnZXRba2V5XTtcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicmVtb3ZlXCIsXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eSB8fCB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBvbGRWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxuICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KF9fYXNzaWduKHt9LCBjaGFuZ2UsIHsgbmFtZTogdGhpcy5uYW1lLCBrZXk6IGtleSB9KSk7XG4gICAgICAgICAgICBpZiAobm90aWZ5KVxuICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpO1xuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0RW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBlbmRCYXRjaCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLmlsbGVnYWxBY2Nlc3MgPSBmdW5jdGlvbiAob3duZXIsIHByb3BOYW1lKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGhhcHBlbnMgaWYgYSBwcm9wZXJ0eSBpcyBhY2Nlc3NlZCB0aHJvdWdoIHRoZSBwcm90b3R5cGUgY2hhaW4sIGJ1dCB0aGUgcHJvcGVydHkgd2FzXG4gICAgICAgICAqIGRlY2xhcmVkIGRpcmVjdGx5IGFzIG93biBwcm9wZXJ0eSBvbiB0aGUgcHJvdG90eXBlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBFLmcuOlxuICAgICAgICAgKiBjbGFzcyBBIHtcbiAgICAgICAgICogfVxuICAgICAgICAgKiBleHRlbmRPYnNlcnZhYmxlKEEucHJvdG90eXBlLCB7IHg6IDEgfSlcbiAgICAgICAgICpcbiAgICAgICAgICogY2xhc3NCIGV4dGVucyBBIHtcbiAgICAgICAgICogfVxuICAgICAgICAgKiBjb25zb2xlLmxvZyhuZXcgQigpLngpXG4gICAgICAgICAqXG4gICAgICAgICAqIEl0IGlzIHVuY2xlYXIgd2hldGhlciB0aGUgcHJvcGVydHkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgJ3N0YXRpYycgb3IgaW5oZXJpdGVkLlxuICAgICAgICAgKiBFaXRoZXIgdXNlIGBjb25zb2xlLmxvZyhBLngpYFxuICAgICAgICAgKiBvcjogZGVjb3JhdGUoQSwgeyB4OiBvYnNlcnZhYmxlIH0pXG4gICAgICAgICAqXG4gICAgICAgICAqIFdoZW4gdXNpbmcgZGVjb3JhdGUsIHRoZSBwcm9wZXJ0eSB3aWxsIGFsd2F5cyBiZSByZWRlY2xhcmVkIGFzIG93biBwcm9wZXJ0eSBvbiB0aGUgYWN0dWFsIGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBjb25zb2xlLndhcm4oXCJQcm9wZXJ0eSAnXCIgKyBwcm9wTmFtZSArIFwiJyBvZiAnXCIgKyBvd25lciArIFwiJyB3YXMgYWNjZXNzZWQgdGhyb3VnaCB0aGUgcHJvdG90eXBlIGNoYWluLiBVc2UgJ2RlY29yYXRlJyBpbnN0ZWFkIHRvIGRlY2xhcmUgdGhlIHByb3Agb3IgYWNjZXNzIGl0IHN0YXRpY2FsbHkgdGhyb3VnaCBpdCdzIG93bmVyXCIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogT2JzZXJ2ZXMgdGhpcyBvYmplY3QuIFRyaWdnZXJzIGZvciB0aGUgZXZlbnRzICdhZGQnLCAndXBkYXRlJyBhbmQgJ2RlbGV0ZScuXG4gICAgICogU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3Qvb2JzZXJ2ZVxuICAgICAqIGZvciBjYWxsYmFjayBkZXRhaWxzXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBmaXJlSW1tZWRpYXRlbHkpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICAgICBpbnZhcmlhbnQoZmlyZUltbWVkaWF0ZWx5ICE9PSB0cnVlLCBcImBvYnNlcnZlYCBkb2Vzbid0IHN1cHBvcnQgdGhlIGZpcmUgaW1tZWRpYXRlbHkgcHJvcGVydHkgZm9yIG9ic2VydmFibGUgb2JqZWN0cy5cIik7XG4gICAgICAgIHJldHVybiByZWdpc3Rlckxpc3RlbmVyKHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUuaW50ZXJjZXB0ID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVySW50ZXJjZXB0b3IodGhpcywgaGFuZGxlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLm5vdGlmeVByb3BlcnR5QWRkaXRpb24gPSBmdW5jdGlvbiAoa2V5LCBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xuICAgICAgICB2YXIgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKCk7XG4gICAgICAgIHZhciBjaGFuZ2UgPSBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZFwiLFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eSB8fCB0aGlzLnRhcmdldCxcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGlmIChub3RpZnlTcHkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxuICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoX19hc3NpZ24oe30sIGNoYW5nZSwgeyBuYW1lOiB0aGlzLm5hbWUsIGtleToga2V5IH0pKTtcbiAgICAgICAgaWYgKG5vdGlmeSlcbiAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpO1xuICAgICAgICBpZiAobm90aWZ5U3B5ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcbiAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xuICAgICAgICBpZiAodGhpcy5wZW5kaW5nS2V5cykge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5wZW5kaW5nS2V5cy5nZXQoa2V5KTtcbiAgICAgICAgICAgIGlmIChlbnRyeSlcbiAgICAgICAgICAgICAgICBlbnRyeS5zZXQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5rZXlzQXRvbS5yZXBvcnRDaGFuZ2VkKCk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLmdldEtleXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB0aGlzLmtleXNBdG9tLnJlcG9ydE9ic2VydmVkKCk7XG4gICAgICAgIC8vIHJldHVybiBSZWZsZWN0Lm93bktleXModGhpcy52YWx1ZXMpIGFzIGFueVxuICAgICAgICB2YXIgcmVzID0gW107XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHRoaXMudmFsdWVzKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciBfZCA9IF9fcmVhZChfYy52YWx1ZSwgMiksIGtleSA9IF9kWzBdLCB2YWx1ZSA9IF9kWzFdO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9ic2VydmFibGVWYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uO1xufSgpKTtcbmZ1bmN0aW9uIGFzT2JzZXJ2YWJsZU9iamVjdCh0YXJnZXQsIG5hbWUsIGRlZmF1bHRFbmhhbmNlcikge1xuICAgIGlmIChuYW1lID09PSB2b2lkIDApIHsgbmFtZSA9IFwiXCI7IH1cbiAgICBpZiAoZGVmYXVsdEVuaGFuY2VyID09PSB2b2lkIDApIHsgZGVmYXVsdEVuaGFuY2VyID0gZGVlcEVuaGFuY2VyOyB9XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsICRtb2J4KSlcbiAgICAgICAgcmV0dXJuIHRhcmdldFskbW9ieF07XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgIGludmFyaWFudChPYmplY3QuaXNFeHRlbnNpYmxlKHRhcmdldCksIFwiQ2Fubm90IG1ha2UgdGhlIGRlc2lnbmF0ZWQgb2JqZWN0IG9ic2VydmFibGU7IGl0IGlzIG5vdCBleHRlbnNpYmxlXCIpO1xuICAgIGlmICghaXNQbGFpbk9iamVjdCh0YXJnZXQpKVxuICAgICAgICBuYW1lID0gKHRhcmdldC5jb25zdHJ1Y3Rvci5uYW1lIHx8IFwiT2JzZXJ2YWJsZU9iamVjdFwiKSArIFwiQFwiICsgZ2V0TmV4dElkKCk7XG4gICAgaWYgKCFuYW1lKVxuICAgICAgICBuYW1lID0gXCJPYnNlcnZhYmxlT2JqZWN0QFwiICsgZ2V0TmV4dElkKCk7XG4gICAgdmFyIGFkbSA9IG5ldyBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24odGFyZ2V0LCBuZXcgTWFwKCksIHN0cmluZ2lmeUtleShuYW1lKSwgZGVmYXVsdEVuaGFuY2VyKTtcbiAgICBhZGRIaWRkZW5Qcm9wKHRhcmdldCwgJG1vYngsIGFkbSk7XG4gICAgcmV0dXJuIGFkbTtcbn1cbnZhciBvYnNlcnZhYmxlUHJvcGVydHlDb25maWdzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbnZhciBjb21wdXRlZFByb3BlcnR5Q29uZmlncyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBnZW5lcmF0ZU9ic2VydmFibGVQcm9wQ29uZmlnKHByb3BOYW1lKSB7XG4gICAgcmV0dXJuIChvYnNlcnZhYmxlUHJvcGVydHlDb25maWdzW3Byb3BOYW1lXSB8fFxuICAgICAgICAob2JzZXJ2YWJsZVByb3BlcnR5Q29uZmlnc1twcm9wTmFtZV0gPSB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbJG1vYnhdLnJlYWQocHJvcE5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICB0aGlzWyRtb2J4XS53cml0ZShwcm9wTmFtZSwgdik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbn1cbmZ1bmN0aW9uIGdldEFkbWluaXN0cmF0aW9uRm9yQ29tcHV0ZWRQcm9wT3duZXIob3duZXIpIHtcbiAgICB2YXIgYWRtID0gb3duZXJbJG1vYnhdO1xuICAgIGlmICghYWRtKSB7XG4gICAgICAgIC8vIGJlY2F1c2UgY29tcHV0ZWQgcHJvcHMgYXJlIGRlY2xhcmVkIG9uIHByb3R5LFxuICAgICAgICAvLyB0aGUgY3VycmVudCBpbnN0YW5jZSBtaWdodCBub3QgaGF2ZSBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgICAgICBpbml0aWFsaXplSW5zdGFuY2Uob3duZXIpO1xuICAgICAgICByZXR1cm4gb3duZXJbJG1vYnhdO1xuICAgIH1cbiAgICByZXR1cm4gYWRtO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGVDb21wdXRlZFByb3BDb25maWcocHJvcE5hbWUpIHtcbiAgICByZXR1cm4gKGNvbXB1dGVkUHJvcGVydHlDb25maWdzW3Byb3BOYW1lXSB8fFxuICAgICAgICAoY29tcHV0ZWRQcm9wZXJ0eUNvbmZpZ3NbcHJvcE5hbWVdID0ge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiBnbG9iYWxTdGF0ZS5jb21wdXRlZENvbmZpZ3VyYWJsZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uRm9yQ29tcHV0ZWRQcm9wT3duZXIodGhpcykucmVhZChwcm9wTmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgIGdldEFkbWluaXN0cmF0aW9uRm9yQ29tcHV0ZWRQcm9wT3duZXIodGhpcykud3JpdGUocHJvcE5hbWUsIHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG59XG52YXIgaXNPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24gPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uXCIsIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbik7XG5mdW5jdGlvbiBpc09ic2VydmFibGVPYmplY3QodGhpbmcpIHtcbiAgICBpZiAoaXNPYmplY3QodGhpbmcpKSB7XG4gICAgICAgIC8vIEluaXRpYWxpemVycyBydW4gbGF6aWx5IHdoZW4gdHJhbnNwaWxpbmcgdG8gYmFiZWwsIHNvIG1ha2Ugc3VyZSB0aGV5IGFyZSBydW4uLi5cbiAgICAgICAgaW5pdGlhbGl6ZUluc3RhbmNlKHRoaW5nKTtcbiAgICAgICAgcmV0dXJuIGlzT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uKHRoaW5nWyRtb2J4XSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0QXRvbSh0aGluZywgcHJvcGVydHkpIHtcbiAgICBpZiAodHlwZW9mIHRoaW5nID09PSBcIm9iamVjdFwiICYmIHRoaW5nICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChpc09ic2VydmFibGVBcnJheSh0aGluZykpIHtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICAgICAgICAgICAgIFwiSXQgaXMgbm90IHBvc3NpYmxlIHRvIGdldCBpbmRleCBhdG9tcyBmcm9tIGFycmF5c1wiKTtcbiAgICAgICAgICAgIHJldHVybiB0aGluZ1skbW9ieF0uYXRvbTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlU2V0KHRoaW5nKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaW5nWyRtb2J4XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKHRoaW5nKSkge1xuICAgICAgICAgICAgdmFyIGFueVRoaW5nID0gdGhpbmc7XG4gICAgICAgICAgICBpZiAocHJvcGVydHkgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm4gYW55VGhpbmcuX2tleXNBdG9tO1xuICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBhbnlUaGluZy5fZGF0YS5nZXQocHJvcGVydHkpIHx8IGFueVRoaW5nLl9oYXNNYXAuZ2V0KHByb3BlcnR5KTtcbiAgICAgICAgICAgIGlmICghb2JzZXJ2YWJsZSlcbiAgICAgICAgICAgICAgICBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICAgICAgICAgICAgICBcInRoZSBlbnRyeSAnXCIgKyBwcm9wZXJ0eSArIFwiJyBkb2VzIG5vdCBleGlzdCBpbiB0aGUgb2JzZXJ2YWJsZSBtYXAgJ1wiICsgZ2V0RGVidWdOYW1lKHRoaW5nKSArIFwiJ1wiKTtcbiAgICAgICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEluaXRpYWxpemVycyBydW4gbGF6aWx5IHdoZW4gdHJhbnNwaWxpbmcgdG8gYmFiZWwsIHNvIG1ha2Ugc3VyZSB0aGV5IGFyZSBydW4uLi5cbiAgICAgICAgaW5pdGlhbGl6ZUluc3RhbmNlKHRoaW5nKTtcbiAgICAgICAgaWYgKHByb3BlcnR5ICYmICF0aGluZ1skbW9ieF0pXG4gICAgICAgICAgICB0aGluZ1twcm9wZXJ0eV07IC8vIFNlZSAjMTA3MlxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHRoaW5nKSkge1xuICAgICAgICAgICAgaWYgKCFwcm9wZXJ0eSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgXCJwbGVhc2Ugc3BlY2lmeSBhIHByb3BlcnR5XCIpO1xuICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSB0aGluZ1skbW9ieF0udmFsdWVzLmdldChwcm9wZXJ0eSk7XG4gICAgICAgICAgICBpZiAoIW9ic2VydmFibGUpXG4gICAgICAgICAgICAgICAgZmFpbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgXCJubyBvYnNlcnZhYmxlIHByb3BlcnR5ICdcIiArIHByb3BlcnR5ICsgXCInIGZvdW5kIG9uIHRoZSBvYnNlcnZhYmxlIG9iamVjdCAnXCIgKyBnZXREZWJ1Z05hbWUodGhpbmcpICsgXCInXCIpO1xuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXRvbSh0aGluZykgfHwgaXNDb21wdXRlZFZhbHVlKHRoaW5nKSB8fCBpc1JlYWN0aW9uKHRoaW5nKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaW5nO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB0aGluZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGlmIChpc1JlYWN0aW9uKHRoaW5nWyRtb2J4XSkpIHtcbiAgICAgICAgICAgIC8vIGRpc3Bvc2VyIGZ1bmN0aW9uXG4gICAgICAgICAgICByZXR1cm4gdGhpbmdbJG1vYnhdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBcIkNhbm5vdCBvYnRhaW4gYXRvbSBmcm9tIFwiICsgdGhpbmcpO1xufVxuZnVuY3Rpb24gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcsIHByb3BlcnR5KSB7XG4gICAgaWYgKCF0aGluZylcbiAgICAgICAgZmFpbChcIkV4cGVjdGluZyBzb21lIG9iamVjdFwiKTtcbiAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uKGdldEF0b20odGhpbmcsIHByb3BlcnR5KSk7XG4gICAgaWYgKGlzQXRvbSh0aGluZykgfHwgaXNDb21wdXRlZFZhbHVlKHRoaW5nKSB8fCBpc1JlYWN0aW9uKHRoaW5nKSlcbiAgICAgICAgcmV0dXJuIHRoaW5nO1xuICAgIGlmIChpc09ic2VydmFibGVNYXAodGhpbmcpIHx8IGlzT2JzZXJ2YWJsZVNldCh0aGluZykpXG4gICAgICAgIHJldHVybiB0aGluZztcbiAgICAvLyBJbml0aWFsaXplcnMgcnVuIGxhemlseSB3aGVuIHRyYW5zcGlsaW5nIHRvIGJhYmVsLCBzbyBtYWtlIHN1cmUgdGhleSBhcmUgcnVuLi4uXG4gICAgaW5pdGlhbGl6ZUluc3RhbmNlKHRoaW5nKTtcbiAgICBpZiAodGhpbmdbJG1vYnhdKVxuICAgICAgICByZXR1cm4gdGhpbmdbJG1vYnhdO1xuICAgIGZhaWwocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIFwiQ2Fubm90IG9idGFpbiBhZG1pbmlzdHJhdGlvbiBmcm9tIFwiICsgdGhpbmcpO1xufVxuZnVuY3Rpb24gZ2V0RGVidWdOYW1lKHRoaW5nLCBwcm9wZXJ0eSkge1xuICAgIHZhciBuYW1lZDtcbiAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZClcbiAgICAgICAgbmFtZWQgPSBnZXRBdG9tKHRoaW5nLCBwcm9wZXJ0eSk7XG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHRoaW5nKSB8fCBpc09ic2VydmFibGVNYXAodGhpbmcpIHx8IGlzT2JzZXJ2YWJsZVNldCh0aGluZykpXG4gICAgICAgIG5hbWVkID0gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcpO1xuICAgIGVsc2VcbiAgICAgICAgbmFtZWQgPSBnZXRBdG9tKHRoaW5nKTsgLy8gdmFsaWQgZm9yIGFycmF5cyBhcyB3ZWxsXG4gICAgcmV0dXJuIG5hbWVkLm5hbWU7XG59XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5mdW5jdGlvbiBkZWVwRXF1YWwoYSwgYikge1xuICAgIHJldHVybiBlcShhLCBiKTtcbn1cbi8vIENvcGllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9ibG9iLzVjMjM3YTdjNjgyZmI2OGZkNTM3ODIwM2YwYmYyMmRjZTE2MjQ4NTQvdW5kZXJzY29yZS5qcyNMMTE4Ni1MMTI4OVxuLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbmZ1bmN0aW9uIGVxKGEsIGIsIGFTdGFjaywgYlN0YWNrKSB7XG4gICAgLy8gSWRlbnRpY2FsIG9iamVjdHMgYXJlIGVxdWFsLiBgMCA9PT0gLTBgLCBidXQgdGhleSBhcmVuJ3QgaWRlbnRpY2FsLlxuICAgIC8vIFNlZSB0aGUgW0hhcm1vbnkgYGVnYWxgIHByb3Bvc2FsXShodHRwOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1oYXJtb255OmVnYWwpLlxuICAgIGlmIChhID09PSBiKVxuICAgICAgICByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PT0gMSAvIGI7XG4gICAgLy8gYG51bGxgIG9yIGB1bmRlZmluZWRgIG9ubHkgZXF1YWwgdG8gaXRzZWxmIChzdHJpY3QgY29tcGFyaXNvbikuXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxuICAgIGlmIChhICE9PSBhKVxuICAgICAgICByZXR1cm4gYiAhPT0gYjtcbiAgICAvLyBFeGhhdXN0IHByaW1pdGl2ZSBjaGVja3NcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBhO1xuICAgIGlmICh0eXBlICE9PSBcImZ1bmN0aW9uXCIgJiYgdHlwZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgYiAhPSBcIm9iamVjdFwiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIGRlZXBFcShhLCBiLCBhU3RhY2ssIGJTdGFjayk7XG59XG4vLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYGlzRXF1YWxgLlxuZnVuY3Rpb24gZGVlcEVxKGEsIGIsIGFTdGFjaywgYlN0YWNrKSB7XG4gICAgLy8gVW53cmFwIGFueSB3cmFwcGVkIG9iamVjdHMuXG4gICAgYSA9IHVud3JhcChhKTtcbiAgICBiID0gdW53cmFwKGIpO1xuICAgIC8vIENvbXBhcmUgYFtbQ2xhc3NdXWAgbmFtZXMuXG4gICAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwoYSk7XG4gICAgaWYgKGNsYXNzTmFtZSAhPT0gdG9TdHJpbmcuY2FsbChiKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXRjaCAoY2xhc3NOYW1lKSB7XG4gICAgICAgIC8vIFN0cmluZ3MsIG51bWJlcnMsIHJlZ3VsYXIgZXhwcmVzc2lvbnMsIGRhdGVzLCBhbmQgYm9vbGVhbnMgYXJlIGNvbXBhcmVkIGJ5IHZhbHVlLlxuICAgICAgICBjYXNlIFwiW29iamVjdCBSZWdFeHBdXCI6XG4gICAgICAgIC8vIFJlZ0V4cHMgYXJlIGNvZXJjZWQgdG8gc3RyaW5ncyBmb3IgY29tcGFyaXNvbiAoTm90ZTogJycgKyAvYS9pID09PSAnL2EvaScpXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IFN0cmluZ11cIjpcbiAgICAgICAgICAgIC8vIFByaW1pdGl2ZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgb2JqZWN0IHdyYXBwZXJzIGFyZSBlcXVpdmFsZW50OyB0aHVzLCBgXCI1XCJgIGlzXG4gICAgICAgICAgICAvLyBlcXVpdmFsZW50IHRvIGBuZXcgU3RyaW5nKFwiNVwiKWAuXG4gICAgICAgICAgICByZXR1cm4gXCJcIiArIGEgPT09IFwiXCIgKyBiO1xuICAgICAgICBjYXNlIFwiW29iamVjdCBOdW1iZXJdXCI6XG4gICAgICAgICAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxuICAgICAgICAgICAgLy8gT2JqZWN0KE5hTikgaXMgZXF1aXZhbGVudCB0byBOYU4uXG4gICAgICAgICAgICBpZiAoK2EgIT09ICthKVxuICAgICAgICAgICAgICAgIHJldHVybiArYiAhPT0gK2I7XG4gICAgICAgICAgICAvLyBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yIG90aGVyIG51bWVyaWMgdmFsdWVzLlxuICAgICAgICAgICAgcmV0dXJuICthID09PSAwID8gMSAvICthID09PSAxIC8gYiA6ICthID09PSArYjtcbiAgICAgICAgY2FzZSBcIltvYmplY3QgRGF0ZV1cIjpcbiAgICAgICAgY2FzZSBcIltvYmplY3QgQm9vbGVhbl1cIjpcbiAgICAgICAgICAgIC8vIENvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtZXJpYyBwcmltaXRpdmUgdmFsdWVzLiBEYXRlcyBhcmUgY29tcGFyZWQgYnkgdGhlaXJcbiAgICAgICAgICAgIC8vIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucy4gTm90ZSB0aGF0IGludmFsaWQgZGF0ZXMgd2l0aCBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnNcbiAgICAgICAgICAgIC8vIG9mIGBOYU5gIGFyZSBub3QgZXF1aXZhbGVudC5cbiAgICAgICAgICAgIHJldHVybiArYSA9PT0gK2I7XG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IFN5bWJvbF1cIjpcbiAgICAgICAgICAgIHJldHVybiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wudmFsdWVPZi5jYWxsKGEpID09PSBTeW1ib2wudmFsdWVPZi5jYWxsKGIpKTtcbiAgICB9XG4gICAgdmFyIGFyZUFycmF5cyA9IGNsYXNzTmFtZSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiO1xuICAgIGlmICghYXJlQXJyYXlzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYSAhPSBcIm9iamVjdFwiIHx8IHR5cGVvZiBiICE9IFwib2JqZWN0XCIpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8vIE9iamVjdHMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1aXZhbGVudCwgYnV0IGBPYmplY3RgcyBvciBgQXJyYXlgc1xuICAgICAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLlxuICAgICAgICB2YXIgYUN0b3IgPSBhLmNvbnN0cnVjdG9yLCBiQ3RvciA9IGIuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChhQ3RvciAhPT0gYkN0b3IgJiZcbiAgICAgICAgICAgICEodHlwZW9mIGFDdG9yID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgICAgICAgICBhQ3RvciBpbnN0YW5jZW9mIGFDdG9yICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGJDdG9yID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgICAgICAgICBiQ3RvciBpbnN0YW5jZW9mIGJDdG9yKSAmJlxuICAgICAgICAgICAgKFwiY29uc3RydWN0b3JcIiBpbiBhICYmIFwiY29uc3RydWN0b3JcIiBpbiBiKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEFzc3VtZSBlcXVhbGl0eSBmb3IgY3ljbGljIHN0cnVjdHVyZXMuIFRoZSBhbGdvcml0aG0gZm9yIGRldGVjdGluZyBjeWNsaWNcbiAgICAvLyBzdHJ1Y3R1cmVzIGlzIGFkYXB0ZWQgZnJvbSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLCBhYnN0cmFjdCBvcGVyYXRpb24gYEpPYC5cbiAgICAvLyBJbml0aWFsaXppbmcgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgLy8gSXQncyBkb25lIGhlcmUgc2luY2Ugd2Ugb25seSBuZWVkIHRoZW0gZm9yIG9iamVjdHMgYW5kIGFycmF5cyBjb21wYXJpc29uLlxuICAgIGFTdGFjayA9IGFTdGFjayB8fCBbXTtcbiAgICBiU3RhY2sgPSBiU3RhY2sgfHwgW107XG4gICAgdmFyIGxlbmd0aCA9IGFTdGFjay5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIC8vIExpbmVhciBzZWFyY2guIFBlcmZvcm1hbmNlIGlzIGludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJlciBvZlxuICAgICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuXG4gICAgICAgIGlmIChhU3RhY2tbbGVuZ3RoXSA9PT0gYSlcbiAgICAgICAgICAgIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PT0gYjtcbiAgICB9XG4gICAgLy8gQWRkIHRoZSBmaXJzdCBvYmplY3QgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIGFTdGFjay5wdXNoKGEpO1xuICAgIGJTdGFjay5wdXNoKGIpO1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgIGlmIChhcmVBcnJheXMpIHtcbiAgICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuXG4gICAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoICE9PSBiLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy8gRGVlcCBjb21wYXJlIHRoZSBjb250ZW50cywgaWdub3Jpbmcgbm9uLW51bWVyaWMgcHJvcGVydGllcy5cbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgICBpZiAoIWVxKGFbbGVuZ3RoXSwgYltsZW5ndGhdLCBhU3RhY2ssIGJTdGFjaykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBEZWVwIGNvbXBhcmUgb2JqZWN0cy5cbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleSA9IHZvaWQgMDtcbiAgICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgICAgIC8vIEVuc3VyZSB0aGF0IGJvdGggb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIG51bWJlciBvZiBwcm9wZXJ0aWVzIGJlZm9yZSBjb21wYXJpbmcgZGVlcCBlcXVhbGl0eS5cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKGIpLmxlbmd0aCAhPT0gbGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlclxuICAgICAgICAgICAga2V5ID0ga2V5c1tsZW5ndGhdO1xuICAgICAgICAgICAgaWYgKCEoaGFzJDEoYiwga2V5KSAmJiBlcShhW2tleV0sIGJba2V5XSwgYVN0YWNrLCBiU3RhY2spKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBvYmplY3QgZnJvbSB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnBvcCgpO1xuICAgIGJTdGFjay5wb3AoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHVud3JhcChhKSB7XG4gICAgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KGEpKVxuICAgICAgICByZXR1cm4gYS5zbGljZSgpO1xuICAgIGlmIChpc0VTNk1hcChhKSB8fCBpc09ic2VydmFibGVNYXAoYSkpXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGEuZW50cmllcygpKTtcbiAgICBpZiAoaXNFUzZTZXQoYSkgfHwgaXNPYnNlcnZhYmxlU2V0KGEpKVxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShhLmVudHJpZXMoKSk7XG4gICAgcmV0dXJuIGE7XG59XG5mdW5jdGlvbiBoYXMkMShhLCBrZXkpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGtleSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VJdGVyYWJsZShpdGVyYXRvcikge1xuICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBnZXRTZWxmO1xuICAgIHJldHVybiBpdGVyYXRvcjtcbn1cbmZ1bmN0aW9uIGdldFNlbGYoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbi8qXG5UaGUgb25seSByZWFzb24gZm9yIHRoaXMgZmlsZSB0byBleGlzdCBpcyBwdXJlIGhvcnJvcjpcbldpdGhvdXQgaXQgcm9sbHVwIGNhbiBtYWtlIHRoZSBidW5kbGluZyBmYWlsIGF0IGFueSBwb2ludCBpbiB0aW1lOyB3aGVuIGl0IHJvbGxzIHVwIHRoZSBmaWxlcyBpbiB0aGUgd3Jvbmcgb3JkZXJcbml0IHdpbGwgY2F1c2UgdW5kZWZpbmVkIGVycm9ycyAoZm9yIGV4YW1wbGUgYmVjYXVzZSBzdXBlciBjbGFzc2VzIG9yIGxvY2FsIHZhcmlhYmxlcyBub3QgYmVpbmcgaG9pc3RlZCkuXG5XaXRoIHRoaXMgZmlsZSB0aGF0IHdpbGwgc3RpbGwgaGFwcGVuLFxuYnV0IGF0IGxlYXN0IGluIHRoaXMgZmlsZSB3ZSBjYW4gbWFnaWNhbGx5IHJlb3JkZXIgdGhlIGltcG9ydHMgd2l0aCB0cmlhbCBhbmQgZXJyb3IgdW50aWwgdGhlIGJ1aWxkIHN1Y2NlZWRzIGFnYWluLlxuKi9cblxuLyoqXG4gKiAoYykgTWljaGVsIFdlc3RzdHJhdGUgMjAxNSAtIDIwMThcbiAqIE1JVCBMaWNlbnNlZFxuICpcbiAqIFdlbGNvbWUgdG8gdGhlIG1vYnggc291cmNlcyEgVG8gZ2V0IGFuIGdsb2JhbCBvdmVydmlldyBvZiBob3cgTW9iWCBpbnRlcm5hbGx5IHdvcmtzLFxuICogdGhpcyBpcyBhIGdvb2QgcGxhY2UgdG8gc3RhcnQ6XG4gKiBodHRwczovL21lZGl1bS5jb20vQG13ZXN0c3RyYXRlL2JlY29taW5nLWZ1bGx5LXJlYWN0aXZlLWFuLWluLWRlcHRoLWV4cGxhbmF0aW9uLW9mLW1vYnNlcnZhYmxlLTU1OTk1MjYyYTI1NCMueHZiaDZxZDc0XG4gKlxuICogU291cmNlIGZvbGRlcnM6XG4gKiA9PT09PT09PT09PT09PT1cbiAqXG4gKiAtIGFwaS8gICAgIE1vc3Qgb2YgdGhlIHB1YmxpYyBzdGF0aWMgbWV0aG9kcyBleHBvc2VkIGJ5IHRoZSBtb2R1bGUgY2FuIGJlIGZvdW5kIGhlcmUuXG4gKiAtIGNvcmUvICAgIEltcGxlbWVudGF0aW9uIG9mIHRoZSBNb2JYIGFsZ29yaXRobTsgYXRvbXMsIGRlcml2YXRpb25zLCByZWFjdGlvbnMsIGRlcGVuZGVuY3kgdHJlZXMsIG9wdGltaXphdGlvbnMuIENvb2wgc3R1ZmYgY2FuIGJlIGZvdW5kIGhlcmUuXG4gKiAtIHR5cGVzLyAgIEFsbCB0aGUgbWFnaWMgdGhhdCBpcyBuZWVkIHRvIGhhdmUgb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIHZhbHVlcyBpcyBpbiB0aGlzIGZvbGRlci4gSW5jbHVkaW5nIHRoZSBtb2RpZmllcnMgbGlrZSBgYXNGbGF0YC5cbiAqIC0gdXRpbHMvICAgVXRpbGl0eSBzdHVmZi5cbiAqXG4gKi9cbmlmICh0eXBlb2YgUHJveHkgPT09IFwidW5kZWZpbmVkXCIgfHwgdHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlttb2J4XSBNb2JYIDUrIHJlcXVpcmVzIFByb3h5IGFuZCBTeW1ib2wgb2JqZWN0cy4gSWYgeW91ciBlbnZpcm9ubWVudCBkb2Vzbid0IHN1cHBvcnQgU3ltYm9sIG9yIFByb3h5IG9iamVjdHMsIHBsZWFzZSBkb3duZ3JhZGUgdG8gTW9iWCA0LiBGb3IgUmVhY3QgTmF0aXZlIEFuZHJvaWQsIGNvbnNpZGVyIHVwZ3JhZGluZyBKU0NvcmUuXCIpO1xufVxudHJ5IHtcbiAgICAvLyBkZWZpbmUgcHJvY2Vzcy5lbnYgaWYgbmVlZGVkXG4gICAgLy8gaWYgdGhpcyBpcyBub3QgYSBwcm9kdWN0aW9uIGJ1aWxkIGluIHRoZSBmaXJzdCBwbGFjZVxuICAgIC8vIChpbiB3aGljaCBjYXNlIHRoZSBleHByZXNzaW9uIGJlbG93IHdvdWxkIGJlIHN1YnN0aXR1dGVkIHdpdGggJ3Byb2R1Y3Rpb24nKVxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WO1xufVxuY2F0Y2ggKGUpIHtcbiAgICB2YXIgZyA9IGdldEdsb2JhbCgpO1xuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgZy5wcm9jZXNzID0ge307XG4gICAgZy5wcm9jZXNzLmVudiA9IHt9O1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiB0ZXN0Q29kZU1pbmlmaWNhdGlvbigpIHsgfVxuICAgIGlmICh0ZXN0Q29kZU1pbmlmaWNhdGlvbi5uYW1lICE9PSBcInRlc3RDb2RlTWluaWZpY2F0aW9uXCIgJiZcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgIHByb2Nlc3MuZW52LklHTk9SRV9NT0JYX01JTklGWV9XQVJOSU5HICE9PSBcInRydWVcIikge1xuICAgICAgICAvLyB0cmljayBzbyBpdCBkb2Vzbid0IGdldCByZXBsYWNlZFxuICAgICAgICB2YXIgdmFyTmFtZSA9IFtcInByb2Nlc3NcIiwgXCJlbnZcIiwgXCJOT0RFX0VOVlwiXS5qb2luKFwiLlwiKTtcbiAgICAgICAgY29uc29sZS53YXJuKFwiW21vYnhdIHlvdSBhcmUgcnVubmluZyBhIG1pbmlmaWVkIGJ1aWxkLCBidXQgJ1wiICsgdmFyTmFtZSArIFwiJyB3YXMgbm90IHNldCB0byAncHJvZHVjdGlvbicgaW4geW91ciBidW5kbGVyLiBUaGlzIHJlc3VsdHMgaW4gYW4gdW5uZWNlc3NhcmlseSBsYXJnZSBhbmQgc2xvdyBidW5kbGVcIik7XG4gICAgfVxufSkoKTtcbmlmICh0eXBlb2YgX19NT0JYX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09IFwib2JqZWN0XCIpIHtcbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmR5a29nL21vYngtZGV2dG9vbHMvXG4gICAgX19NT0JYX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uaW5qZWN0TW9ieCh7XG4gICAgICAgIHNweTogc3B5LFxuICAgICAgICBleHRyYXM6IHtcbiAgICAgICAgICAgIGdldERlYnVnTmFtZTogZ2V0RGVidWdOYW1lXG4gICAgICAgIH0sXG4gICAgICAgICRtb2J4OiAkbW9ieFxuICAgIH0pO1xufVxuXG5leHBvcnQgeyAkbW9ieCwgSURlcml2YXRpb25TdGF0ZSwgT2JzZXJ2YWJsZU1hcCwgT2JzZXJ2YWJsZVNldCwgUmVhY3Rpb24sIGFsbG93U3RhdGVDaGFuZ2VzIGFzIF9hbGxvd1N0YXRlQ2hhbmdlcywgYWxsb3dTdGF0ZUNoYW5nZXNJbnNpZGVDb21wdXRlZCBhcyBfYWxsb3dTdGF0ZUNoYW5nZXNJbnNpZGVDb21wdXRlZCwgX2VuZEFjdGlvbiwgZ2V0QWRtaW5pc3RyYXRpb24gYXMgX2dldEFkbWluaXN0cmF0aW9uLCBnZXRHbG9iYWxTdGF0ZSBhcyBfZ2V0R2xvYmFsU3RhdGUsIGludGVyY2VwdFJlYWRzIGFzIF9pbnRlcmNlcHRSZWFkcywgaXNDb21wdXRpbmdEZXJpdmF0aW9uIGFzIF9pc0NvbXB1dGluZ0Rlcml2YXRpb24sIHJlc2V0R2xvYmFsU3RhdGUgYXMgX3Jlc2V0R2xvYmFsU3RhdGUsIF9zdGFydEFjdGlvbiwgYWN0aW9uLCBhdXRvcnVuLCBjb21wYXJlciwgY29tcHV0ZWQsIGNvbmZpZ3VyZSwgY3JlYXRlQXRvbSwgZGVjb3JhdGUsIGVudHJpZXMsIGV4dGVuZE9ic2VydmFibGUsIGZsb3csIGdldCwgZ2V0QXRvbSwgZ2V0RGVidWdOYW1lLCBnZXREZXBlbmRlbmN5VHJlZSwgZ2V0T2JzZXJ2ZXJUcmVlLCBoYXMsIGludGVyY2VwdCwgaXNBY3Rpb24sIGlzQXJyYXlMaWtlLCBpc09ic2VydmFibGVWYWx1ZSBhcyBpc0JveGVkT2JzZXJ2YWJsZSwgaXNDb21wdXRlZCwgaXNDb21wdXRlZFByb3AsIGlzT2JzZXJ2YWJsZSwgaXNPYnNlcnZhYmxlQXJyYXksIGlzT2JzZXJ2YWJsZU1hcCwgaXNPYnNlcnZhYmxlT2JqZWN0LCBpc09ic2VydmFibGVQcm9wLCBpc09ic2VydmFibGVTZXQsIGtleXMsIG9ic2VydmFibGUsIG9ic2VydmUsIG9uQmVjb21lT2JzZXJ2ZWQsIG9uQmVjb21lVW5vYnNlcnZlZCwgb25SZWFjdGlvbkVycm9yLCByZWFjdGlvbiwgcmVtb3ZlLCBydW5JbkFjdGlvbiwgc2V0LCBzcHksIHRvSlMsIHRyYWNlLCB0cmFuc2FjdGlvbiwgdW50cmFja2VkLCB2YWx1ZXMsIHdoZW4gfTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKHRydWUpO1xuLy8gSW1wb3J0c1xudmFyIGdldFVybCA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMF9fXyA9IGdldFVybChyZXF1aXJlKFwiLi9mb250cy9jb29sdmV0aWNhLnR0ZlwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18xX19fID0gZ2V0VXJsKHJlcXVpcmUoXCIuL2ZvbnRzL2ZsZWx0ZXgudHRmXCIpKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiQC13ZWJraXQta2V5ZnJhbWVzIGZhZGVJblJpZ2h0e2Zyb217b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDEwMCUsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMDAlLCAwLCAwKX10b3tvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApfX1Aa2V5ZnJhbWVzIGZhZGVJblJpZ2h0e2Zyb217b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDEwMCUsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMDAlLCAwLCAwKX10b3tvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApfX1ALXdlYmtpdC1rZXlmcmFtZXMgZmFkZUluTGVmdHtmcm9te29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xMDAlLCAwLCAwKX10b3tvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApfX1Aa2V5ZnJhbWVzIGZhZGVJbkxlZnR7ZnJvbXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEwMCUsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCl9dG97b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKX19QC13ZWJraXQta2V5ZnJhbWVzIGJvZHlHcmFkaWVudHswJXtiYWNrZ3JvdW5kLXBvc2l0aW9uOjAlIDUwJX01MCV7YmFja2dyb3VuZC1wb3NpdGlvbjoxMDAlIDUwJX0xMDAle2JhY2tncm91bmQtcG9zaXRpb246MCUgNTAlfX1Aa2V5ZnJhbWVzIGJvZHlHcmFkaWVudHswJXtiYWNrZ3JvdW5kLXBvc2l0aW9uOjAlIDUwJX01MCV7YmFja2dyb3VuZC1wb3NpdGlvbjoxMDAlIDUwJX0xMDAle2JhY2tncm91bmQtcG9zaXRpb246MCUgNTAlfX0vKiEgbm9ybWFsaXplLmNzcyB2OC4wLjEgfCBNSVQgTGljZW5zZSB8IGdpdGh1Yi5jb20vbmVjb2xhcy9ub3JtYWxpemUuY3NzICovaHRtbHtsaW5lLWhlaWdodDoxLjE1Oy13ZWJraXQtdGV4dC1zaXplLWFkanVzdDoxMDAlfWJvZHl7bWFyZ2luOjB9bWFpbntkaXNwbGF5OmJsb2NrfWgxe2ZvbnQtc2l6ZToyZW07bWFyZ2luOjAuNjdlbSAwfWhye2JveC1zaXppbmc6Y29udGVudC1ib3g7aGVpZ2h0OjA7b3ZlcmZsb3c6dmlzaWJsZX1wcmV7Zm9udC1mYW1pbHk6bW9ub3NwYWNlLCBtb25vc3BhY2U7Zm9udC1zaXplOjFlbX1he2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9YWJiclt0aXRsZV17Ym9yZGVyLWJvdHRvbTpub25lO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7LXdlYmtpdC10ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lIGRvdHRlZDt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lIGRvdHRlZH1iLHN0cm9uZ3tmb250LXdlaWdodDpib2xkZXJ9Y29kZSxrYmQsc2FtcHtmb250LWZhbWlseTptb25vc3BhY2UsIG1vbm9zcGFjZTtmb250LXNpemU6MWVtfXNtYWxse2ZvbnQtc2l6ZTo4MCV9c3ViLHN1cHtmb250LXNpemU6NzUlO2xpbmUtaGVpZ2h0OjA7cG9zaXRpb246cmVsYXRpdmU7dmVydGljYWwtYWxpZ246YmFzZWxpbmV9c3Vie2JvdHRvbTotMC4yNWVtfXN1cHt0b3A6LTAuNWVtfWltZ3tib3JkZXItc3R5bGU6bm9uZX1idXR0b24saW5wdXQsb3B0Z3JvdXAsc2VsZWN0LHRleHRhcmVhe2ZvbnQtZmFtaWx5OmluaGVyaXQ7Zm9udC1zaXplOjEwMCU7bGluZS1oZWlnaHQ6MS4xNTttYXJnaW46MH1idXR0b24saW5wdXR7b3ZlcmZsb3c6dmlzaWJsZX1idXR0b24sc2VsZWN0e3RleHQtdHJhbnNmb3JtOm5vbmV9YnV0dG9uLFt0eXBlPVxcXCJidXR0b25cXFwiXSxbdHlwZT1cXFwicmVzZXRcXFwiXSxbdHlwZT1cXFwic3VibWl0XFxcIl17LXdlYmtpdC1hcHBlYXJhbmNlOmJ1dHRvbn1idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsW3R5cGU9XFxcImJ1dHRvblxcXCJdOjotbW96LWZvY3VzLWlubmVyLFt0eXBlPVxcXCJyZXNldFxcXCJdOjotbW96LWZvY3VzLWlubmVyLFt0eXBlPVxcXCJzdWJtaXRcXFwiXTo6LW1vei1mb2N1cy1pbm5lcntib3JkZXItc3R5bGU6bm9uZTtwYWRkaW5nOjB9YnV0dG9uOi1tb3otZm9jdXNyaW5nLFt0eXBlPVxcXCJidXR0b25cXFwiXTotbW96LWZvY3VzcmluZyxbdHlwZT1cXFwicmVzZXRcXFwiXTotbW96LWZvY3VzcmluZyxbdHlwZT1cXFwic3VibWl0XFxcIl06LW1vei1mb2N1c3Jpbmd7b3V0bGluZToxcHggZG90dGVkIEJ1dHRvblRleHR9ZmllbGRzZXR7cGFkZGluZzowLjM1ZW0gMC43NWVtIDAuNjI1ZW19bGVnZW5ke2JveC1zaXppbmc6Ym9yZGVyLWJveDtjb2xvcjppbmhlcml0O2Rpc3BsYXk6dGFibGU7bWF4LXdpZHRoOjEwMCU7cGFkZGluZzowO3doaXRlLXNwYWNlOm5vcm1hbH1wcm9ncmVzc3t2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZX10ZXh0YXJlYXtvdmVyZmxvdzphdXRvfVt0eXBlPVxcXCJjaGVja2JveFxcXCJdLFt0eXBlPVxcXCJyYWRpb1xcXCJde2JveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjB9W3R5cGU9XFxcIm51bWJlclxcXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFt0eXBlPVxcXCJudW1iZXJcXFwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbntoZWlnaHQ6YXV0b31bdHlwZT1cXFwic2VhcmNoXFxcIl17LXdlYmtpdC1hcHBlYXJhbmNlOnRleHRmaWVsZDtvdXRsaW5lLW9mZnNldDotMnB4fVt0eXBlPVxcXCJzZWFyY2hcXFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbnstd2Via2l0LWFwcGVhcmFuY2U6bm9uZX06Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uey13ZWJraXQtYXBwZWFyYW5jZTpidXR0b247Zm9udDppbmhlcml0fWRldGFpbHN7ZGlzcGxheTpibG9ja31zdW1tYXJ5e2Rpc3BsYXk6bGlzdC1pdGVtfXRlbXBsYXRle2Rpc3BsYXk6bm9uZX1baGlkZGVuXXtkaXNwbGF5Om5vbmV9LmNsZWFyZml4OmFmdGVye3Zpc2liaWxpdHk6aGlkZGVuO2Rpc3BsYXk6YmxvY2s7Y29udGVudDpcXFwiXFxcIjtjbGVhcjpib3RoO2hlaWdodDowfWh0bWx7Ym94LXNpemluZzpib3JkZXItYm94fSosKjpiZWZvcmUsKjphZnRlcntib3gtc2l6aW5nOmluaGVyaXR9QGZvbnQtZmFjZXtmb250LWZhbWlseTonQ29vbHZldGljYSc7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMF9fXyArIFwiKX1AZm9udC1mYWNle2ZvbnQtZmFtaWx5OidGbGVsdGV4JztzcmM6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18xX19fICsgXCIpfWh0bWx7Zm9udC1zaXplOjYyLjUlfWJvZHl7Zm9udC1mYW1pbHk6XFxcIkZsZWx0ZXhcXFwiO2ZvbnQtc2l6ZToxLjZyZW07Y29sb3I6IzA5MDkwZX1oMXtmb250LWZhbWlseTpcXFwiRmxlbHRleFxcXCIsc2VyaWY7Zm9udC1zaXplOjEuN3JlbTtmb250LXdlaWdodDo0MDB9Kjo6LW1vei1zZWxlY3Rpb257YmFja2dyb3VuZDojZmZmMGY1fSo6OnNlbGVjdGlvbntiYWNrZ3JvdW5kOiNmZmYwZjV9aHRtbCxib2R5e2hlaWdodDoxMDAlfWJvZHl7d2lkdGg6MTAwJTttaW4taGVpZ2h0OjEwMCU7bWFyZ2luOjA7Zm9udC1mYW1pbHk6J0ZsZWx0ZXgnO2JhY2tncm91bmQ6IzNkM2IzYjtoZWlnaHQ6MTAwdmg7Y29sb3I6I2Y3ZjdmNztvdmVyZmxvdzpoaWRkZW47YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoLTQ1ZGVnLCAjMDExNjM4LCAjM0U0MzQ4LCAjMkUyOTRFLCAjMDExNjM4KTtiYWNrZ3JvdW5kLXNpemU6NDAwJSA0MDAlOy13ZWJraXQtYW5pbWF0aW9uOmJvZHlHcmFkaWVudCAxNXMgZWFzZSBpbmZpbml0ZTthbmltYXRpb246Ym9keUdyYWRpZW50IDE1cyBlYXNlIGluZmluaXRlfS53cmFwcGVye21heC13aWR0aDoxMDAlfWgxLGgyLGgzLGg0LGg1LGg2e21hcmdpbjowfXB7bWFyZ2luOjB9YXt0ZXh0LWRlY29yYXRpb246bm9uZTtjb2xvcjojMmM2MzhmfWltZ3tkaXNwbGF5OmJsb2NrfXVse3BhZGRpbmc6MDtsaXN0LXN0eWxlOm5vbmV9I3NiLXBhbmV7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246Y29sdW1uOy13ZWJraXQtYm94LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjttaW4taGVpZ2h0OjEwMCU7Zm9udC1zaXplOjJlbTt0ZXh0LWFsaWduOmNlbnRlcjt0ZXh0LXNoYWRvdzoycHggMnB4IDRweCByZ2JhKDAsMCwwLDAuNil9I3Niey13ZWJraXQtYW5pbWF0aW9uOmZhZGVJblJpZ2h0IDFzO2FuaW1hdGlvbjpmYWRlSW5SaWdodCAxc30jc2ItdGl0bGV7bWFyZ2luLXRvcDoxMHB4O2ZvbnQtc2l6ZTowLjVlbX1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpeyNzYi10aXRsZXttYXJnaW4tdG9wOjMwcHh9I3Nie2ZvbnQtc2l6ZTo0ZW19I3NiLXNvY2lhbHttYXJnaW4tdG9wOjMwcHh9fS5SZWFjdEJhc2h7LXdlYmtpdC1hbmltYXRpb246ZmFkZUluUmlnaHQgMXM7YW5pbWF0aW9uOmZhZGVJblJpZ2h0IDFzO3dpZHRoOjQwMHB4O2hlaWdodDoyMDBweCAhaW1wb3J0YW50O21hcmdpbjoyMHB4O2JveC1zaGFkb3c6M3B4IDRweCA0cHggcmdiYSgwLDAsMCwwLjIpO3RleHQtc2hhZG93Om5vbmUgIWltcG9ydGFudH0uUmVhY3RCYXNoPmRpdjpmaXJzdC1jaGlsZHtwYWRkaW5nOjVweCAxMHB4IDRweCAhaW1wb3J0YW50fS5SZWFjdEJhc2g+ZGl2Omxhc3QtY2hpbGR7b3ZlcmZsb3cteTpoaWRkZW4gIWltcG9ydGFudH0uUmVhY3RCYXNoIHNwYW57Zm9udC1mYW1pbHk6J0ZsZWx0ZXgnfS5SZWFjdEJhc2ggaW5wdXR7b3V0bGluZTpub25lICFpbXBvcnRhbnR9I3NiLXNvY2lhbHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWFuaW1hdGlvbjpmYWRlSW5MZWZ0IDFzO2FuaW1hdGlvbjpmYWRlSW5MZWZ0IDFzOy13ZWJraXQtYW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkczthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzOy13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OjAuNzBzO2FuaW1hdGlvbi1kZWxheTowLjcwcztvcGFjaXR5OjB9I3NiLXNvY2lhbD4uc2Itc29jaWFsLW5ldHdvcmt7bWFyZ2luLXRvcDoyMHB4O3dpZHRoOjYwcHg7aGVpZ2h0OjYwcHh9I3NiLXNvY2lhbD4uc2Itc29jaWFsLW5ldHdvcms+LnNiLXNvY2lhbC1uZXR3b3JrLWNvbnRhaW5lcnt3aWR0aDo1MXB4O2hlaWdodDo1MHB4O2JvcmRlci1yYWRpdXM6NTAlO2JhY2tncm91bmQ6d2hpdGU7cG9zaXRpb246YWJzb2x1dGU7Ym94LXNoYWRvdzozcHggNHB4IDRweCByZ2JhKDAsMCwwLDAuMil9I3NiLXNvY2lhbD4uc2Itc29jaWFsLW5ldHdvcms+LnNiLXNvY2lhbC1uZXR3b3JrLWNvbnRhaW5lcj5pbWd7cG9zaXRpb246cmVsYXRpdmU7dG9wOjVweDtsZWZ0OjZweDtoZWlnaHQ6NDBweDt3aWR0aDo0MHB4fSNzYi1zb2NpYWw+LnNiLXNvY2lhbC1uZXR3b3JrPi5zYi1zb2NpYWwtbmV0d29yay1jb250YWluZXI+aW1nI3N0YWNrLW92ZXJmbG93e3RvcDoxMHB4O2xlZnQ6MTFweDt3aWR0aDozMHB4O2hlaWdodDozMHB4fSNzYi1zb2NpYWw+LnNiLXNvY2lhbC1uZXR3b3JrPi5zYi1zb2NpYWwtbmV0d29yay1jb250YWluZXI+aW1nI3Jvb3QtbWV7dG9wOjdweDtsZWZ0OjhweDtoZWlnaHQ6MzVweDt3aWR0aDozNXB4fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIi9ob21lL3NhbXVlbC93b3Jrc3BhY2Uvc2FtdWVsYmVuYWlzLmZyL3NyYy9zdHlsZXMvdXRpbHMvX2tleWZyYW1lcy5zY3NzXCIsXCIvaG9tZS9zYW11ZWwvd29ya3NwYWNlL3NhbXVlbGJlbmFpcy5mci9zcmMvc3R5bGVzL3NldHVwL19ub3JtYWxpemUuc2Nzc1wiLFwiL2hvbWUvc2FtdWVsL3dvcmtzcGFjZS9zYW11ZWxiZW5haXMuZnIvc3JjL3N0eWxlcy9zZXR1cC9fY2xlYXJmaXguc2Nzc1wiLFwiL2hvbWUvc2FtdWVsL3dvcmtzcGFjZS9zYW11ZWxiZW5haXMuZnIvc3JjL3N0eWxlcy9zZXR1cC9fYm9yZGVyLWJveC5zY3NzXCIsXCIvaG9tZS9zYW11ZWwvd29ya3NwYWNlL3NhbXVlbGJlbmFpcy5mci9zcmMvc3R5bGVzL2dsb2JhbC9fdHlwb2dyYXBoeS5zY3NzXCIsXCIvaG9tZS9zYW11ZWwvd29ya3NwYWNlL3NhbXVlbGJlbmFpcy5mci9zcmMvc3R5bGVzL3V0aWxzL192YXJpYWJsZXMuc2Nzc1wiLFwiL2hvbWUvc2FtdWVsL3dvcmtzcGFjZS9zYW11ZWxiZW5haXMuZnIvc3JjL3N0eWxlcy9nbG9iYWwvX2dsb2JhbC5zY3NzXCIsXCIvaG9tZS9zYW11ZWwvd29ya3NwYWNlL3NhbXVlbGJlbmFpcy5mci9zcmMvc3R5bGVzL2dsb2JhbC9fdGVybWluYWwuc2Nzc1wiLFwiL2hvbWUvc2FtdWVsL3dvcmtzcGFjZS9zYW11ZWxiZW5haXMuZnIvc3JjL3N0eWxlcy9nbG9iYWwvX3NvY2lhbC5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLCtCQUNJLEtBQ0UsU0FBVSxDQUNWLHlDQUFXLENBQVgsaUNBQWtDLENBR3BDLEdBQ0UsU0FBVSxDQUNWLHNDQUFXLENBQVgsOEJBQStCLENBQUEsQ0FSckMsdUJBQ0ksS0FDRSxTQUFVLENBQ1YseUNBQVcsQ0FBWCxpQ0FBa0MsQ0FHcEMsR0FDRSxTQUFVLENBQ1Ysc0NBQVcs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LENBQ2IsMkJBQXNCLENBQXRCLDRCQUFzQixDQUF0QixxQkFBc0IsQ0FDdEIsdUJBQXVCLENBQXZCLHNCQUF1QixDQUN2Qix3QkFBbUIsQ0FBbkIsa0JBQW1CLENBQ25CLGVBQWdCLENBQ2hCLGFBQWMsQ0FDZCxpQkFBa0IsQ0FDbEIsdUNBQTJDLENBQzVDLElBR0MsZ0NBQVcsQ0FBWCx3QkFBeUIsQ0FDMUIsVUFHQyxlQUFnQixDQUNoQixlQUFnQixDQUNqQiwwQkFFQyxVQUNFLGVBQWdCLENBQ2pCLElBR0MsYUFBYSxDQUNkLFdBRUMsZUFBZ0IsQ0FDakIsQ0M5RUgsV0FDSSxnQ0FBeUIsQ0FBekIsd0JBQXlCLENBQ3pCLFdBQVksQ0FDWix1QkFBd0IsQ0FDeEIsV0FBWSxDQUNaLHNDQUEwQyxDQUMxQywyQkFBNEIsQ0FOaEMsMkJBUVEsK0JBQWdDLENBUnhDLDBCQVlTLDRCQUE2QixDQVp0QyxnQkFlWSxxQkFBdUIsQ0FmbkMsaUJBaUJTLHVCQUF3QixDQUMzQixXQ2hCRixtQkFBYSxDQUFiLFlBQWEsQ0FDYiwrQkFBd0IsQ0FBeEIsdUJBQXdCLENBQ3hCLG9DQUE2QixDQUE3Qiw0QkFBNkIsQ0FDN0IsNkJBQXNCLENBQXRCLHFCQUFzQixDQUN0QixTQUFVLENBTGQsOEJBUU0sZUFBZ0IsQ0FDaEIsVUFBVyxDQUNYLFdBQVksQ0FWbEIsMkRBYVEsVUFBVyxDQUNYLFdBQVksQ0FDWixpQkFBa0IsQ0FDbEIsZ0JBQWlCLENBQ2pCLGlCQUFrQixDQUNsQixzQ0FBMEMsQ0FsQmxELCtEQXFCVSxpQkFBa0IsQ0FDbEIsT0FBUSxDQUNSLFFBQVMsQ0FDVCxXQUFZLENBQ1osVUFBVyxDQXpCckIsOEVBNEJZLFFBQVMsQ0FDVCxTQUFVLENBQ1YsVUFBVyxDQUNYLFdBQVksQ0EvQnhCLHVFQTJDYyxPQUFRLENBQ1IsUUFBUyxDQUNULFdBQVksQ0FDWixVQUFXXCIsXCJmaWxlXCI6XCJpbmRleC5zY3NzXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBrZXlmcmFtZXMgZmFkZUluUmlnaHQge1xcbiAgICBmcm9tIHtcXG4gICAgICBvcGFjaXR5OiAwO1xcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTAwJSwgMCwgMCk7XFxuICAgIH1cXG4gIFxcbiAgICB0byB7XFxuICAgICAgb3BhY2l0eTogMTtcXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcbiAgICB9XFxuICB9XFxuICBcXG4gIEBrZXlmcmFtZXMgZmFkZUluTGVmdCB7XFxuICAgIGZyb20ge1xcbiAgICAgIG9wYWNpdHk6IDA7XFxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCk7XFxuICAgIH1cXG4gIFxcbiAgICB0byB7XFxuICAgICAgb3BhY2l0eTogMTtcXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcbiAgICB9XFxuICB9XFxuICBcXG4gIEBrZXlmcmFtZXMgYm9keUdyYWRpZW50IHtcXG4gICAgICAwJSB7XFxuICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAlIDUwJTtcXG4gICAgICB9XFxuICAgICAgNTAlIHtcXG4gICAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMTAwJSA1MCU7XFxuICAgICAgfVxcbiAgICAgIDEwMCUge1xcbiAgICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwJSA1MCU7XFxuICAgICAgfVxcbiAgfVxcbiAgXCIsXCIvKiEgbm9ybWFsaXplLmNzcyB2OC4wLjEgfCBNSVQgTGljZW5zZSB8IGdpdGh1Yi5jb20vbmVjb2xhcy9ub3JtYWxpemUuY3NzICovXFxuXFxuLyogRG9jdW1lbnRcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qKlxcbiAqIDEuIENvcnJlY3QgdGhlIGxpbmUgaGVpZ2h0IGluIGFsbCBicm93c2Vycy5cXG4gKiAyLiBQcmV2ZW50IGFkanVzdG1lbnRzIG9mIGZvbnQgc2l6ZSBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2VzIGluIGlPUy5cXG4gKi9cXG5cXG5odG1sIHtcXG4gIGxpbmUtaGVpZ2h0OiAxLjE1O1xcbiAgLyogMSAqL1xcbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xcbiAgLyogMiAqL1xcbn1cXG5cXG4vKiBTZWN0aW9uc1xcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzLlxcbiAqL1xcblxcbmJvZHkge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4vKipcXG4gKiBSZW5kZXIgdGhlIGBtYWluYCBlbGVtZW50IGNvbnNpc3RlbnRseSBpbiBJRS5cXG4gKi9cXG5cXG5tYWluIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4vKipcXG4gKiBDb3JyZWN0IHRoZSBmb250IHNpemUgYW5kIG1hcmdpbiBvbiBgaDFgIGVsZW1lbnRzIHdpdGhpbiBgc2VjdGlvbmAgYW5kXFxuICogYGFydGljbGVgIGNvbnRleHRzIGluIENocm9tZSwgRmlyZWZveCwgYW5kIFNhZmFyaS5cXG4gKi9cXG5cXG5oMSB7XFxuICBmb250LXNpemU6IDJlbTtcXG4gIG1hcmdpbjogMC42N2VtIDA7XFxufVxcblxcbi8qIEdyb3VwaW5nIGNvbnRlbnRcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qKlxcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXFxuICogMi4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZSBhbmQgSUUuXFxuICovXFxuXFxuaHIge1xcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XFxuICAvKiAxICovXFxuICBoZWlnaHQ6IDA7XFxuICAvKiAxICovXFxuICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gIC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXFxuICovXFxuXFxucHJlIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcXG4gIC8qIDEgKi9cXG4gIGZvbnQtc2l6ZTogMWVtO1xcbiAgLyogMiAqL1xcbn1cXG5cXG4vKiBUZXh0LWxldmVsIHNlbWFudGljc1xcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgb24gYWN0aXZlIGxpbmtzIGluIElFIDEwLlxcbiAqL1xcblxcbmEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi8qKlxcbiAqIDEuIFJlbW92ZSB0aGUgYm90dG9tIGJvcmRlciBpbiBDaHJvbWUgNTctXFxuICogMi4gQWRkIHRoZSBjb3JyZWN0IHRleHQgZGVjb3JhdGlvbiBpbiBDaHJvbWUsIEVkZ2UsIElFLCBPcGVyYSwgYW5kIFNhZmFyaS5cXG4gKi9cXG5cXG5hYmJyW3RpdGxlXSB7XFxuICBib3JkZXItYm90dG9tOiBub25lO1xcbiAgLyogMSAqL1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxuICAvKiAyICovXFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7XFxuICAvKiAyICovXFxufVxcblxcbi8qKlxcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHdlaWdodCBpbiBDaHJvbWUsIEVkZ2UsIGFuZCBTYWZhcmkuXFxuICovXFxuXFxuYixcXG5zdHJvbmcge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcXG59XFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXFxuICovXFxuXFxuY29kZSxcXG5rYmQsXFxuc2FtcCB7XFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XFxuICAvKiAxICovXFxuICBmb250LXNpemU6IDFlbTtcXG4gIC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXFxuICovXFxuXFxuc21hbGwge1xcbiAgZm9udC1zaXplOiA4MCU7XFxufVxcblxcbi8qKlxcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxcbiAqIGFsbCBicm93c2Vycy5cXG4gKi9cXG5cXG5zdWIsXFxuc3VwIHtcXG4gIGZvbnQtc2l6ZTogNzUlO1xcbiAgbGluZS1oZWlnaHQ6IDA7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxufVxcblxcbnN1YiB7XFxuICBib3R0b206IC0wLjI1ZW07XFxufVxcblxcbnN1cCB7XFxuICB0b3A6IC0wLjVlbTtcXG59XFxuXFxuLyogRW1iZWRkZWQgY29udGVudFxcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBib3JkZXIgb24gaW1hZ2VzIGluc2lkZSBsaW5rcyBpbiBJRSAxMC5cXG4gKi9cXG5cXG5pbWcge1xcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xcbn1cXG5cXG4vKiBGb3Jtc1xcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogMS4gQ2hhbmdlIHRoZSBmb250IHN0eWxlcyBpbiBhbGwgYnJvd3NlcnMuXFxuICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxcbiAqL1xcblxcbmJ1dHRvbixcXG5pbnB1dCxcXG5vcHRncm91cCxcXG5zZWxlY3QsXFxudGV4dGFyZWEge1xcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XFxuICAvKiAxICovXFxuICBmb250LXNpemU6IDEwMCU7XFxuICAvKiAxICovXFxuICBsaW5lLWhlaWdodDogMS4xNTtcXG4gIC8qIDEgKi9cXG4gIG1hcmdpbjogMDtcXG4gIC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogU2hvdyB0aGUgb3ZlcmZsb3cgaW4gSUUuXFxuICogMS4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZS5cXG4gKi9cXG5cXG5idXR0b24sXFxuaW5wdXQge1xcbiAgLyogMSAqL1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxufVxcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRWRnZSwgRmlyZWZveCwgYW5kIElFLlxcbiAqIDEuIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRmlyZWZveC5cXG4gKi9cXG5cXG5idXR0b24sXFxuc2VsZWN0IHtcXG4gIC8qIDEgKi9cXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcbn1cXG5cXG4vKipcXG4gKiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxcbiAqL1xcblxcbmJ1dHRvbixcXG5bdHlwZT1cXFwiYnV0dG9uXFxcIl0sXFxuW3R5cGU9XFxcInJlc2V0XFxcIl0sXFxuW3R5cGU9XFxcInN1Ym1pdFxcXCJdIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xcbn1cXG5cXG4vKipcXG4gKiBSZW1vdmUgdGhlIGlubmVyIGJvcmRlciBhbmQgcGFkZGluZyBpbiBGaXJlZm94LlxcbiAqL1xcblxcbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixcXG5bdHlwZT1cXFwiYnV0dG9uXFxcIl06Oi1tb3otZm9jdXMtaW5uZXIsXFxuW3R5cGU9XFxcInJlc2V0XFxcIl06Oi1tb3otZm9jdXMtaW5uZXIsXFxuW3R5cGU9XFxcInN1Ym1pdFxcXCJdOjotbW96LWZvY3VzLWlubmVyIHtcXG4gIGJvcmRlci1zdHlsZTogbm9uZTtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbi8qKlxcbiAqIFJlc3RvcmUgdGhlIGZvY3VzIHN0eWxlcyB1bnNldCBieSB0aGUgcHJldmlvdXMgcnVsZS5cXG4gKi9cXG5cXG5idXR0b246LW1vei1mb2N1c3JpbmcsXFxuW3R5cGU9XFxcImJ1dHRvblxcXCJdOi1tb3otZm9jdXNyaW5nLFxcblt0eXBlPVxcXCJyZXNldFxcXCJdOi1tb3otZm9jdXNyaW5nLFxcblt0eXBlPVxcXCJzdWJtaXRcXFwiXTotbW96LWZvY3VzcmluZyB7XFxuICBvdXRsaW5lOiAxcHggZG90dGVkIEJ1dHRvblRleHQ7XFxufVxcblxcbi8qKlxcbiAqIENvcnJlY3QgdGhlIHBhZGRpbmcgaW4gRmlyZWZveC5cXG4gKi9cXG5cXG5maWVsZHNldCB7XFxuICBwYWRkaW5nOiAwLjM1ZW0gMC43NWVtIDAuNjI1ZW07XFxufVxcblxcbi8qKlxcbiAqIDEuIENvcnJlY3QgdGhlIHRleHQgd3JhcHBpbmcgaW4gRWRnZSBhbmQgSUUuXFxuICogMi4gQ29ycmVjdCB0aGUgY29sb3IgaW5oZXJpdGFuY2UgZnJvbSBgZmllbGRzZXRgIGVsZW1lbnRzIGluIElFLlxcbiAqIDMuIFJlbW92ZSB0aGUgcGFkZGluZyBzbyBkZXZlbG9wZXJzIGFyZSBub3QgY2F1Z2h0IG91dCB3aGVuIHRoZXkgemVybyBvdXRcXG4gKiAgICBgZmllbGRzZXRgIGVsZW1lbnRzIGluIGFsbCBicm93c2Vycy5cXG4gKi9cXG5cXG5sZWdlbmQge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIC8qIDEgKi9cXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgLyogMiAqL1xcbiAgZGlzcGxheTogdGFibGU7XFxuICAvKiAxICovXFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICAvKiAxICovXFxuICBwYWRkaW5nOiAwO1xcbiAgLyogMyAqL1xcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcXG4gIC8qIDEgKi9cXG59XFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cXG4gKi9cXG5cXG5wcm9ncmVzcyB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxufVxcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUgMTArLlxcbiAqL1xcblxcbnRleHRhcmVhIHtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbn1cXG5cXG4vKipcXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBJRSAxMC5cXG4gKiAyLiBSZW1vdmUgdGhlIHBhZGRpbmcgaW4gSUUgMTAuXFxuICovXFxuXFxuW3R5cGU9XFxcImNoZWNrYm94XFxcIl0sXFxuW3R5cGU9XFxcInJhZGlvXFxcIl0ge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIC8qIDEgKi9cXG4gIHBhZGRpbmc6IDA7XFxuICAvKiAyICovXFxufVxcblxcbi8qKlxcbiAqIENvcnJlY3QgdGhlIGN1cnNvciBzdHlsZSBvZiBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBidXR0b25zIGluIENocm9tZS5cXG4gKi9cXG5cXG5bdHlwZT1cXFwibnVtYmVyXFxcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXFxuW3R5cGU9XFxcIm51bWJlclxcXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcXG4gIGhlaWdodDogYXV0bztcXG59XFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgb2RkIGFwcGVhcmFuY2UgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXFxuICogMi4gQ29ycmVjdCB0aGUgb3V0bGluZSBzdHlsZSBpbiBTYWZhcmkuXFxuICovXFxuXFxuW3R5cGU9XFxcInNlYXJjaFxcXCJdIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xcbiAgLyogMSAqL1xcbiAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7XFxuICAvKiAyICovXFxufVxcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgaW5uZXIgcGFkZGluZyBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBtYWNPUy5cXG4gKi9cXG5cXG5bdHlwZT1cXFwic2VhcmNoXFxcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbn1cXG5cXG4vKipcXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxcbiAqIDIuIENoYW5nZSBmb250IHByb3BlcnRpZXMgdG8gYGluaGVyaXRgIGluIFNhZmFyaS5cXG4gKi9cXG5cXG46Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xcbiAgLyogMSAqL1xcbiAgZm9udDogaW5oZXJpdDtcXG4gIC8qIDIgKi9cXG59XFxuXFxuLyogSW50ZXJhY3RpdmVcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qXFxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gRWRnZSwgSUUgMTArLCBhbmQgRmlyZWZveC5cXG4gKi9cXG5cXG5kZXRhaWxzIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4vKlxcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIGFsbCBicm93c2Vycy5cXG4gKi9cXG5cXG5zdW1tYXJ5IHtcXG4gIGRpc3BsYXk6IGxpc3QtaXRlbTtcXG59XFxuXFxuLyogTWlzY1xcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgMTArLlxcbiAqL1xcblxcbnRlbXBsYXRlIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi8qKlxcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwLlxcbiAqL1xcblxcbltoaWRkZW5dIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVwiLFwiLmNsZWFyZml4OmFmdGVyIHtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBjbGVhcjogYm90aDtcXG4gIGhlaWdodDogMDtcXG59XCIsXCJodG1sIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbiosICo6YmVmb3JlLCAqOmFmdGVyIHtcXG4gIGJveC1zaXppbmc6IGluaGVyaXQ7XFxufVwiLFwiQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogJ0Nvb2x2ZXRpY2EnO1xcbiAgc3JjOiB1cmwoJy4vZm9udHMvY29vbHZldGljYS50dGYnKVxcbn1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnRmxlbHRleCc7XFxuICBzcmM6IHVybCgnLi9mb250cy9mbGVsdGV4LnR0ZicpXFxufVxcblxcblxcbi8vISBzZXQgZm9udCB2YXJpYWJsZXNcXG4kZm9udC1oZWFkaW5nOiAnRmxlbHRleCc7XFxuJGZvbnQtYm9keTogJ0ZsZWx0ZXgnO1xcblxcblxcbmh0bWwge1xcbiAgZm9udC1zaXplOiA2Mi41JTsgLy8gMXJlbSA9IDEwcHgsIDMuNXJlbSA9IDM1cHg7XFxufVxcblxcbmJvZHkge1xcbiAgZm9udC1mYW1pbHk6ICRmb250LWJvZHk7XFxuICBmb250LXNpemU6IDEuNnJlbTtcXG4gIGNvbG9yOiAkYmxhY2s7XFxufVxcblxcbmgxIHtcXG4gIGZvbnQtZmFtaWx5OiAkZm9udC1oZWFkaW5nLCBzZXJpZjtcXG4gIGZvbnQtc2l6ZTogMS43cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXCIsXCIkd2hpdGU6ICNmZmY7XFxuJGxpZ2h0LWdyZXk6ICNmYWZhZmE7XFxuJGdyZXk6ICNkN2Q3ZDc7XFxuJGJsYWNrLXNvZnQ6ICM0NDQ7XFxuJGJsYWNrOiAjMDkwOTBlO1xcbiRibHVlOiAjMmM2MzhmO1xcbiRwaW5rOiAjZmZmMGY1O1xcbiR5ZWxsb3c6ICNmZmZhY2Q7XFxuXFxuJHNiLXByaW1hcnk6ICRibHVlO1xcbiRzYi1zZWNvbmRhcnk6ICRwaW5rO1xcbiRzYi10ZXJ0aWFyeTogJHllbGxvdztcIixcIio6OnNlbGVjdGlvbiB7XFxuICBiYWNrZ3JvdW5kOiAkcGluaztcXG59XFxuXFxuaHRtbCxcXG5ib2R5IHtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxuYm9keSB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1pbi1oZWlnaHQ6IDEwMCU7XFxuICBtYXJnaW46IDA7XFxuICBmb250LWZhbWlseTogJ0ZsZWx0ZXgnO1xcbiAgYmFja2dyb3VuZDogIzNkM2IzYjtcXG4gIGhlaWdodDogMTAwdmg7XFxuICBjb2xvcjogI2Y3ZjdmNztcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoLTQ1ZGVnLCAjMDExNjM4LCAjM0U0MzQ4LCAjMkUyOTRFLCAjMDExNjM4KTtcXG5cXHRiYWNrZ3JvdW5kLXNpemU6IDQwMCUgNDAwJTtcXG5cXHRhbmltYXRpb246IGJvZHlHcmFkaWVudCAxNXMgZWFzZSBpbmZpbml0ZTtcXG59XFxuXFxuLndyYXBwZXIge1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbn1cXG5cXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxucCB7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbmEge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgY29sb3I6ICRibHVlO1xcbn1cXG5cXG5pbWcge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbnVsIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG4jc2ItcGFuZSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIG1pbi1oZWlnaHQ6IDEwMCU7XFxuICBmb250LXNpemU6IDJlbTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHRleHQtc2hhZG93OiAycHggMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuNik7XFxufVxcblxcbiNzYiB7XFxuICBhbmltYXRpb246IGZhZGVJblJpZ2h0IDFzO1xcbn1cXG5cXG4jc2ItdGl0bGUge1xcbiAgbWFyZ2luLXRvcDogMTBweDtcXG4gIGZvbnQtc2l6ZTogMC41ZW07XFxufVxcbkBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCkge1xcbiAgI3NiLXRpdGxlIHtcXG4gICAgbWFyZ2luLXRvcDogMzBweDtcXG4gIH1cXG4gIFxcbiAgI3NiIHtcXG4gICAgZm9udC1zaXplOjRlbTtcXG4gIH1cXG4gICNzYi1zb2NpYWwge1xcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xcbiAgfVxcbn1cXG5cIixcIi5SZWFjdEJhc2gge1xcbiAgICBhbmltYXRpb246IGZhZGVJblJpZ2h0IDFzO1xcbiAgICB3aWR0aDogNDAwcHg7XFxuICAgIGhlaWdodDogMjAwcHggIWltcG9ydGFudDtcXG4gICAgbWFyZ2luOiAyMHB4O1xcbiAgICBib3gtc2hhZG93OiAzcHggNHB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMik7XFxuICAgIHRleHQtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XFxuICAgICYgPiBkaXY6Zmlyc3QtY2hpbGQge1xcbiAgICAgICAgcGFkZGluZzogNXB4IDEwcHggNHB4ICFpbXBvcnRhbnQ7XFxuICAgICB9XFxuXFxuICAgICAmID4gZGl2Omxhc3QtY2hpbGQge1xcbiAgICAgICAgIG92ZXJmbG93LXk6IGhpZGRlbiAhaW1wb3J0YW50O1xcbiAgICAgfVxcblxcbiAgICAgc3BhbiB7IGZvbnQtZmFtaWx5IDogJ0ZsZWx0ZXgnOyB9XFxuICAgICBpbnB1dCB7XFxuICAgICAgICAgb3V0bGluZTogbm9uZSAhaW1wb3J0YW50O1xcbiAgICAgfVxcbiAgIFxcbn1cIixcIlxcbiNzYi1zb2NpYWwge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbmltYXRpb246IGZhZGVJbkxlZnQgMXM7XFxuICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGZvcndhcmRzO1xcbiAgICBhbmltYXRpb24tZGVsYXk6IDAuNzBzO1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgXFxuICAgICYgPiAuc2Itc29jaWFsLW5ldHdvcmsge1xcbiAgICAgIG1hcmdpbi10b3A6IDIwcHg7XFxuICAgICAgd2lkdGg6IDYwcHg7XFxuICAgICAgaGVpZ2h0OiA2MHB4O1xcbiAgXFxuICAgICAgJiA+IC5zYi1zb2NpYWwtbmV0d29yay1jb250YWluZXIge1xcbiAgICAgICAgd2lkdGg6IDUxcHg7XFxuICAgICAgICBoZWlnaHQ6IDUwcHg7XFxuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIGJveC1zaGFkb3c6IDNweCA0cHggNHB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcXG4gIFxcbiAgICAgICAgJiA+IGltZyB7XFxuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgICAgdG9wOiA1cHg7XFxuICAgICAgICAgIGxlZnQ6IDZweDtcXG4gICAgICAgICAgaGVpZ2h0OiA0MHB4O1xcbiAgICAgICAgICB3aWR0aDogNDBweDtcXG4gIFxcbiAgICAgICAgICAmI3N0YWNrLW92ZXJmbG93IHtcXG4gICAgICAgICAgICB0b3A6IDEwcHg7XFxuICAgICAgICAgICAgbGVmdDogMTFweDtcXG4gICAgICAgICAgICB3aWR0aDogMzBweDtcXG4gICAgICAgICAgICBoZWlnaHQ6IDMwcHg7XFxuICAgICAgICAgIH1cXG4gIFxcbiAgICAgICAgICAvLyAmI2dpdGh1YiB7XFxuICAgICAgICAgICAgXFxuICAgICAgICAgIC8vIH1cXG4gICAgXFxuICAgICAgICAgIC8vICYjbGlua2VkaW4ge1xcbiAgICAgICAgICAgIFxcbiAgICAgICAgICAvLyB9XFxuXFxuICAgICAgICAgICAgJiNyb290LW1lIHtcXG4gICAgICAgICAgICAgIHRvcDogN3B4O1xcbiAgICAgICAgICAgICAgbGVmdDogOHB4O1xcbiAgICAgICAgICAgICAgaGVpZ2h0OiAzNXB4O1xcbiAgICAgICAgICAgICAgd2lkdGg6IDM1cHg7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcbiAgfVwiXX1dKTtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCJpbXBvcnQgJy4vaW5kZXguc2Nzcyc7XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlcn0gZnJvbSAncmVhY3QtZG9tJztcblxuaW1wb3J0IEFwcCBmcm9tICcuL2NvbXBvbmVudHMvQXBwJztcblxuLy8gY29uc3Qgc3RvcmUgPSBuZXcgQXBwTW9kZWwoKTtcblxucmVuZGVyKDxkaXY+PEFwcCBzdG9yZSA9IHtcbiAgICAgICAgIHt9XG4gICAgICAgfSAvPlxuICA8L2Rpdj4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JykpO1xuXG4vLyBzdG9yZS5hZGRUb2RvKCdHZXQgQ29mZmVlJyk7XG4vLyBzdG9yZS5hZGRUb2RvKCdXcml0ZSBzaW1wbGVyIGNvZGUnKTtcbi8vIHN0b3JlLnRvZG9zWzBdLmZpbmlzaGVkID0gdHJ1ZTtcblxuLy8gc2V0VGltZW91dCgoKSA9PiB7XG4vLyAgIHN0b3JlLmFkZFRvZG8oJ0dldCBhIGNvb2tpZSBhcyB3ZWxsJyk7XG4vLyB9LCAyMDAwKTtcblxuLy8gcGxheWluZyBhcm91bmQgaW4gdGhlIGNvbnNvbGVcbi8vIHdpbmRvdy5zdG9yZSA9IHN0b3JlO1xuIiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTEhLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS02LTIhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtMyEuL2luZGV4LnNjc3NcIik7XG5cbmlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xufVxuXG52YXIgb3B0aW9ucyA9IHt9XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuXG5pZiAobW9kdWxlLmhvdCkge1xuICBpZiAoIWNvbnRlbnQubG9jYWxzKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXG4gICAgICBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi0xIS4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNi0yIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTMhLi9pbmRleC5zY3NzXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi0xIS4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNi0yIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTMhLi9pbmRleC5zY3NzXCIpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgICAgIH1cbiAgICApXG4gIH1cblxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IFxuICAgIHVwZGF0ZSgpO1xuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIntcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gbW9kdWxlc1tfaV07IC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcbiAgICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG4gICAgICAvLyB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG4gICAgICAvLyBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cbiAgICAgIGlmIChpdGVtWzBdID09IG51bGwgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgaWYgKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiKFwiLmNvbmNhdChpdGVtWzJdLCBcIikgYW5kIChcIikuY29uY2F0KG1lZGlhUXVlcnksIFwiKVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290KS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG5lZWRRdW90ZXMpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLCBuby1wYXJhbS1yZWFzc2lnblxuICB1cmwgPSB1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsO1xuXG4gIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB1cmw7XG4gIH0gLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG5cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9IC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcblxuXG4gIGlmICgvW1wiJygpIFxcdFxcbl0vLnRlc3QodXJsKSB8fCBuZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNWQ0NzRmZDJlYmM2ZWY3N2M5YmYzMjE5MzkxYmVkOWMudHRmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiODcxZjdkYzczZjc3M2U3MTc4ODEwZDNmNjA1YjZkNTUudHRmXCI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlcyA9IFtdO1xuICB2YXIgbmV3U3R5bGVzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjc3MgPSBpdGVtWzFdO1xuICAgIHZhciBtZWRpYSA9IGl0ZW1bMl07XG4gICAgdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG4gICAgdmFyIHBhcnQgPSB7XG4gICAgICBjc3M6IGNzcyxcbiAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgIHNvdXJjZU1hcDogc291cmNlTWFwXG4gICAgfTtcblxuICAgIGlmICghbmV3U3R5bGVzW2lkXSkge1xuICAgICAgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBwYXJ0czogW3BhcnRdXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gc3R5bGVzW2ldO1xuICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuICAgIHZhciBqID0gMDtcblxuICAgIGlmIChkb21TdHlsZSkge1xuICAgICAgZG9tU3R5bGUucmVmcysrO1xuXG4gICAgICBmb3IgKDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgICBmb3IgKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgcGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge1xuICAgICAgICBpZDogaXRlbS5pZCxcbiAgICAgICAgcmVmczogMSxcbiAgICAgICAgcGFydHM6IHBhcnRzXG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIG9wdGlvbnMuYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKG9wdGlvbnMuYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgb3B0aW9ucy5hdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIGJ0b2EpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuYXR0cmlidXRlcyA9IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICdvYmplY3QnID8gb3B0aW9ucy5hdHRyaWJ1dGVzIDoge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcbiAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgdmFyIG1heVJlbW92ZSA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gc3R5bGVzW2ldO1xuICAgICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cbiAgICAgIGlmIChkb21TdHlsZSkge1xuICAgICAgICBkb21TdHlsZS5yZWZzLS07XG4gICAgICAgIG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmV3TGlzdCkge1xuICAgICAgdmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcbiAgICAgIGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1heVJlbW92ZS5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfZG9tU3R5bGUgPSBtYXlSZW1vdmVbX2ldO1xuXG4gICAgICBpZiAoX2RvbVN0eWxlLnJlZnMgPT09IDApIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBfZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBfZG9tU3R5bGUucGFydHNbal0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBzdHlsZXNJbkRvbVtfZG9tU3R5bGUuaWRdO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMC4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxhYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLGJhPW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxjYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O24mJlN5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTtuJiZTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpO24mJlN5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTt2YXIgej1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiBBKGEpe2Zvcih2YXIgYj1hLm1lc3NhZ2UsYz1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2IsZD0xO2Q8YXJndW1lbnRzLmxlbmd0aDtkKyspYys9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZF0pO2EubWVzc2FnZT1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIitiK1wiOyB2aXNpdCBcIitjK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCI7cmV0dXJuIGF9dmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9e307XG5mdW5jdGlvbiBEKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUM7dGhpcy51cGRhdGVyPWN8fEJ9RC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtELnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgQShFcnJvcig4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RC5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRSgpe31FLnByb3RvdHlwZT1ELnByb3RvdHlwZTtmdW5jdGlvbiBGKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUM7dGhpcy51cGRhdGVyPWN8fEJ9dmFyIEc9Ri5wcm90b3R5cGU9bmV3IEU7XG5HLmNvbnN0cnVjdG9yPUY7aChHLEQucHJvdG90eXBlKTtHLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBIPXtjdXJyZW50Om51bGx9LEk9e3N1c3BlbnNlOm51bGx9LEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGMpe3ZhciBkLGU9e30sZz1udWxsLGw9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYobD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoZVtkXT1iW2RdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGs9QXJyYXkoZiksbT0wO208ZjttKyspa1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWt9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWVbZF0mJihlW2RdPWZbZF0pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6bCxwcm9wczplLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gZGEoYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE4oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTz0vXFwvKy9nLFA9W107ZnVuY3Rpb24gUShhLGIsYyxkKXtpZihQLmxlbmd0aCl7dmFyIGU9UC5wb3AoKTtlLnJlc3VsdD1hO2Uua2V5UHJlZml4PWI7ZS5mdW5jPWM7ZS5jb250ZXh0PWQ7ZS5jb3VudD0wO3JldHVybiBlfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmMsY29udGV4dDpkLGNvdW50OjB9fVxuZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixjLGQpe3ZhciBlPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1lfHxcImJvb2xlYW5cIj09PWUpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBjKGQsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBsPTA7bDxhLmxlbmd0aDtsKyspe2U9YVtsXTt2YXIgZj1iK1QoZSxsKTtnKz1TKGUsZixjLGQpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxsPVxuMDshKGU9YS5uZXh0KCkpLmRvbmU7KWU9ZS52YWx1ZSxmPWIrVChlLGwrKyksZys9UyhlLGYsYyxkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1lKXRocm93IGM9XCJcIithLEEoRXJyb3IoMzEpLFwiW29iamVjdCBPYmplY3RdXCI9PT1jP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmMsXCJcIik7cmV0dXJuIGd9ZnVuY3Rpb24gVShhLGIsYyl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixiLGMpfWZ1bmN0aW9uIFQoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIGVhKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGZhKGEsYixjKXt2YXIgZD1hLnJlc3VsdCxlPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxkLGMsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTihhKSYmKGE9ZGEoYSxlKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStjKSksZC5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixjLGQsZSl7dmFyIGc9XCJcIjtudWxsIT1jJiYoZz0oXCJcIitjKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsZCxlKTtVKGEsZmEsYik7UihiKX1mdW5jdGlvbiBXKCl7dmFyIGE9SC5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEEoRXJyb3IoMzIxKSk7cmV0dXJuIGF9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXTtWKGEsZCxudWxsLGIsYyk7cmV0dXJuIGR9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGMpO1UoYSxlYSxiKTtSKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVShhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1YoYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTihhKSl0aHJvdyBBKEVycm9yKDE0MykpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpELFB1cmVDb21wb25lbnQ6RixjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6Yixcbl9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX0sbGF6eTpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6Y2EsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19LG1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6YmEsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ2FsbGJhY2soYSxiKX0sdXNlQ29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ29udGV4dChhLGIpfSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUVmZmVjdChhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsXG5iLGMpe3JldHVybiBXKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9LHVzZURlYnVnVmFsdWU6ZnVuY3Rpb24oKXt9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZU1lbW8oYSxiKX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFcoKS51c2VSZWR1Y2VyKGEsYixjKX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlUmVmKGEpfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVN0YXRlKGEpfSxGcmFnbWVudDpyLFByb2ZpbGVyOnUsU3RyaWN0TW9kZTp0LFN1c3BlbnNlOnksdW5zdGFibGVfU3VzcGVuc2VMaXN0OmFhLGNyZWF0ZUVsZW1lbnQ6TSxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEEoRXJyb3IoMjY3KSxhKTt2YXIgZD1oKHt9LGEucHJvcHMpLFxuZT1hLmtleSxnPWEucmVmLGw9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihnPWIucmVmLGw9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGU9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBmPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGsgaW4gYilLLmNhbGwoYixrKSYmIUwuaGFzT3duUHJvcGVydHkoaykmJihkW2tdPXZvaWQgMD09PWJba10mJnZvaWQgMCE9PWY/ZltrXTpiW2tdKX12YXIgaz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWspZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxrKXtmPUFycmF5KGspO2Zvcih2YXIgbT0wO208azttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmUscmVmOmcscHJvcHM6ZCxfb3duZXI6bH19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LFxuaXNWYWxpZEVsZW1lbnQ6Tix2ZXJzaW9uOlwiMTYuMTAuMVwiLHVuc3RhYmxlX3dpdGhTdXNwZW5zZUNvbmZpZzpmdW5jdGlvbihhLGIpe3ZhciBjPUkuc3VzcGVuc2U7SS5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7YSgpfWZpbmFsbHl7SS5zdXNwZW5zZT1jfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6SCxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpJLFJlYWN0Q3VycmVudE93bmVyOkosSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpofX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0fHxaO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMC4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHQoYSl7Zm9yKHZhciBiPWEubWVzc2FnZSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYixkPTE7ZDxhcmd1bWVudHMubGVuZ3RoO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkXSk7YS5tZXNzYWdlPVwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2IrXCI7IHZpc2l0IFwiK2MrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIjtyZXR1cm4gYX1pZighYWEpdGhyb3cgdChFcnJvcigyMjcpKTt2YXIgYmE9bnVsbCxjYT17fTtcbmZ1bmN0aW9uIGRhKCl7aWYoYmEpZm9yKHZhciBhIGluIGNhKXt2YXIgYj1jYVthXSxjPWJhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyB0KEVycm9yKDk2KSxhKTtpZighZWFbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgdChFcnJvcig5NyksYSk7ZWFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtpZihmYS5oYXNPd25Qcm9wZXJ0eShoKSl0aHJvdyB0KEVycm9yKDk5KSxoKTtmYVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZoYShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8oaGEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyB0KEVycm9yKDk4KSxkLGEpO319fX1cbmZ1bmN0aW9uIGhhKGEsYixjKXtpZihpYVthXSl0aHJvdyB0KEVycm9yKDEwMCksYSk7aWFbYV09YjtqYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBlYT1bXSxmYT17fSxpYT17fSxqYT17fTtmdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgbGE9ITEsbWE9bnVsbCxuYT0hMSxvYT1udWxsLHBhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2xhPSEwO21hPWF9fTtmdW5jdGlvbiBxYShhLGIsYyxkLGUsZixnLGgsayl7bGE9ITE7bWE9bnVsbDtrYS5hcHBseShwYSxhcmd1bWVudHMpfVxuZnVuY3Rpb24gcmEoYSxiLGMsZCxlLGYsZyxoLGspe3FhLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihsYSl7aWYobGEpe3ZhciBsPW1hO2xhPSExO21hPW51bGx9ZWxzZSB0aHJvdyB0KEVycm9yKDE5OCkpO25hfHwobmE9ITAsb2E9bCl9fXZhciBzYT1udWxsLHRhPW51bGwsdWE9bnVsbDtmdW5jdGlvbiB2YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9dWEoYyk7cmEoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB3YShhLGIpe2lmKG51bGw9PWIpdGhyb3cgdChFcnJvcigzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1cbmZ1bmN0aW9uIHhhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciB5YT1udWxsO2Z1bmN0aW9uIHphKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKyl2YShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZ2YShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gQWEoYSl7bnVsbCE9PWEmJih5YT13YSh5YSxhKSk7YT15YTt5YT1udWxsO2lmKGEpe3hhKGEsemEpO2lmKHlhKXRocm93IHQoRXJyb3IoOTUpKTtpZihuYSl0aHJvdyBhPW9hLG5hPSExLG9hPW51bGwsYTt9fVxudmFyIEJhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe2lmKGJhKXRocm93IHQoRXJyb3IoMTAxKSk7YmE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7ZGEoKX0saW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOmZ1bmN0aW9uKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO2lmKCFjYS5oYXNPd25Qcm9wZXJ0eShjKXx8Y2FbY10hPT1kKXtpZihjYVtjXSl0aHJvdyB0KEVycm9yKDEwMiksYyk7Y2FbY109ZDtiPSEwfX1iJiZkYSgpfX07XG5mdW5jdGlvbiBDYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXNhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IHQoRXJyb3IoMjMxKSxiLHR5cGVvZiBjKTtcbnJldHVybiBjfXZhciBEYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtEYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChEYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtEYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoRGEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbnZhciBFYT0vXiguKilbXFxcXFxcL10vLHg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixGYT14P1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLEdhPXg/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixIYT14P1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxJYT14P1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxKYT14P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxLYT14P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxMYT14P1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLE1hPXg/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxOYT14P1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixPYT14P1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxQYT14P1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAsUWE9eD9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxSYT14P1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O3gmJlN5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTt4JiZTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpO3gmJlN5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTt2YXIgU2E9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIFRhKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1TYSYmYVtTYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFVhKGEpe2lmKC0xPT09YS5fc3RhdHVzKXthLl9zdGF0dXM9MDt2YXIgYj1hLl9jdG9yO2I9YigpO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9fVxuZnVuY3Rpb24gVmEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBIYTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSBHYTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgSmE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgSWE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBPYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBQYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBMYTpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIEthOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgTmE6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcblwiRm9yd2FyZFJlZlwiKTtjYXNlIFFhOnJldHVybiBWYShhLnR5cGUpO2Nhc2UgUmE6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBWYShhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBXYShhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9VmEoYS50eXBlKTtjPW51bGw7ZCYmKGM9VmEoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShFYSxcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIFhhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxZYT1udWxsLFphPW51bGwsJGE9bnVsbDtmdW5jdGlvbiBhYihhKXtpZihhPXRhKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgWWEpdGhyb3cgdChFcnJvcigyODApKTt2YXIgYj1zYShhLnN0YXRlTm9kZSk7WWEoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBiYihhKXtaYT8kYT8kYS5wdXNoKGEpOiRhPVthXTpaYT1hfWZ1bmN0aW9uIGNiKCl7aWYoWmEpe3ZhciBhPVphLGI9JGE7JGE9WmE9bnVsbDthYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspYWIoYlthXSl9fWZ1bmN0aW9uIGRiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gZWIoYSxiLGMsZCl7cmV0dXJuIGEoYixjLGQpfWZ1bmN0aW9uIGZiKCl7fVxudmFyIGdiPWRiLGhiPSExLGliPSExO2Z1bmN0aW9uIGpiKCl7aWYobnVsbCE9PVphfHxudWxsIT09JGEpZmIoKSxjYigpfW5ldyBNYXA7bmV3IE1hcDtuZXcgTWFwO3ZhciBrYj0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGI9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxtYj17fSxuYj17fTtcbmZ1bmN0aW9uIG9iKGEpe2lmKGxiLmNhbGwobmIsYSkpcmV0dXJuITA7aWYobGIuY2FsbChtYixhKSlyZXR1cm4hMTtpZihrYi50ZXN0KGEpKXJldHVybiBuYlthXT0hMDttYlthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBwYihhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHFiKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHBiKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQihhLGIsYyxkLGUsZil7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWZ9dmFyIEM9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IEIoYSwwLCExLGEsbnVsbCwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07Q1tiXT1uZXcgQihiLDEsITEsYVsxXSxudWxsLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IEIoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IEIoYSwyLCExLGEsbnVsbCwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IEIoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IEIoYSwzLCEwLGEsbnVsbCwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IEIoYSw0LCExLGEsbnVsbCwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgQihhLDYsITEsYSxudWxsLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgQihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7dmFyIHJiPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2IoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmIsXG5zYik7Q1tiXT1uZXcgQihiLDEsITEsYSxudWxsLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJiLHNiKTtDW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJiLHNiKTtDW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5DLnhsaW5rSHJlZj1uZXcgQihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITApO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITApfSk7ZnVuY3Rpb24gdGIoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gdWIoYSxiLGMsZCl7dmFyIGU9Qy5oYXNPd25Qcm9wZXJ0eShiKT9DW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwocWIoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP29iKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiB2YihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24geGIoYSl7dmFyIGI9dmIoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIHliKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj14YihhKSl9ZnVuY3Rpb24gemIoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPXZiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gQWIoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQmIoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9dGIobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBDYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnViKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBEYihhLGIpe0NiKGEsYik7dmFyIGM9dGIoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RWIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRWIoYSxiLnR5cGUsdGIoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBHYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBFYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gSGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gSWIoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1IYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBKYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrdGIoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEtiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyB0KEVycm9yKDkxKSk7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gTGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5kZWZhdWx0VmFsdWU7Yj1iLmNoaWxkcmVuO2lmKG51bGwhPWIpe2lmKG51bGwhPWMpdGhyb3cgdChFcnJvcig5MikpO2lmKEFycmF5LmlzQXJyYXkoYikpe2lmKCEoMT49Yi5sZW5ndGgpKXRocm93IHQoRXJyb3IoOTMpKTtiPWJbMF19Yz1ifW51bGw9PWMmJihjPVwiXCIpfWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnRiKGMpfX1cbmZ1bmN0aW9uIE1iKGEsYil7dmFyIGM9dGIoYi52YWx1ZSksZD10YihiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIE5iKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIE9iPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIFBiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gUWIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1BiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFJiLFNiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU9iLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1JiPVJifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1JiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPVJiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFRiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9ZnVuY3Rpb24gVWIoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVmI9e2FuaW1hdGlvbmVuZDpVYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpVYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlViKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlViKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sV2I9e30sWGI9e307XG5YYSYmKFhiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFZiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFZiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFZiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFZiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWWIoYSl7aWYoV2JbYV0pcmV0dXJuIFdiW2FdO2lmKCFWYlthXSlyZXR1cm4gYTt2YXIgYj1WYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBYYilyZXR1cm4gV2JbYV09YltjXTtyZXR1cm4gYX1cbnZhciBaYj1ZYihcImFuaW1hdGlvbmVuZFwiKSwkYj1ZYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxhYz1ZYihcImFuaW1hdGlvbnN0YXJ0XCIpLGJjPVliKFwidHJhbnNpdGlvbmVuZFwiKSxkYz1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksZWM9ITEsZmM9W10sZ2M9bnVsbCxoYz1udWxsLGljPW51bGwsamM9bmV3IE1hcCxrYz1uZXcgTWFwLGxjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY2xvc2UgY2FuY2VsIGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIiksXG5tYz1cImZvY3VzIGJsdXIgZHJhZ2VudGVyIGRyYWdsZWF2ZSBtb3VzZW92ZXIgbW91c2VvdXQgcG9pbnRlcm92ZXIgcG9pbnRlcm91dCBnb3Rwb2ludGVyY2FwdHVyZSBsb3N0cG9pbnRlcmNhcHR1cmVcIi5zcGxpdChcIiBcIik7ZnVuY3Rpb24gbmMoYSl7dmFyIGI9b2MoYSk7bGMuZm9yRWFjaChmdW5jdGlvbihjKXtwYyhjLGEsYil9KTttYy5mb3JFYWNoKGZ1bmN0aW9uKGMpe3BjKGMsYSxiKX0pfWZ1bmN0aW9uIHFjKGEsYixjLGQpe3JldHVybntibG9ja2VkT246YSx0b3BMZXZlbFR5cGU6YixldmVudFN5c3RlbUZsYWdzOmN8MzIsbmF0aXZlRXZlbnQ6ZH19XG5mdW5jdGlvbiByYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOmdjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpoYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjppYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6amMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6a2MuZGVsZXRlKGIucG9pbnRlcklkKX19ZnVuY3Rpb24gc2MoYSxiLGMsZCxlKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWUpcmV0dXJuIHFjKGIsYyxkLGUpO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIHRjKGEsYixjLGQpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNcIjpyZXR1cm4gZ2M9c2MoZ2MsYSxiLGMsZCksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBoYz1zYyhoYyxhLGIsYyxkKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIGljPXNjKGljLGEsYixjLGQpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBlPWQucG9pbnRlcklkO2pjLnNldChlLHNjKGpjLmdldChlKXx8bnVsbCxhLGIsYyxkKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGU9ZC5wb2ludGVySWQsa2Muc2V0KGUsc2Moa2MuZ2V0KGUpfHxudWxsLGEsYixjLGQpKSwhMH1yZXR1cm4hMX1mdW5jdGlvbiB1YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7dmFyIGI9dmMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEubmF0aXZlRXZlbnQpO3JldHVybiBudWxsIT09Yj8oYS5ibG9ja2VkT249YiwhMSk6ITB9XG5mdW5jdGlvbiB3YyhhLGIsYyl7dWMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uIHhjKCl7Zm9yKGVjPSExOzA8ZmMubGVuZ3RoOyl7dmFyIGE9ZmNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKWJyZWFrO3ZhciBiPXZjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLm5hdGl2ZUV2ZW50KTtudWxsIT09Yj9hLmJsb2NrZWRPbj1iOmZjLnNoaWZ0KCl9bnVsbCE9PWdjJiZ1YyhnYykmJihnYz1udWxsKTtudWxsIT09aGMmJnVjKGhjKSYmKGhjPW51bGwpO251bGwhPT1pYyYmdWMoaWMpJiYoaWM9bnVsbCk7amMuZm9yRWFjaCh3Yyk7a2MuZm9yRWFjaCh3Yyl9ZnVuY3Rpb24geWMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLGVjfHwoZWM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHkseGMpKSl9XG5mdW5jdGlvbiB6YyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiB5YyhiLGEpfWlmKDA8ZmMubGVuZ3RoKXt5YyhmY1swXSxhKTtmb3IodmFyIGM9MTtjPGZjLmxlbmd0aDtjKyspe3ZhciBkPWZjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09Z2MmJnljKGdjLGEpO251bGwhPT1oYyYmeWMoaGMsYSk7bnVsbCE9PWljJiZ5YyhpYyxhKTtqYy5mb3JFYWNoKGIpO2tjLmZvckVhY2goYil9dmFyIEQ9MCxFPTIsQWM9MTAyNDtmdW5jdGlvbiBCYyhhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwoYi5lZmZlY3RUYWcmKEV8QWMpKSE9PUQmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIENjKGEpe2lmKEJjKGEpIT09YSl0aHJvdyB0KEVycm9yKDE4OCkpO31cbmZ1bmN0aW9uIERjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPUJjKGEpO2lmKG51bGw9PT1iKXRocm93IHQoRXJyb3IoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIENjKGUpLGE7aWYoZj09PWQpcmV0dXJuIENjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgdChFcnJvcigxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyB0KEVycm9yKDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IHQoRXJyb3IoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyB0KEVycm9yKDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gRWMoYSl7YT1EYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEZjKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBHYyhhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIEhjKGEsYixjKXtpZihiPUNhKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9d2EoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9d2EoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9XG5mdW5jdGlvbiBJYyhhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPUdjKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylIYyhjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKUhjKGNbYl0sXCJidWJibGVkXCIsYSl9fWZ1bmN0aW9uIEpjKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPUNhKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz13YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz13YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gS2MoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZKYyhhLl90YXJnZXRJbnN0LG51bGwsYSl9XG5mdW5jdGlvbiBMYyhhKXt4YShhLEljKX1mdW5jdGlvbiBNYygpe3JldHVybiEwfWZ1bmN0aW9uIE5jKCl7cmV0dXJuITF9ZnVuY3Rpb24gRihhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/TWM6TmM7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1OYztyZXR1cm4gdGhpc31cbm4oRi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1NYyl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1NYyl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1NY30saXNQZXJzaXN0ZW50Ok5jLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPU5jO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7Ri5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5GLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO09jKGMpO3JldHVybiBjfTtPYyhGKTtmdW5jdGlvbiBQYyhhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIFFjKGEpe2lmKCEoYSBpbnN0YW5jZW9mIHRoaXMpKXRocm93IHQoRXJyb3IoMjc5KSk7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIE9jKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPVBjO2EucmVsZWFzZT1RY312YXIgUmM9Ri5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLFNjPUYuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksVGM9Ri5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFVjPVRjLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7XG5mdW5jdGlvbiBWYyhhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBXYz17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sWGM9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LFljPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBaYyhhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPVljW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gJGMoKXtyZXR1cm4gWmN9XG52YXIgYWQ9VGMuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPVdjW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPVZjKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9YY1thLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6JGMsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP1ZjKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/VmMoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxiZD0wLGNkPTAsZGQ9ITEsZmQ9ITEsZ2Q9VGMuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOiRjLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPWJkO2JkPWEuc2NyZWVuWDtyZXR1cm4gZGQ/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtXG5iOjA6KGRkPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO3ZhciBiPWNkO2NkPWEuc2NyZWVuWTtyZXR1cm4gZmQ/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihmZD0hMCwwKX19KSxoZD1nZC5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksaWQ9Z2QuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLGpkPVRjLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOiRjfSksa2Q9Ri5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLFxuZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxsZD1nZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksbWQ9W1tcImJsdXJcIixcImJsdXJcIiwwXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiLDBdLFtcImNsaWNrXCIsXCJjbGlja1wiLDBdLFtcImNsb3NlXCIsXCJjbG9zZVwiLDBdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiLDBdLFtcImNvcHlcIixcImNvcHlcIiwwXSxbXCJjdXRcIixcImN1dFwiLDBdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiLDBdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiLDBdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIixcbjBdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCIsMF0sW1wiZHJvcFwiLFwiZHJvcFwiLDBdLFtcImZvY3VzXCIsXCJmb2N1c1wiLDBdLFtcImlucHV0XCIsXCJpbnB1dFwiLDBdLFtcImludmFsaWRcIixcImludmFsaWRcIiwwXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCIsMF0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCIsMF0sW1wia2V5dXBcIixcImtleVVwXCIsMF0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIiwwXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCIsMF0sW1wicGFzdGVcIixcInBhc3RlXCIsMF0sW1wicGF1c2VcIixcInBhdXNlXCIsMF0sW1wicGxheVwiLFwicGxheVwiLDBdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIiwwXSxbXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIiwwXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiLDBdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIiwwXSxbXCJyZXNldFwiLFwicmVzZXRcIiwwXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiLDBdLFtcInN1Ym1pdFwiLFwic3VibWl0XCIsMF0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCIsXG4wXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIiwwXSxbXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaFN0YXJ0XCIsMF0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIiwwXSxbXCJkcmFnXCIsXCJkcmFnXCIsMV0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIiwxXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIiwxXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiLDFdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiLDFdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCIsMV0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCIsMV0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIiwxXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIiwxXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCIsMV0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCIsMV0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIiwxXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiLDFdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCIsMV0sW1wid2hlZWxcIixcIndoZWVsXCIsMV0sW1wiYWJvcnRcIixcImFib3J0XCIsXG4yXSxbWmIsXCJhbmltYXRpb25FbmRcIiwyXSxbJGIsXCJhbmltYXRpb25JdGVyYXRpb25cIiwyXSxbYWMsXCJhbmltYXRpb25TdGFydFwiLDJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIiwyXSxbXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIiwyXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIiwyXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsMl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIiwyXSxbXCJlbmRlZFwiLFwiZW5kZWRcIiwyXSxbXCJlcnJvclwiLFwiZXJyb3JcIiwyXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIiwyXSxbXCJsb2FkXCIsXCJsb2FkXCIsMl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLDJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLDJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsMl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIiwyXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsMl0sW1wicHJvZ3Jlc3NcIixcblwicHJvZ3Jlc3NcIiwyXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCIsMl0sW1wic3RhbGxlZFwiLFwic3RhbGxlZFwiLDJdLFtcInN1c3BlbmRcIixcInN1c3BlbmRcIiwyXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsMl0sW2JjLFwidHJhbnNpdGlvbkVuZFwiLDJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIiwyXV0sbmQ9e30sb2Q9e30scGQ9MDtmb3IoO3BkPG1kLmxlbmd0aDtwZCsrKXt2YXIgcWQ9bWRbcGRdLHJkPXFkWzBdLHNkPXFkWzFdLHRkPXFkWzJdLHVkPVwib25cIisoc2RbMF0udG9VcHBlckNhc2UoKStzZC5zbGljZSgxKSksdmQ9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOnVkLGNhcHR1cmVkOnVkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W3JkXSxldmVudFByaW9yaXR5OnRkfTtuZFtzZF09dmQ7b2RbcmRdPXZkfVxudmFyIHdkPXtldmVudFR5cGVzOm5kLGdldEV2ZW50UHJpb3JpdHk6ZnVuY3Rpb24oYSl7YT1vZFthXTtyZXR1cm4gdm9pZCAwIT09YT9hLmV2ZW50UHJpb3JpdHk6Mn0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUpe2I9b2RbYV07aWYoIWIpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1WYyhkKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9YWQ7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPVVjO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1kLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9Z2Q7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbmlkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9amQ7YnJlYWs7Y2FzZSBaYjpjYXNlICRiOmNhc2UgYWM6YT1SYzticmVhaztjYXNlIGJjOmE9a2Q7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9VGM7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT1sZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPVNjO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9aGQ7YnJlYWs7ZGVmYXVsdDphPUZ9Yz1hLmdldFBvb2xlZChiLGMsZCxlKTtMYyhjKTtyZXR1cm4gY319LHhkPXdkLmdldEV2ZW50UHJpb3JpdHksemQ9MTAsQWQ9W107XG5mdW5jdGlvbiBCZChhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkPWM7aWYoMz09PWQudGFnKWQ9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlbHNle2Zvcig7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvfWlmKCFkKWJyZWFrO3ZhciBlPWMudGFnOzUhPT1lJiY2IT09ZXx8YS5hbmNlc3RvcnMucHVzaChjKTtjPUNkKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBmPUZjKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7ZT1hLmV2ZW50U3lzdGVtRmxhZ3M7Zm9yKHZhciBnPWEubmF0aXZlRXZlbnQsaD1udWxsLGs9MDtrPGVhLmxlbmd0aDtrKyspe3ZhciBsPWVhW2tdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGUsYixnLGYpKSYmKGg9d2EoaCxsKSl9QWEoaCl9fVxudmFyIERkPSEwO2Z1bmN0aW9uIEcoYSxiKXtFZChiLGEsITEpfWZ1bmN0aW9uIEVkKGEsYixjKXtzd2l0Y2goeGQoYikpe2Nhc2UgMDp2YXIgZD1GZC5iaW5kKG51bGwsYiwxKTticmVhaztjYXNlIDE6ZD1HZC5iaW5kKG51bGwsYiwxKTticmVhaztkZWZhdWx0OmQ9SGQuYmluZChudWxsLGIsMSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBGZChhLGIsYyl7aGJ8fGZiKCk7dmFyIGQ9SGQsZT1oYjtoYj0hMDt0cnl7ZWIoZCxhLGIsYyl9ZmluYWxseXsoaGI9ZSl8fGpiKCl9fWZ1bmN0aW9uIEdkKGEsYixjKXtIZChhLGIsYyl9XG5mdW5jdGlvbiBJZChhLGIsYyxkKXtpZihBZC5sZW5ndGgpe3ZhciBlPUFkLnBvcCgpO2UudG9wTGV2ZWxUeXBlPWE7ZS5ldmVudFN5c3RlbUZsYWdzPWI7ZS5uYXRpdmVFdmVudD1jO2UudGFyZ2V0SW5zdD1kO2E9ZX1lbHNlIGE9e3RvcExldmVsVHlwZTphLGV2ZW50U3lzdGVtRmxhZ3M6YixuYXRpdmVFdmVudDpjLHRhcmdldEluc3Q6ZCxhbmNlc3RvcnM6W119O3RyeXtpZihiPUJkLGM9YSxpYiliKGMsdm9pZCAwKTtlbHNle2liPSEwO3RyeXtnYihiLGMsdm9pZCAwKX1maW5hbGx5e2liPSExLGpiKCl9fX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLEFkLmxlbmd0aDx6ZCYmQWQucHVzaChhKX19XG5mdW5jdGlvbiBIZChhLGIsYyl7aWYoRGQpaWYoMDxmYy5sZW5ndGgmJi0xPGxjLmluZGV4T2YoYSkpYT1xYyhudWxsLGEsYixjKSxmYy5wdXNoKGEpO2Vsc2V7dmFyIGQ9dmMoYSxiLGMpO251bGw9PT1kP3JjKGEsYyk6LTE8bGMuaW5kZXhPZihhKT8oYT1xYyhkLGEsYixjKSxmYy5wdXNoKGEpKTp0YyhkLGEsYixjKXx8KHJjKGEsYyksSWQoYSxiLGMsbnVsbCkpfX1cbmZ1bmN0aW9uIHZjKGEsYixjKXt2YXIgZD1GYyhjKSxlPUNkKGQpO2lmKG51bGwhPT1lKWlmKGQ9QmMoZSksbnVsbD09PWQpZT1udWxsO2Vsc2V7dmFyIGY9ZC50YWc7aWYoMTM9PT1mKXthOntpZigxMz09PWQudGFnJiYoZT1kLm1lbW9pemVkU3RhdGUsbnVsbD09PWUmJihkPWQuYWx0ZXJuYXRlLG51bGwhPT1kJiYoZT1kLm1lbW9pemVkU3RhdGUpKSxudWxsIT09ZSkpe2Q9ZS5kZWh5ZHJhdGVkO2JyZWFrIGF9ZD1udWxsfWlmKG51bGwhPT1kKXJldHVybiBkO2U9bnVsbH1lbHNlIGlmKDM9PT1mKXtpZihkLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09ZC50YWc/ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGQhPT1lJiYoZT1udWxsKX1JZChhLGIsYyxlKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEpkKGEpe2lmKCFYYSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn12YXIgS2Q9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7ZnVuY3Rpb24gb2MoYSl7dmFyIGI9S2QuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBTZXQsS2Quc2V0KGEsYikpO3JldHVybiBifVxuZnVuY3Rpb24gcGMoYSxiLGMpe2lmKCFjLmhhcyhhKSl7c3dpdGNoKGEpe2Nhc2UgXCJzY3JvbGxcIjpFZChiLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6RWQoYixcImZvY3VzXCIsITApO0VkKGIsXCJibHVyXCIsITApO2MuYWRkKFwiYmx1clwiKTtjLmFkZChcImZvY3VzXCIpO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpKZChhKSYmRWQoYixhLCEwKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09ZGMuaW5kZXhPZihhKSYmRyhhLGIpfWMuYWRkKGEpfX1cbnZhciBMZD17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxNZD1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoTGQpLmZvckVhY2goZnVuY3Rpb24oYSl7TWQuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtMZFtiXT1MZFthXX0pfSk7ZnVuY3Rpb24gTmQoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fExkLmhhc093blByb3BlcnR5KGEpJiZMZFthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBPZChhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1OZChjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBQZD1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gUWQoYSxiKXtpZihiKXtpZihQZFthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IHQoRXJyb3IoMTM3KSxhLFwiXCIpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgdChFcnJvcig2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgdChFcnJvcig2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgdChFcnJvcig2MiksXCJcIik7fX1cbmZ1bmN0aW9uIFJkKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1mdW5jdGlvbiBTZChhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1vYyhhKTtiPWphW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXBjKGJbZF0sYSxjKX1mdW5jdGlvbiBUZCgpe31cbmZ1bmN0aW9uIFVkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiBWZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9ZnVuY3Rpb24gV2QoYSxiKXt2YXIgYz1WZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1WZChjKX19XG5mdW5jdGlvbiBYZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP1hkKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1mdW5jdGlvbiBZZCgpe2Zvcih2YXIgYT13aW5kb3csYj1VZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1VZChhLmRvY3VtZW50KX1yZXR1cm4gYn1cbmZ1bmN0aW9uIFpkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9dmFyICRkPVwiJFwiLGFlPVwiLyRcIixiZT1cIiQ/XCIsY2U9XCIkIVwiLGRlPW51bGwsZWU9bnVsbDtmdW5jdGlvbiBmZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBnZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIGhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLGllPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBqZShhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1cbmZ1bmN0aW9uIGtlKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PSRkfHxjPT09Y2V8fGM9PT1iZSl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2UgYz09PWFlJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgbGU9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksbWU9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitsZSxuZT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK2xlLG9lPVwiX19yZWFjdENvbnRhaW5lcmUkXCIrbGU7XG5mdW5jdGlvbiBDZChhKXt2YXIgYj1hW21lXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tvZV18fGNbbWVdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9a2UoYSk7bnVsbCE9PWE7KXtpZihjPWFbbWVdKXJldHVybiBjO2E9a2UoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIHBlKGEpe2E9YVttZV18fGFbb2VdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiBxZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgdChFcnJvcigzMykpO31mdW5jdGlvbiByZShhKXtyZXR1cm4gYVtuZV18fG51bGx9dmFyIHNlPW51bGwsdGU9bnVsbCx1ZT1udWxsO1xuZnVuY3Rpb24gdmUoKXtpZih1ZSlyZXR1cm4gdWU7dmFyIGEsYj10ZSxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBzZT9zZS52YWx1ZTpzZS50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiB1ZT1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfXZhciB3ZT1GLmV4dGVuZCh7ZGF0YTpudWxsfSkseGU9Ri5leHRlbmQoe2RhdGE6bnVsbH0pLHllPVs5LDEzLDI3LDMyXSx6ZT1YYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csQWU9bnVsbDtYYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoQWU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBCZT1YYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIUFlLENlPVhhJiYoIXplfHxBZSYmODxBZSYmMTE+PUFlKSxEZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxFZT17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSxGZT0hMTtcbmZ1bmN0aW9uIEdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09eWUuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBIZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBJZT0hMTtmdW5jdGlvbiBKZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gSGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO0ZlPSEwO3JldHVybiBEZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1EZSYmRmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gS2UoYSxiKXtpZihJZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhemUmJkdlKGEsYik/KGE9dmUoKSx1ZT10ZT1zZT1udWxsLEllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBDZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgTGU9e2V2ZW50VHlwZXM6RWUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmO2lmKHplKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBnPUVlLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpnPUVlLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Zz1FZS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWc9dm9pZCAwfWVsc2UgSWU/R2UoYSxkKSYmKGc9RWUuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09ZC5rZXlDb2RlJiYoZz1FZS5jb21wb3NpdGlvblN0YXJ0KTtnPyhDZSYmXCJrb1wiIT09ZC5sb2NhbGUmJihJZXx8ZyE9PUVlLmNvbXBvc2l0aW9uU3RhcnQ/Zz09PUVlLmNvbXBvc2l0aW9uRW5kJiZJZSYmKGY9dmUoKSk6KHNlPWUsdGU9XCJ2YWx1ZVwiaW4gc2U/c2UudmFsdWU6c2UudGV4dENvbnRlbnQsSWU9ITApKSxiPXdlLmdldFBvb2xlZChnLFxuYyxkLGUpLGY/Yi5kYXRhPWY6KGY9SGUoZCksbnVsbCE9PWYmJihiLmRhdGE9ZikpLExjKGIpLGY9Yik6Zj1udWxsOyhhPUJlP0plKGEsZCk6S2UoYSxkKSk/KGM9eGUuZ2V0UG9vbGVkKEVlLmJlZm9yZUlucHV0LGMsZCxlKSxjLmRhdGE9YSxMYyhjKSk6Yz1udWxsO3JldHVybiBudWxsPT09Zj9jOm51bGw9PT1jP2Y6W2YsY119fSxNZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBOZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIU1lW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbnZhciBPZT17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBQZShhLGIsYyl7YT1GLmdldFBvb2xlZChPZS5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO2JiKGMpO0xjKGEpO3JldHVybiBhfXZhciBRZT1udWxsLFJlPW51bGw7ZnVuY3Rpb24gU2UoYSl7QWEoYSl9ZnVuY3Rpb24gVGUoYSl7dmFyIGI9cWUoYSk7aWYoemIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gVWUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgVmU9ITE7WGEmJihWZT1KZChcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbmZ1bmN0aW9uIFdlKCl7UWUmJihRZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixYZSksUmU9UWU9bnVsbCl9ZnVuY3Rpb24gWGUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJlRlKFJlKSlpZihhPVBlKFJlLGEsRmMoYSkpLGhiKUFhKGEpO2Vsc2V7aGI9ITA7dHJ5e2RiKFNlLGEpfWZpbmFsbHl7aGI9ITEsamIoKX19fWZ1bmN0aW9uIFllKGEsYixjKXtcImZvY3VzXCI9PT1hPyhXZSgpLFFlPWIsUmU9YyxRZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixYZSkpOlwiYmx1clwiPT09YSYmV2UoKX1mdW5jdGlvbiBaZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBUZShSZSl9ZnVuY3Rpb24gJGUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBUZShiKX1mdW5jdGlvbiBhZihhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBUZShiKX1cbnZhciBiZj17ZXZlbnRUeXBlczpPZSxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOlZlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlKXtiPWM/cWUoYyk6d2luZG93O3ZhciBmPWIubm9kZU5hbWUmJmIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09Znx8XCJpbnB1dFwiPT09ZiYmXCJmaWxlXCI9PT1iLnR5cGUpdmFyIGc9VWU7ZWxzZSBpZihOZShiKSlpZihWZSlnPWFmO2Vsc2V7Zz1aZTt2YXIgaD1ZZX1lbHNlKGY9Yi5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWYudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlKSYmKGc9JGUpO2lmKGcmJihnPWcoYSxjKSkpcmV0dXJuIFBlKGcsZCxlKTtoJiZoKGEsYixjKTtcImJsdXJcIj09PWEmJihhPWIuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWIudHlwZSYmRWIoYixcIm51bWJlclwiLGIudmFsdWUpfX0sY2Y9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixcbmRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LGRmPXtldmVudFR5cGVzOmNmLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxnPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihmJiYwPT09KGImMzIpJiYoZC5yZWxhdGVkVGFyZ2V0fHxkLmZyb21FbGVtZW50KXx8IWcmJiFmKXJldHVybiBudWxsO1xuYj1lLndpbmRvdz09PWU/ZTooYj1lLm93bmVyRG9jdW1lbnQpP2IuZGVmYXVsdFZpZXd8fGIucGFyZW50V2luZG93OndpbmRvdztpZihnKXtpZihnPWMsYz0oYz1kLnJlbGF0ZWRUYXJnZXR8fGQudG9FbGVtZW50KT9DZChjKTpudWxsLG51bGwhPT1jJiYoZj1CYyhjKSxjIT09Znx8NSE9PWMudGFnJiY2IT09Yy50YWcpKWM9bnVsbH1lbHNlIGc9bnVsbDtpZihnPT09YylyZXR1cm4gbnVsbDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09YSl7dmFyIGg9Z2Q7dmFyIGs9Y2YubW91c2VMZWF2ZTt2YXIgbD1jZi5tb3VzZUVudGVyO3ZhciBtPVwibW91c2VcIn1lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSloPWhkLGs9Y2YucG9pbnRlckxlYXZlLGw9Y2YucG9pbnRlckVudGVyLG09XCJwb2ludGVyXCI7YT1udWxsPT1nP2I6cWUoZyk7Yj1udWxsPT1jP2I6cWUoYyk7az1oLmdldFBvb2xlZChrLGcsZCxlKTtrLnR5cGU9bStcImxlYXZlXCI7ay50YXJnZXQ9XG5hO2sucmVsYXRlZFRhcmdldD1iO2Q9aC5nZXRQb29sZWQobCxjLGQsZSk7ZC50eXBlPW0rXCJlbnRlclwiO2QudGFyZ2V0PWI7ZC5yZWxhdGVkVGFyZ2V0PWE7ZT1nO209YztpZihlJiZtKWE6e2g9ZTtsPW07YT0wO2ZvcihnPWg7ZztnPUdjKGcpKWErKztnPTA7Zm9yKGM9bDtjO2M9R2MoYykpZysrO2Zvcig7MDxhLWc7KWg9R2MoaCksYS0tO2Zvcig7MDxnLWE7KWw9R2MobCksZy0tO2Zvcig7YS0tOyl7aWYoaD09PWx8fGg9PT1sLmFsdGVybmF0ZSlicmVhayBhO2g9R2MoaCk7bD1HYyhsKX1oPW51bGx9ZWxzZSBoPW51bGw7bD1oO2ZvcihoPVtdO2UmJmUhPT1sOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmYT09PWwpYnJlYWs7aC5wdXNoKGUpO2U9R2MoZSl9Zm9yKGU9W107bSYmbSE9PWw7KXthPW0uYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZhPT09bClicmVhaztlLnB1c2gobSk7bT1HYyhtKX1mb3IobT0wO208aC5sZW5ndGg7bSsrKUpjKGhbbV0sXCJidWJibGVkXCIsayk7Zm9yKG09XG5lLmxlbmd0aDswPG0tLTspSmMoZVttXSxcImNhcHR1cmVkXCIsZCk7cmV0dXJuW2ssZF19fTtmdW5jdGlvbiBlZihhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIGZmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOmVmLGdmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24gaGYoYSxiKXtpZihmZihhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIWdmLmNhbGwoYixjW2RdKXx8IWZmKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9XG52YXIgamY9WGEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxrZj17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sbGY9bnVsbCxtZj1udWxsLG5mPW51bGwsb2Y9ITE7XG5mdW5jdGlvbiBwZihhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKG9mfHxudWxsPT1sZnx8bGYhPT1VZChjKSlyZXR1cm4gbnVsbDtjPWxmO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJlpkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIG5mJiZoZihuZixjKT9udWxsOihuZj1jLGE9Ri5nZXRQb29sZWQoa2Yuc2VsZWN0LG1mLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9bGYsTGMoYSksYSl9XG52YXIgcWY9e2V2ZW50VHlwZXM6a2YsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUpe2I9ZS53aW5kb3c9PT1lP2UuZG9jdW1lbnQ6OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7dmFyIGY7aWYoIShmPSFiKSl7YTp7Yj1vYyhiKTtmPWphLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWlmKCFiLmhhcyhmW2ddKSl7Yj0hMTticmVhayBhfWI9ITB9Zj0hYn1pZihmKXJldHVybiBudWxsO2I9Yz9xZShjKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKE5lKGIpfHxcInRydWVcIj09PWIuY29udGVudEVkaXRhYmxlKWxmPWIsbWY9YyxuZj1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6bmY9bWY9bGY9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6b2Y9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBvZj0hMSxwZihkLGUpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihqZilicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIHBmKGQsZSl9cmV0dXJuIG51bGx9fTtCYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3NhPXJlO3RhPXBlO3VhPXFlO0JhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46d2QsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOmRmLENoYW5nZUV2ZW50UGx1Z2luOmJmLFNlbGVjdEV2ZW50UGx1Z2luOnFmLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46TGV9KTtuZXcgU2V0O3ZhciByZj1bXSxzZj0tMTtmdW5jdGlvbiBIKGEpezA+c2Z8fChhLmN1cnJlbnQ9cmZbc2ZdLHJmW3NmXT1udWxsLHNmLS0pfVxuZnVuY3Rpb24gSShhLGIpe3NmKys7cmZbc2ZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgdGY9e30sSj17Y3VycmVudDp0Zn0sSz17Y3VycmVudDohMX0sdWY9dGY7ZnVuY3Rpb24gdmYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiB0Zjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBOKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9XG5mdW5jdGlvbiB3ZihhKXtIKEssYSk7SChKLGEpfWZ1bmN0aW9uIHhmKGEpe0goSyxhKTtIKEosYSl9ZnVuY3Rpb24gemYoYSxiLGMpe2lmKEouY3VycmVudCE9PXRmKXRocm93IHQoRXJyb3IoMTY4KSk7SShKLGIsYSk7SShLLGMsYSl9ZnVuY3Rpb24gQWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyB0KEVycm9yKDEwOCksVmEoYil8fFwiVW5rbm93blwiLGUpO3JldHVybiBuKHt9LGMse30sZCl9ZnVuY3Rpb24gQmYoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHx0Zjt1Zj1KLmN1cnJlbnQ7SShKLGIsYSk7SShLLEsuY3VycmVudCxhKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIENmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyB0KEVycm9yKDE2OSkpO2M/KGI9QWYoYSxiLHVmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWIsSChLLGEpLEgoSixhKSxJKEosYixhKSk6SChLLGEpO0koSyxjLGEpfVxudmFyIERmPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LEVmPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxGZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLEdmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsSGY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsSWY9ci51bnN0YWJsZV9ub3csSmY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxLZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LExmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksTWY9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxOZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LE9mPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFBmPXt9LFFmPXZvaWQgMCE9PUhmP0hmOmZ1bmN0aW9uKCl7fSxSZj1udWxsLFNmPW51bGwsVGY9ITEsVWY9SWYoKSxWZj0xRTQ+VWY/SWY6ZnVuY3Rpb24oKXtyZXR1cm4gSWYoKS1VZn07XG5mdW5jdGlvbiBXZigpe3N3aXRjaChKZigpKXtjYXNlIEtmOnJldHVybiA5OTtjYXNlIExmOnJldHVybiA5ODtjYXNlIE1mOnJldHVybiA5NztjYXNlIE5mOnJldHVybiA5NjtjYXNlIE9mOnJldHVybiA5NTtkZWZhdWx0OnRocm93IHQoRXJyb3IoMzMyKSk7fX1mdW5jdGlvbiBYZihhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gS2Y7Y2FzZSA5ODpyZXR1cm4gTGY7Y2FzZSA5NzpyZXR1cm4gTWY7Y2FzZSA5NjpyZXR1cm4gTmY7Y2FzZSA5NTpyZXR1cm4gT2Y7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDMzMikpO319ZnVuY3Rpb24gWWYoYSxiKXthPVhmKGEpO3JldHVybiBEZihhLGIpfWZ1bmN0aW9uIFpmKGEsYixjKXthPVhmKGEpO3JldHVybiBFZihhLGIsYyl9ZnVuY3Rpb24gJGYoYSl7bnVsbD09PVJmPyhSZj1bYV0sU2Y9RWYoS2YsYWcpKTpSZi5wdXNoKGEpO3JldHVybiBQZn1mdW5jdGlvbiBiZygpe2lmKG51bGwhPT1TZil7dmFyIGE9U2Y7U2Y9bnVsbDtGZihhKX1hZygpfVxuZnVuY3Rpb24gYWcoKXtpZighVGYmJm51bGwhPT1SZil7VGY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9UmY7WWYoOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO1JmPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PVJmJiYoUmY9UmYuc2xpY2UoYSsxKSksRWYoS2YsYmcpLGM7fWZpbmFsbHl7VGY9ITF9fX1mdW5jdGlvbiBjZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn12YXIgZGc9e2N1cnJlbnQ6bnVsbH0sZWc9bnVsbCxmZz1udWxsLGdnPW51bGw7ZnVuY3Rpb24gaGcoKXtnZz1mZz1lZz1udWxsfWZ1bmN0aW9uIGlnKGEsYil7dmFyIGM9YS50eXBlLl9jb250ZXh0O0koZGcsYy5fY3VycmVudFZhbHVlLGEpO2MuX2N1cnJlbnRWYWx1ZT1ifVxuZnVuY3Rpb24gamcoYSl7dmFyIGI9ZGcuY3VycmVudDtIKGRnLGEpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24ga2coYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoYS5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYS5jaGlsZEV4cGlyYXRpb25UaW1lPWIsbnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2Vsc2UgaWYobnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWMuY2hpbGRFeHBpcmF0aW9uVGltZT1iO2Vsc2UgYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gbGcoYSxiKXtlZz1hO2dnPWZnPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoYS5leHBpcmF0aW9uVGltZT49YiYmKG1nPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIG5nKGEsYil7aWYoZ2chPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKWdnPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1mZyl7aWYobnVsbD09PWVnKXRocm93IHQoRXJyb3IoMzA4KSk7Zmc9YjtlZy5kZXBlbmRlbmNpZXM9e2V4cGlyYXRpb25UaW1lOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIGZnPWZnLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciBvZz0hMTtcbmZ1bmN0aW9uIHBnKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBxZyhhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiByZyhhLGIpe3JldHVybntleHBpcmF0aW9uVGltZTphLHN1c3BlbnNlQ29uZmlnOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gc2coYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gdGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPXBnKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPXBnKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPXBnKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1xZyhlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1xZyhkKSk7bnVsbD09PWV8fGQ9PT1lP3NnKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8oc2coZCxiKSxzZyhlLGIpKTooc2coZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiB1ZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPXBnKGEubWVtb2l6ZWRTdGF0ZSk6dmcoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiB2ZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1xZyhiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiB3ZyhhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIDE6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIDM6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTQwOTd8NjQ7Y2FzZSAwOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBuKHt9LGQsZSk7Y2FzZSAyOm9nPSEwfXJldHVybiBkfVxuZnVuY3Rpb24geGcoYSxiLGMsZCxlKXtvZz0hMTtiPXZnKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGc9bnVsbCxoPTAsaz1iLmZpcnN0VXBkYXRlLGw9ZjtudWxsIT09azspe3ZhciBtPWsuZXhwaXJhdGlvblRpbWU7bTxlPyhudWxsPT09ZyYmKGc9ayxmPWwpLGg8bSYmKGg9bSkpOih5ZyhtLGsuc3VzcGVuc2VDb25maWcpLGw9d2coYSxiLGssbCxjLGQpLG51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9azooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RFZmZlY3Q9aykpKTtrPWsubmV4dH1tPW51bGw7Zm9yKGs9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1rOyl7dmFyIEE9ay5leHBpcmF0aW9uVGltZTtBPGU/KG51bGw9PT1tJiYobT1rLG51bGw9PT1nJiYoZj1sKSksaDxBJiYoaD1BKSk6KGw9d2coYSxiLGssbCxjLGQpLG51bGwhPT1cbmsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1rOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9aykpKTtrPWsubmV4dH1udWxsPT09ZyYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09bT9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09ZyYmbnVsbD09PW0mJihmPWwpO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1nO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1tO3pnKGgpO2EuZXhwaXJhdGlvblRpbWU9aDthLm1lbW9pemVkU3RhdGU9bH1cbmZ1bmN0aW9uIEFnKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTtCZyhiLmZpcnN0RWZmZWN0LGMpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7QmcoYi5maXJzdENhcHR1cmVkRWZmZWN0LGMpO2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsfWZ1bmN0aW9uIEJnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuY2FsbGJhY2s7aWYobnVsbCE9PWMpe2EuY2FsbGJhY2s9bnVsbDt2YXIgZD1iO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IHQoRXJyb3IoMTkxKSxjKTtjLmNhbGwoZCl9YT1hLm5leHRFZmZlY3R9fVxudmFyIENnPURhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLERnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIEVnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7ZD1hLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGQuYmFzZVN0YXRlPWMpfVxudmFyIElnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT9CYyhhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9RmcoKSxlPUNnLnN1c3BlbnNlO2Q9R2coZCxhLGUpO2U9cmcoZCxlKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7dGcoYSxlKTtIZyhhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1GZygpLGU9Q2cuc3VzcGVuc2U7ZD1HZyhkLGEsZSk7ZT1yZyhkLGUpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO3RnKGEsZSk7SGcoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9RmcoKSxkPUNnLnN1c3BlbnNlO1xuYz1HZyhjLGEsZCk7ZD1yZyhjLGQpO2QudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO3RnKGEsZCk7SGcoYSxjKX19O2Z1bmN0aW9uIEpnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWhmKGMsZCl8fCFoZihlLGYpOiEwfVxuZnVuY3Rpb24gS2coYSxiLGMpe3ZhciBkPSExLGU9dGY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9bmcoZik6KGU9TihiKT91ZjpKLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT92ZihhLGUpOnRmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9SWc7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gTGcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJklnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gTWcoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1EZzt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PW5nKGYpOihmPU4oYik/dWY6Si5jdXJyZW50LGUuY29udGV4dD12ZihhLGYpKTtmPWEudXBkYXRlUXVldWU7bnVsbCE9PWYmJih4ZyhhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoRWcoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmSWcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZj1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1mJiYoeGcoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBOZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gT2coYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyB0KEVycm9yKDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IHQoRXJyb3IoMTQ3KSxhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PURnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IHQoRXJyb3IoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IHQoRXJyb3IoMjkwKSxhKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBQZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyB0KEVycm9yKDMxKSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIik7fVxuZnVuY3Rpb24gUWcoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT1SZyhhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbkUsYyk6ZDtiLmVmZmVjdFRhZz1FO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9RSk7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVNnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1PZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VGcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9T2coYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1VZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1WZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gQShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9U2coXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgRmE6cmV0dXJuIGM9VGcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9T2coYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIEdhOnJldHVybiBiPVVnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihOZyhiKXx8XG5UYShiKSlyZXR1cm4gYj1WZyhiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtQZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHcoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgRmE6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1IYT9tKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgR2E6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoTmcoYyl8fFRhKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtQZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEwoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBGYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09SGE/bShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgR2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoTmcoZCl8fFRhKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtQZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHdiKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCxxPWcseT1nPTAsej1udWxsO251bGwhPT1xJiZ5PGgubGVuZ3RoO3krKyl7cS5pbmRleD55Pyh6PXEscT1udWxsKTp6PXEuc2libGluZzt2YXIgcD13KGUscSxoW3ldLGspO2lmKG51bGw9PT1wKXtudWxsPT09cSYmKHE9eik7YnJlYWt9YSYmXG5xJiZudWxsPT09cC5hbHRlcm5hdGUmJmIoZSxxKTtnPWYocCxnLHkpO251bGw9PT1tP2w9cDptLnNpYmxpbmc9cDttPXA7cT16fWlmKHk9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHEpLGw7aWYobnVsbD09PXEpe2Zvcig7eTxoLmxlbmd0aDt5KyspcT1BKGUsaFt5XSxrKSxudWxsIT09cSYmKGc9ZihxLGcseSksbnVsbD09PW0/bD1xOm0uc2libGluZz1xLG09cSk7cmV0dXJuIGx9Zm9yKHE9ZChlLHEpO3k8aC5sZW5ndGg7eSsrKXo9TChxLGUseSxoW3ldLGspLG51bGwhPT16JiYoYSYmbnVsbCE9PXouYWx0ZXJuYXRlJiZxLmRlbGV0ZShudWxsPT09ei5rZXk/eTp6LmtleSksZz1mKHosZyx5KSxudWxsPT09bT9sPXo6bS5zaWJsaW5nPXosbT16KTthJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIE0oZSxnLGgsayl7dmFyIGw9VGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgdChFcnJvcigxNTApKTtoPWwuY2FsbChoKTtcbmlmKG51bGw9PWgpdGhyb3cgdChFcnJvcigxNTEpKTtmb3IodmFyIG09bD1udWxsLHE9Zyx5PWc9MCx6PW51bGwscD1oLm5leHQoKTtudWxsIT09cSYmIXAuZG9uZTt5KysscD1oLm5leHQoKSl7cS5pbmRleD55Pyh6PXEscT1udWxsKTp6PXEuc2libGluZzt2YXIgTT13KGUscSxwLnZhbHVlLGspO2lmKG51bGw9PT1NKXtudWxsPT09cSYmKHE9eik7YnJlYWt9YSYmcSYmbnVsbD09PU0uYWx0ZXJuYXRlJiZiKGUscSk7Zz1mKE0sZyx5KTtudWxsPT09bT9sPU06bS5zaWJsaW5nPU07bT1NO3E9en1pZihwLmRvbmUpcmV0dXJuIGMoZSxxKSxsO2lmKG51bGw9PT1xKXtmb3IoOyFwLmRvbmU7eSsrLHA9aC5uZXh0KCkpcD1BKGUscC52YWx1ZSxrKSxudWxsIT09cCYmKGc9ZihwLGcseSksbnVsbD09PW0/bD1wOm0uc2libGluZz1wLG09cCk7cmV0dXJuIGx9Zm9yKHE9ZChlLHEpOyFwLmRvbmU7eSsrLHA9aC5uZXh0KCkpcD1MKHEsZSx5LHAudmFsdWUsayksbnVsbCE9PXAmJihhJiZudWxsIT09XG5wLmFsdGVybmF0ZSYmcS5kZWxldGUobnVsbD09PXAua2V5P3k6cC5rZXkpLGc9ZihwLGcseSksbnVsbD09PW0/bD1wOm0uc2libGluZz1wLG09cCk7YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09SGEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgRmE6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtpZig3PT09ay50YWc/Zi50eXBlPT09SGE6ay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09SGE/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPU9nKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxcbmspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PUhhPyhkPVZnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1UZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1PZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgR2E6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspe2lmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxoKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVVnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XG5cIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1TZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihOZyhmKSlyZXR1cm4gd2IoYSxkLGYsaCk7aWYoVGEoZikpcmV0dXJuIE0oYSxkLGYsaCk7bCYmUGcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSx0KEVycm9yKDE1MiksYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIkNvbXBvbmVudFwiKTt9cmV0dXJuIGMoYSxkKX19dmFyIFdnPVFnKCEwKSxYZz1RZyghMSksWWc9e30sWmc9e2N1cnJlbnQ6WWd9LCRnPXtjdXJyZW50OllnfSxhaD17Y3VycmVudDpZZ307ZnVuY3Rpb24gYmgoYSl7aWYoYT09PVlnKXRocm93IHQoRXJyb3IoMTc0KSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBjaChhLGIpe0koYWgsYixhKTtJKCRnLGEsYSk7SShaZyxZZyxhKTt2YXIgYz1iLm5vZGVUeXBlO3N3aXRjaChjKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpRYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yz04PT09Yz9iLnBhcmVudE5vZGU6YixiPWMubmFtZXNwYWNlVVJJfHxudWxsLGM9Yy50YWdOYW1lLGI9UWIoYixjKX1IKFpnLGEpO0koWmcsYixhKX1mdW5jdGlvbiBkaChhKXtIKFpnLGEpO0goJGcsYSk7SChhaCxhKX1mdW5jdGlvbiBlaChhKXtiaChhaC5jdXJyZW50KTt2YXIgYj1iaChaZy5jdXJyZW50KTt2YXIgYz1RYihiLGEudHlwZSk7YiE9PWMmJihJKCRnLGEsYSksSShaZyxjLGEpKX1mdW5jdGlvbiBmaChhKXskZy5jdXJyZW50PT09YSYmKEgoWmcsYSksSCgkZyxhKSl9dmFyIE89e2N1cnJlbnQ6MH07XG5mdW5jdGlvbiBnaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxjLmRhdGE9PT1iZXx8Yy5kYXRhPT09Y2UpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigoYi5lZmZlY3RUYWcmNjQpIT09RClyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9ZnVuY3Rpb24gaGgoYSxiKXtyZXR1cm57cmVzcG9uZGVyOmEscHJvcHM6Yn19XG52YXIgaWg9RGEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixqaD0wLGtoPW51bGwsUD1udWxsLGxoPW51bGwsbWg9bnVsbCxRPW51bGwsbmg9bnVsbCxvaD0wLHBoPW51bGwscWg9MCxyaD0hMSxzaD1udWxsLHRoPTA7ZnVuY3Rpb24gdWgoKXt0aHJvdyB0KEVycm9yKDMyMSkpO31mdW5jdGlvbiB2aChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFmZihhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gd2goYSxiLGMsZCxlLGYpe2poPWY7a2g9YjtsaD1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpaC5jdXJyZW50PW51bGw9PT1saD94aDp5aDtiPWMoZCxlKTtpZihyaCl7ZG8gcmg9ITEsdGgrPTEsbGg9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGwsbmg9bWgscGg9UT1QPW51bGwsaWguY3VycmVudD15aCxiPWMoZCxlKTt3aGlsZShyaCk7c2g9bnVsbDt0aD0wfWloLmN1cnJlbnQ9emg7YT1raDthLm1lbW9pemVkU3RhdGU9bWg7YS5leHBpcmF0aW9uVGltZT1vaDthLnVwZGF0ZVF1ZXVlPXBoO2EuZWZmZWN0VGFnfD1xaDthPW51bGwhPT1QJiZudWxsIT09UC5uZXh0O2poPTA7bmg9UT1taD1saD1QPWtoPW51bGw7b2g9MDtwaD1udWxsO3FoPTA7aWYoYSl0aHJvdyB0KEVycm9yKDMwMCkpO3JldHVybiBifVxuZnVuY3Rpb24gQWgoKXtpaC5jdXJyZW50PXpoO2poPTA7bmg9UT1taD1saD1QPWtoPW51bGw7b2g9MDtwaD1udWxsO3FoPTA7cmg9ITE7c2g9bnVsbDt0aD0wfWZ1bmN0aW9uIEVoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxxdWV1ZTpudWxsLGJhc2VVcGRhdGU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1RP21oPVE9YTpRPVEubmV4dD1hO3JldHVybiBRfWZ1bmN0aW9uIEZoKCl7aWYobnVsbCE9PW5oKVE9bmgsbmg9US5uZXh0LFA9bGgsbGg9bnVsbCE9PVA/UC5uZXh0Om51bGw7ZWxzZXtpZihudWxsPT09bGgpdGhyb3cgdChFcnJvcigzMTApKTtQPWxoO3ZhciBhPXttZW1vaXplZFN0YXRlOlAubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6UC5iYXNlU3RhdGUscXVldWU6UC5xdWV1ZSxiYXNlVXBkYXRlOlAuYmFzZVVwZGF0ZSxuZXh0Om51bGx9O1E9bnVsbD09PVE/bWg9YTpRLm5leHQ9YTtsaD1QLm5leHR9cmV0dXJuIFF9XG5mdW5jdGlvbiBHaChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIEhoKGEpe3ZhciBiPUZoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IHQoRXJyb3IoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7aWYoMDx0aCl7dmFyIGQ9Yy5kaXNwYXRjaDtpZihudWxsIT09c2gpe3ZhciBlPXNoLmdldChjKTtpZih2b2lkIDAhPT1lKXtzaC5kZWxldGUoYyk7dmFyIGY9Yi5tZW1vaXplZFN0YXRlO2RvIGY9YShmLGUuYWN0aW9uKSxlPWUubmV4dDt3aGlsZShudWxsIT09ZSk7ZmYoZixiLm1lbW9pemVkU3RhdGUpfHwobWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO2IuYmFzZVVwZGF0ZT09PWMubGFzdCYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9ZjtyZXR1cm5bZixkXX19cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxkXX1kPWMubGFzdDt2YXIgZz1iLmJhc2VVcGRhdGU7Zj1iLmJhc2VTdGF0ZTtudWxsIT09Zz8obnVsbCE9PWQmJihkLm5leHQ9bnVsbCksZD1nLm5leHQpOmQ9bnVsbCE9PWQ/ZC5uZXh0Om51bGw7aWYobnVsbCE9PVxuZCl7dmFyIGg9ZT1udWxsLGs9ZCxsPSExO2Rve3ZhciBtPWsuZXhwaXJhdGlvblRpbWU7bTxqaD8obHx8KGw9ITAsaD1nLGU9ZiksbT5vaCYmKG9oPW0semcob2gpKSk6KHlnKG0say5zdXNwZW5zZUNvbmZpZyksZj1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZixrLmFjdGlvbikpO2c9aztrPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWQpO2x8fChoPWcsZT1mKTtmZihmLGIubWVtb2l6ZWRTdGF0ZSl8fChtZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPWg7Yi5iYXNlU3RhdGU9ZTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIEloKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtudWxsPT09cGg/KHBoPXtsYXN0RWZmZWN0Om51bGx9LHBoLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihiPXBoLmxhc3RFZmZlY3QsbnVsbD09PWI/cGgubGFzdEVmZmVjdD1hLm5leHQ9YTooYz1iLm5leHQsYi5uZXh0PWEsYS5uZXh0PWMscGgubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gSmgoYSxiLGMsZCl7dmFyIGU9RWgoKTtxaHw9YTtlLm1lbW9pemVkU3RhdGU9SWgoYixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBLaChhLGIsYyxkKXt2YXIgZT1GaCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1QKXt2YXIgZz1QLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJnZoKGQsZy5kZXBzKSl7SWgoMCxjLGYsZCk7cmV0dXJufX1xaHw9YTtlLm1lbW9pemVkU3RhdGU9SWgoYixjLGYsZCl9ZnVuY3Rpb24gTGgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBNaCgpe31cbmZ1bmN0aW9uIE5oKGEsYixjKXtpZighKDI1PnRoKSl0aHJvdyB0KEVycm9yKDMwMSkpO3ZhciBkPWEuYWx0ZXJuYXRlO2lmKGE9PT1raHx8bnVsbCE9PWQmJmQ9PT1raClpZihyaD0hMCxhPXtleHBpcmF0aW9uVGltZTpqaCxzdXNwZW5zZUNvbmZpZzpudWxsLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LG51bGw9PT1zaCYmKHNoPW5ldyBNYXApLGM9c2guZ2V0KGIpLHZvaWQgMD09PWMpc2guc2V0KGIsYSk7ZWxzZXtmb3IoYj1jO251bGwhPT1iLm5leHQ7KWI9Yi5uZXh0O2IubmV4dD1hfWVsc2V7dmFyIGU9RmcoKSxmPUNnLnN1c3BlbnNlO2U9R2coZSxhLGYpO2Y9e2V4cGlyYXRpb25UaW1lOmUsc3VzcGVuc2VDb25maWc6ZixhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTt2YXIgZz1iLmxhc3Q7aWYobnVsbD09PWcpZi5uZXh0PWY7ZWxzZXt2YXIgaD1nLm5leHQ7bnVsbCE9PWgmJlxuKGYubmV4dD1oKTtnLm5leHQ9Zn1iLmxhc3Q9ZjtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1kfHwwPT09ZC5leHBpcmF0aW9uVGltZSkmJihkPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZCkpdHJ5e3ZhciBrPWIubGFzdFJlbmRlcmVkU3RhdGUsbD1kKGssYyk7Zi5lYWdlclJlZHVjZXI9ZDtmLmVhZ2VyU3RhdGU9bDtpZihmZihsLGspKXJldHVybn1jYXRjaChtKXt9ZmluYWxseXt9SGcoYSxlKX19XG52YXIgemg9e3JlYWRDb250ZXh0Om5nLHVzZUNhbGxiYWNrOnVoLHVzZUNvbnRleHQ6dWgsdXNlRWZmZWN0OnVoLHVzZUltcGVyYXRpdmVIYW5kbGU6dWgsdXNlTGF5b3V0RWZmZWN0OnVoLHVzZU1lbW86dWgsdXNlUmVkdWNlcjp1aCx1c2VSZWY6dWgsdXNlU3RhdGU6dWgsdXNlRGVidWdWYWx1ZTp1aCx1c2VSZXNwb25kZXI6dWh9LHhoPXtyZWFkQ29udGV4dDpuZyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe0VoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6bmcsdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIEpoKDUxNiwxOTIsYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIEpoKDQsMzYsTGguYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBKaCg0LFxuMzYsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUVoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUVoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9TmguYmluZChudWxsLGtoLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1FaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXt2YXIgYj1FaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17bGFzdDpudWxsLFxuZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkdoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD1OaC5iaW5kKG51bGwsa2gsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlRGVidWdWYWx1ZTpNaCx1c2VSZXNwb25kZXI6aGh9LHloPXtyZWFkQ29udGV4dDpuZyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3ZhciBjPUZoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZ2aChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpuZyx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gS2goNTE2LDE5MixhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gS2goNCwzNixMaC5iaW5kKG51bGwsYixhKSxjKX0sXG51c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gS2goNCwzNixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9RmgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJnZoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOkhoLHVzZVJlZjpmdW5jdGlvbigpe3JldHVybiBGaCgpLm1lbW9pemVkU3RhdGV9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3JldHVybiBIaChHaCxhKX0sdXNlRGVidWdWYWx1ZTpNaCx1c2VSZXNwb25kZXI6aGh9LE9oPW51bGwsUGg9bnVsbCxRaD0hMTtcbmZ1bmN0aW9uIFJoKGEsYil7dmFyIGM9U2goNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBUaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVWgoYSl7aWYoUWgpe3ZhciBiPVBoO2lmKGIpe3ZhciBjPWI7aWYoIVRoKGEsYikpe2I9amUoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFUaChhLGIpKXthLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyZ+QWN8RTtRaD0hMTtPaD1hO3JldHVybn1SaChPaCxjKX1PaD1hO1BoPWplKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyZ+QWN8RSxRaD0hMSxPaD1hfX1mdW5jdGlvbiBWaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47T2g9YX1cbmZ1bmN0aW9uIFdoKGEpe2lmKGEhPT1PaClyZXR1cm4hMTtpZighUWgpcmV0dXJuIFZoKGEpLFFoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhZ2UoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPVBoO2I7KVJoKGEsYiksYj1qZShiLm5leHRTaWJsaW5nKTtWaChhKTtpZigxMz09PWEudGFnKWlmKGE9YS5tZW1vaXplZFN0YXRlLGE9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGwsbnVsbD09PWEpYT1QaDtlbHNlIGE6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1hZSl7aWYoMD09PWIpe2E9amUoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZSBjIT09JGQmJmMhPT1jZSYmYyE9PWJlfHxiKyt9YT1hLm5leHRTaWJsaW5nfWE9bnVsbH1lbHNlIGE9T2g/amUoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7UGg9YTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFhoKCl7UGg9T2g9bnVsbDtRaD0hMX12YXIgWWg9RGEuUmVhY3RDdXJyZW50T3duZXIsbWc9ITE7ZnVuY3Rpb24gUihhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1hnKGIsbnVsbCxjLGQpOldnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIFpoKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtsZyhiLGUpO2Q9d2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhbWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSwkaChhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhYmkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsY2koYSxiLGcsZCxlLGYpO2E9VGcoYy50eXBlLG51bGwsZCxudWxsLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKGU8ZiYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpoZixjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiAkaChhLGIsZik7Yi5lZmZlY3RUYWd8PTE7YT1SZyhnLGQsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2koYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmaGYoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYobWc9ITEsZTxmKT8kaChhLGIsZik6ZGkoYSxiLGMsZCxmKX1mdW5jdGlvbiBlaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGRpKGEsYixjLGQsZSl7dmFyIGY9TihjKT91ZjpKLmN1cnJlbnQ7Zj12ZihiLGYpO2xnKGIsZSk7Yz13aChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFtZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXtpZihOKGMpKXt2YXIgZj0hMDtCZihiKX1lbHNlIGY9ITE7bGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PUUpLEtnKGIsYyxkLGUpLE1nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPW5nKGwpOihsPU4oYyk/dWY6Si5jdXJyZW50LGw9dmYoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJkxnKGIsZyxkLGwpO29nPSExO3ZhciB3PWIubWVtb2l6ZWRTdGF0ZTtrPWcuc3RhdGU9dzt2YXIgTD1iLnVwZGF0ZVF1ZXVlO251bGwhPT1MJiYoeGcoYixMLGQsZyxlKSxrPWIubWVtb2l6ZWRTdGF0ZSk7aCE9PWR8fHchPT1rfHxLLmN1cnJlbnR8fG9nPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEVnKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD1vZ3x8SmcoYixjLGgsZCx3LGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6Y2coYi50eXBlLGgpLGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9bmcobCk6KGw9TihjKT91ZjpKLmN1cnJlbnQsbD12ZihiLGwpKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChBPVxuXCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZMZyhiLGcsZCxsKSxvZz0hMSxrPWIubWVtb2l6ZWRTdGF0ZSx3PWcuc3RhdGU9ayxMPWIudXBkYXRlUXVldWUsbnVsbCE9PUwmJih4ZyhiLEwsZCxnLGUpLHc9Yi5tZW1vaXplZFN0YXRlKSxoIT09ZHx8ayE9PXd8fEsuY3VycmVudHx8b2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRWcoYixjLG0sZCksdz1iLm1lbW9pemVkU3RhdGUpLChtPW9nfHxKZyhiLGMsaCxkLGssdyxsKSk/KEF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHxcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCx3LGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsdyxsKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9XG5kLGIubWVtb2l6ZWRTdGF0ZT13KSxnLnByb3BzPWQsZy5zdGF0ZT13LGcuY29udGV4dD1sLGQ9bSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBnaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBnaShhLGIsYyxkLGUsZil7ZWkoYSxiKTt2YXIgZz0oYi5lZmZlY3RUYWcmNjQpIT09RDtpZighZCYmIWcpcmV0dXJuIGUmJkNmKGIsYywhMSksJGgoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WWguY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9V2coYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1XZyhiLG51bGwsaCxmKSk6UihhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZDZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/emYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmemYoYSxiLmNvbnRleHQsITEpO2NoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBpaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5VGltZToxfTtcbmZ1bmN0aW9uIGppKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPU8uY3VycmVudCxnPSExLGg7KGg9KGIuZWZmZWN0VGFnJjY0KSE9PUQpfHwoaD0wIT09KGYmMikmJihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkpO2g/KGc9ITAsYi5lZmZlY3RUYWcmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWUuZmFsbGJhY2t8fCEwPT09ZS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGZ8PTEpO0koTyxmJjEsYik7aWYobnVsbD09PWEpe2lmKGcpe2c9ZS5mYWxsYmFjaztlPVZnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9VmcoZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztiLm1lbW9pemVkU3RhdGU9XG5paTtiLmNoaWxkPWU7cmV0dXJuIGN9ZD1lLmNoaWxkcmVuO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVhnKGIsbnVsbCxkLGMpfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2E9YS5jaGlsZDtkPWEuc2libGluZztpZihnKXtlPWUuZmFsbGJhY2s7Yz1SZyhhLGEucGVuZGluZ1Byb3BzLDApO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1hLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2Q9UmcoZCxlLGQuZXhwaXJhdGlvblRpbWUpO2QucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9YztyZXR1cm4gZH1jPVdnKGIsYS5jaGlsZCxlLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPWN9YT1hLmNoaWxkO1xuaWYoZyl7Zz1lLmZhbGxiYWNrO2U9VmcobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtlLmNoaWxkPWE7bnVsbCE9PWEmJihhLnJldHVybj1lKTtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1WZyhnLGQsYyxudWxsKTtjLnJldHVybj1iO2Uuc2libGluZz1jO2MuZWZmZWN0VGFnfD1FO2UuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWU7cmV0dXJuIGN9Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9V2coYixhLGUuY2hpbGRyZW4sYyl9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zj9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwsbGFzdDpkLHRhaWw6Yyx0YWlsRXhwaXJhdGlvbjowLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLmxhc3Q9ZCxmLnRhaWw9YyxmLnRhaWxFeHBpcmF0aW9uPTAsZi50YWlsTW9kZT1lKX1cbmZ1bmN0aW9uIGxpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7UihhLGIsZC5jaGlsZHJlbixjKTtkPU8uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmVmZmVjdFRhZ3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmKGEuZWZmZWN0VGFnJjY0KSE9PUQpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyl7aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YS5leHBpcmF0aW9uVGltZTxjJiYoYS5leHBpcmF0aW9uVGltZT1jKTt2YXIgZz1hLmFsdGVybmF0ZTtudWxsIT09ZyYmZy5leHBpcmF0aW9uVGltZTxjJiYoZy5leHBpcmF0aW9uVGltZT1jKTtrZyhhLnJldHVybixjKX19ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO1xuYT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShPLGQsYik7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPW51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWQ9Yy5hbHRlcm5hdGUsbnVsbCE9PWQmJm51bGw9PT1naChkKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO2tpKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXtkPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiZudWxsPT09Z2goZCkpe2IuY2hpbGQ9ZTticmVha31kPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1kfWtpKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOmtpKGIsXG4hMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfWZ1bmN0aW9uICRoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt2YXIgZD1iLmV4cGlyYXRpb25UaW1lOzAhPT1kJiZ6ZyhkKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgdChFcnJvcigxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9UmcoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9UmcoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gbWkoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIG5pLG9pLHBpLHFpO25pPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtvaT1mdW5jdGlvbigpe307XG5waT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGc9Yi5zdGF0ZU5vZGU7YmgoWmcuY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPUFiKGcsZik7ZD1BYihnLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9SWIoZyxmKTtkPUliKGcsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1uKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9S2IoZyxmKTtkPUtiKGcsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9VGQpfVFkKGMsZCk7dmFyIGgsaztjPW51bGw7Zm9yKGggaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShoKSYmZi5oYXNPd25Qcm9wZXJ0eShoKSYmbnVsbCE9ZltoXSlpZihcInN0eWxlXCI9PT1cbmgpZm9yKGsgaW4gZz1mW2hdLGcpZy5oYXNPd25Qcm9wZXJ0eShrKSYmKGN8fChjPXt9KSxjW2tdPVwiXCIpO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1oJiZcImNoaWxkcmVuXCIhPT1oJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYoaWEuaGFzT3duUHJvcGVydHkoaCk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGgsbnVsbCkpO2ZvcihoIGluIGQpe3ZhciBsPWRbaF07Zz1udWxsIT1mP2ZbaF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoaCkmJmwhPT1nJiYobnVsbCE9bHx8bnVsbCE9ZykpaWYoXCJzdHlsZVwiPT09aClpZihnKXtmb3IoayBpbiBnKSFnLmhhc093blByb3BlcnR5KGspfHxsJiZsLmhhc093blByb3BlcnR5KGspfHwoY3x8KGM9e30pLGNba109XCJcIik7Zm9yKGsgaW4gbClsLmhhc093blByb3BlcnR5KGspJiZnW2tdIT09bFtrXSYmKGN8fChjPXt9KSxcbmNba109bFtrXSl9ZWxzZSBjfHwoYXx8KGE9W10pLGEucHVzaChoLGMpKSxjPWw7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGw9bD9sLl9faHRtbDp2b2lkIDAsZz1nP2cuX19odG1sOnZvaWQgMCxudWxsIT1sJiZnIT09bCYmKGE9YXx8W10pLnB1c2goaCxcIlwiK2wpKTpcImNoaWxkcmVuXCI9PT1oP2c9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goaCxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmKGlhLmhhc093blByb3BlcnR5KGgpPyhudWxsIT1sJiZTZChlLGgpLGF8fGc9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGgsbCkpfWMmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixjKTtlPWE7KGIudXBkYXRlUXVldWU9ZSkmJm1pKGIpfX07cWk9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJm1pKGIpfTtcbmZ1bmN0aW9uIHJpKGEsYil7c3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIHNpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOk4oYS50eXBlKSYmd2YoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzpkaChhKTt4ZihhKTtiPWEuZWZmZWN0VGFnO2lmKChiJjY0KSE9PUQpdGhyb3cgdChFcnJvcigyODUpKTthLmVmZmVjdFRhZz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gZmgoYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKE8sYSksYj1hLmVmZmVjdFRhZyxiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKE8sYSksbnVsbDtjYXNlIDQ6cmV0dXJuIGRoKGEpLG51bGw7Y2FzZSAxMDpyZXR1cm4gamcoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiB0aShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOldhKGIpfX1cbnZhciB1aT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiB2aShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPVdhKGMpKTtudWxsIT09YyYmVmEoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmVmEoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gd2koYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe3hpKGEsYyl9fWZ1bmN0aW9uIHlpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe3hpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIERpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OkVpKDIsMCxiKTticmVhaztjYXNlIDE6aWYoYi5lZmZlY3RUYWcmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpjZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigxNjMpKTt9fVxuZnVuY3Rpb24gRWkoYSxiLGMpe2M9Yy51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkb3tpZigwIT09KGQudGFnJmEpKXt2YXIgZT1kLmRlc3Ryb3k7ZC5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1lJiZlKCl9MCE9PShkLnRhZyZiKSYmKGU9ZC5jcmVhdGUsZC5kZXN0cm95PWUoKSk7ZD1kLm5leHR9d2hpbGUoZCE9PWMpfX1cbmZ1bmN0aW9uIEZpKGEsYixjKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgR2kmJkdpKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGQ9YS5uZXh0O1lmKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBhPWQ7ZG97dmFyIGM9YS5kZXN0cm95O2lmKHZvaWQgMCE9PWMpe3ZhciBnPWI7dHJ5e2MoKX1jYXRjaChoKXt4aShnLGgpfX1hPWEubmV4dH13aGlsZShhIT09ZCl9KX1icmVhaztjYXNlIDE6eWkoYik7Yz1iLnN0YXRlTm9kZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCYmd2koYixjKTticmVhaztjYXNlIDU6eWkoYik7YnJlYWs7Y2FzZSA0OkhpKGEsYixjKX19XG5mdW5jdGlvbiBJaShhKXt2YXIgYj1hLmFsdGVybmF0ZTthLnJldHVybj1udWxsO2EuY2hpbGQ9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmFsdGVybmF0ZT1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO251bGwhPT1iJiZJaShiKX1mdW5jdGlvbiBKaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIEtpKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKEppKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyB0KEVycm9yKDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJihUYihiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8SmkoYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmRSljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyZFKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXt2YXIgZj01PT09ZS50YWd8fDY9PT1lLnRhZztpZihmKXt2YXIgZz1mP2Uuc3RhdGVOb2RlOmUuc3RhdGVOb2RlLmluc3RhbmNlO2lmKGMpaWYoZCl7Zj1iO3ZhciBoPWc7Zz1jOzg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaCxnKTpmLmluc2VydEJlZm9yZShoLGcpfWVsc2UgYi5pbnNlcnRCZWZvcmUoZyxjKTtlbHNlIGQ/KGg9Yiw4PT09aC5ub2RlVHlwZT8oZj1oLnBhcmVudE5vZGUsZi5pbnNlcnRCZWZvcmUoZyxoKSk6KGY9aCxmLmFwcGVuZENoaWxkKGcpKSxoPWguX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09aCYmdm9pZCAwIT09aHx8bnVsbCE9PWYub25jbGlja3x8KGYub25jbGljaz1UZCkpOmIuYXBwZW5kQ2hpbGQoZyl9ZWxzZSBpZig0IT09XG5lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGQucmV0dXJuPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24gSGkoYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyB0KEVycm9yKDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihGaShoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrO2Zvcig7bnVsbD09PW0uc2libGluZzspe2lmKG51bGw9PT1tLnJldHVybnx8bS5yZXR1cm49PT1rKWJyZWFrIGE7bT1tLnJldHVybn1tLnNpYmxpbmcucmV0dXJuPW0ucmV0dXJuO209bS5zaWJsaW5nfWc/KGg9XG5mLGs9ZC5zdGF0ZU5vZGUsOD09PWgubm9kZVR5cGU/aC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGspOmgucmVtb3ZlQ2hpbGQoaykpOmYucmVtb3ZlQ2hpbGQoZC5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWQudGFnKXtpZihudWxsIT09ZC5jaGlsZCl7Zj1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoRmkoYSxkLGMpLG51bGwhPT1kLmNoaWxkKXtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX1pZihkPT09YilicmVhaztmb3IoO251bGw9PT1kLnNpYmxpbmc7KXtpZihudWxsPT09ZC5yZXR1cm58fGQucmV0dXJuPT09YilyZXR1cm47ZD1kLnJldHVybjs0PT09ZC50YWcmJihlPSExKX1kLnNpYmxpbmcucmV0dXJuPWQucmV0dXJuO2Q9ZC5zaWJsaW5nfX1cbmZ1bmN0aW9uIExpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6RWkoNCw4LGIpO2JyZWFrO2Nhc2UgMTpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzLGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbbmVdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJkNiKGMsZCk7UmQoYSxlKTtiPVJkKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPTIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz9PZChjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/U2IoYyxoKTpcImNoaWxkcmVuXCI9PT1nP1RiKGMsaCk6dWIoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOkRiKGMsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TWIoYyxcbmQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGE9ZC52YWx1ZSxudWxsIT1hP0piKGMsISFkLm11bHRpcGxlLGEsITEpOmIhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9KYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6SmIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1icmVhaztjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IHQoRXJyb3IoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDM6Yj1iLnN0YXRlTm9kZTtiLmh5ZHJhdGUmJihiLmh5ZHJhdGU9ITEsemMoYi5jb250YWluZXJJbmZvKSk7YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmM9YjtudWxsPT09Yi5tZW1vaXplZFN0YXRlP2Q9ITE6KGQ9ITAsYz1iLmNoaWxkLE1pPVZmKCkpO1xuaWYobnVsbCE9PWMpYTpmb3IoYT1jOzspe2lmKDU9PT1hLnRhZylmPWEuc3RhdGVOb2RlLGQ/KGY9Zi5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGY9YS5zdGF0ZU5vZGUsZT1hLm1lbW9pemVkUHJvcHMuc3R5bGUsZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGwsZi5zdHlsZS5kaXNwbGF5PU5kKFwiZGlzcGxheVwiLGUpKTtlbHNlIGlmKDY9PT1hLnRhZylhLnN0YXRlTm9kZS5ub2RlVmFsdWU9ZD9cIlwiOmEubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09YS50YWcmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGw9PT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7Zj1hLmNoaWxkLnNpYmxpbmc7Zi5yZXR1cm49YTthPWY7Y29udGludWV9ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49XG5hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YylicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfU5pKGIpO2JyZWFrO2Nhc2UgMTk6TmkoYik7YnJlYWs7Y2FzZSAxNzpicmVhaztjYXNlIDIwOmJyZWFrO2Nhc2UgMjE6YnJlYWs7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDE2MykpO319ZnVuY3Rpb24gTmkoYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgdWkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1PaS5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX12YXIgUGk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7XG5mdW5jdGlvbiBRaShhLGIsYyl7Yz1yZyhjLG51bGwpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1JpfHwoUmk9ITAsU2k9ZCk7dmkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBUaShhLGIsYyl7Yz1yZyhjLG51bGwpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXt2aShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VWk/VWk9bmV3IFNldChbdGhpc10pOlVpLmFkZCh0aGlzKSx2aShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbnZhciBWaT1NYXRoLmNlaWwsV2k9RGEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixYaT1EYS5SZWFjdEN1cnJlbnRPd25lcixTPTAsWWk9OCxaaT0xNiwkaT0zMixhaj0wLGJqPTEsY2o9Mixkaj0zLGVqPTQsZmo9NSxnaj02LFQ9UyxVPW51bGwsVj1udWxsLFc9MCxYPWFqLGhqPW51bGwsaWo9MTA3Mzc0MTgyMyxqaj0xMDczNzQxODIzLGtqPW51bGwsbGo9MCxtaj0hMSxNaT0wLG5qPTUwMCxZPW51bGwsUmk9ITEsU2k9bnVsbCxVaT1udWxsLG9qPSExLHBqPW51bGwscWo9OTAscmo9bnVsbCxzaj0wLHRqPW51bGwsdWo9MDtmdW5jdGlvbiBGZygpe3JldHVybihUJihaaXwkaSkpIT09Uz8xMDczNzQxODIxLShWZigpLzEwfDApOjAhPT11aj91ajp1aj0xMDczNzQxODIxLShWZigpLzEwfDApfVxuZnVuY3Rpb24gR2coYSxiLGMpe2I9Yi5tb2RlO2lmKDA9PT0oYiYyKSlyZXR1cm4gMTA3Mzc0MTgyMzt2YXIgZD1XZigpO2lmKDA9PT0oYiY0KSlyZXR1cm4gOTk9PT1kPzEwNzM3NDE4MjM6MTA3Mzc0MTgyMjtpZigoVCZaaSkhPT1TKXJldHVybiBXO2lmKG51bGwhPT1jKWE9MTA3Mzc0MTgyMS0yNSooKCgxMDczNzQxODIxLWErKGMudGltZW91dE1zfDB8fDVFMykvMTApLzI1fDApKzEpO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgOTk6YT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgOTg6YT0xMDczNzQxODIxLTEwKigoKDEwNzM3NDE4MjEtYSsxNSkvMTB8MCkrMSk7YnJlYWs7Y2FzZSA5NzpjYXNlIDk2OmE9MTA3Mzc0MTgyMS0yNSooKCgxMDczNzQxODIxLWErNTAwKS8yNXwwKSsxKTticmVhaztjYXNlIDk1OmE9MjticmVhaztkZWZhdWx0OnRocm93IHQoRXJyb3IoMzI2KSk7fW51bGwhPT1VJiZhPT09VyYmLS1hO3JldHVybiBhfXZhciB2aj0wO1xuZnVuY3Rpb24gSGcoYSxiKXtpZig1MDxzail0aHJvdyBzaj0wLHRqPW51bGwsdChFcnJvcigxODUpKTthPXdqKGEsYik7aWYobnVsbCE9PWEpe3ZhciBjPVdmKCk7MTA3Mzc0MTgyMz09PWI/KFQmWWkpIT09UyYmKFQmKFppfCRpKSk9PT1TP3hqKGEpOihaKGEpLFQ9PT1TJiZiZygpKTpaKGEpOyhUJjQpPT09U3x8OTghPT1jJiY5OSE9PWN8fChudWxsPT09cmo/cmo9bmV3IE1hcChbW2EsYl1dKTooYz1yai5nZXQoYSksKHZvaWQgMD09PWN8fGM+YikmJnJqLnNldChhLGIpKSl9fVxuZnVuY3Rpb24gd2ooYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1udWxsIT09ZSYmKFU9PT1lJiYoemcoYiksWD09PWVqJiZ5aihlLFcpKSx6aihlLGIpKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIEFqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2lmKDAhPT1iKXJldHVybiBiO2I9YS5maXJzdFBlbmRpbmdUaW1lO2lmKCFCaihhLGIpKXJldHVybiBiO2I9YS5sYXN0UGluZ2VkVGltZTthPWEubmV4dEtub3duUGVuZGluZ0xldmVsO3JldHVybiBiPmE/YjphfVxuZnVuY3Rpb24gWihhKXtpZigwIT09YS5sYXN0RXhwaXJlZFRpbWUpYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYS5jYWxsYmFja1ByaW9yaXR5PTk5LGEuY2FsbGJhY2tOb2RlPSRmKHhqLmJpbmQobnVsbCxhKSk7ZWxzZXt2YXIgYj1BaihhKSxjPWEuY2FsbGJhY2tOb2RlO2lmKDA9PT1iKW51bGwhPT1jJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCxhLmNhbGxiYWNrUHJpb3JpdHk9OTApO2Vsc2V7dmFyIGQ9RmcoKTsxMDczNzQxODIzPT09Yj9kPTk5OjE9PT1ifHwyPT09Yj9kPTk1OihkPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWQpLGQ9MD49ZD85OToyNTA+PWQ/OTg6NTI1MD49ZD85Nzo5NSk7aWYobnVsbCE9PWMpe3ZhciBlPWEuY2FsbGJhY2tQcmlvcml0eTtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9PT1iJiZlPj1kKXJldHVybjtjIT09UGYmJkZmKGMpfWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1cbmI7YS5jYWxsYmFja1ByaW9yaXR5PWQ7Yj0xMDczNzQxODIzPT09Yj8kZih4ai5iaW5kKG51bGwsYSkpOlpmKGQsQ2ouYmluZChudWxsLGEpLHt0aW1lb3V0OjEwKigxMDczNzQxODIxLWIpLVZmKCl9KTthLmNhbGxiYWNrTm9kZT1ifX19XG5mdW5jdGlvbiBDaihhLGIpe3VqPTA7aWYoYilyZXR1cm4gYj1GZygpLERqKGEsYiksWihhKSxudWxsO3ZhciBjPUFqKGEpO2lmKDAhPT1jKXtiPWEuY2FsbGJhY2tOb2RlO2lmKChUJihaaXwkaSkpIT09Uyl0aHJvdyB0KEVycm9yKDMyNykpO0VqKCk7YT09PVUmJmM9PT1XfHxGaihhLGMpO2lmKG51bGwhPT1WKXt2YXIgZD1UO1R8PVppO3ZhciBlPUdqKGEpO2RvIHRyeXtIaigpO2JyZWFrfWNhdGNoKGgpe0lqKGEsaCl9d2hpbGUoMSk7aGcoKTtUPWQ7V2kuY3VycmVudD1lO2lmKFg9PT1iail0aHJvdyBiPWhqLEZqKGEsYykseWooYSxjKSxaKGEpLGI7aWYobnVsbD09PVYpc3dpdGNoKGU9YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZSxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YyxKaihhLGMpLGQ9WCxVPW51bGwsZCl7Y2FzZSBhajpjYXNlIGJqOnRocm93IHQoRXJyb3IoMzQ1KSk7Y2FzZSBjajppZigyIT09Yyl7RGooYSwyKTticmVha31LaihhKTticmVhaztjYXNlIGRqOnlqKGEsXG5jKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7Yz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1MaihlKSk7aWYoMTA3Mzc0MTgyMz09PWlqJiYoZT1NaStuai1WZigpLDEwPGUpKXtpZihtail7dmFyIGY9YS5sYXN0UGluZ2VkVGltZTtpZigwPT09Znx8Zj49Yyl7YS5sYXN0UGluZ2VkVGltZT1jO0ZqKGEsYyk7YnJlYWt9fWY9QWooYSk7aWYoMCE9PWYmJmYhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1kO2JyZWFrfWEudGltZW91dEhhbmRsZT1oZShLai5iaW5kKG51bGwsYSksZSk7YnJlYWt9S2ooYSk7YnJlYWs7Y2FzZSBlajp5aihhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtjPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUxqKGUpKTtpZihtaiYmKGU9YS5sYXN0UGluZ2VkVGltZSwwPT09ZXx8ZT49Yykpe2EubGFzdFBpbmdlZFRpbWU9YztGaihhLGMpO2JyZWFrfWU9QWooYSk7aWYoMCE9PWUmJmUhPT1jKWJyZWFrO2lmKDAhPT1cbmQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPWQ7YnJlYWt9MTA3Mzc0MTgyMyE9PWpqP2Q9MTAqKDEwNzM3NDE4MjEtamopLVZmKCk6MTA3Mzc0MTgyMz09PWlqP2Q9MDooZD0xMCooMTA3Mzc0MTgyMS1paiktNUUzLGU9VmYoKSxjPTEwKigxMDczNzQxODIxLWMpLWUsZD1lLWQsMD5kJiYoZD0wKSxkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKlZpKGQvMTk2MCkpLWQsYzxkJiYoZD1jKSk7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPWhlKEtqLmJpbmQobnVsbCxhKSxkKTticmVha31LaihhKTticmVhaztjYXNlIGZqOmlmKDEwNzM3NDE4MjMhPT1paiYmbnVsbCE9PWtqKXtmPWlqO3ZhciBnPWtqO2Q9Zy5idXN5TWluRHVyYXRpb25Nc3wwOzA+PWQ/ZD0wOihlPWcuYnVzeURlbGF5TXN8MCxmPVZmKCktKDEwKigxMDczNzQxODIxLWYpLShnLnRpbWVvdXRNc3wwfHw1RTMpKSxkPWY8PWU/MDplK2QtZik7XG5pZigxMDxkKXt5aihhLGMpO2EudGltZW91dEhhbmRsZT1oZShLai5iaW5kKG51bGwsYSksZCk7YnJlYWt9fUtqKGEpO2JyZWFrO2Nhc2UgZ2o6eWooYSxjKTticmVhaztkZWZhdWx0OnRocm93IHQoRXJyb3IoMzI5KSk7fVooYSk7aWYoYS5jYWxsYmFja05vZGU9PT1iKXJldHVybiBDai5iaW5kKG51bGwsYSl9fXJldHVybiBudWxsfVxuZnVuY3Rpb24geGooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7Yj0wIT09Yj9iOjEwNzM3NDE4MjM7aWYoYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPT09YilLaihhKTtlbHNle2lmKChUJihaaXwkaSkpIT09Uyl0aHJvdyB0KEVycm9yKDMyNykpO0VqKCk7YT09PVUmJmI9PT1XfHxGaihhLGIpO2lmKG51bGwhPT1WKXt2YXIgYz1UO1R8PVppO3ZhciBkPUdqKGEpO2RvIHRyeXtNaigpO2JyZWFrfWNhdGNoKGUpe0lqKGEsZSl9d2hpbGUoMSk7aGcoKTtUPWM7V2kuY3VycmVudD1kO2lmKFg9PT1iail0aHJvdyBjPWhqLEZqKGEsYikseWooYSxiKSxaKGEpLGM7aWYobnVsbCE9PVYpdGhyb3cgdChFcnJvcigyNjEpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1iO0pqKGEsYik7WD09PWdqP3lqKGEsYik6KFU9bnVsbCxLaihhKSk7WihhKX19cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBOaigpeyhUJigxfFppfCRpKSk9PT1TJiYoT2ooKSxFaigpKX1mdW5jdGlvbiBKaihhLGIpe3ZhciBjPWEuZmlyc3RCYXRjaDtudWxsIT09YyYmYy5fZGVmZXImJmMuX2V4cGlyYXRpb25UaW1lPj1iJiYoWmYoOTcsZnVuY3Rpb24oKXtjLl9vbkNvbXBsZXRlKCk7cmV0dXJuIG51bGx9KSxYPWdqKX1mdW5jdGlvbiBPaigpe2lmKG51bGwhPT1yail7dmFyIGE9cmo7cmo9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSxjKXtEaihjLGEpO1ooYyl9KTtiZygpfX1mdW5jdGlvbiBQaihhLGIpe3ZhciBjPVQ7VHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtUPWMsVD09PVMmJmJnKCl9fWZ1bmN0aW9uIFFqKGEsYixjLGQpe3ZhciBlPVQ7VHw9NDt0cnl7cmV0dXJuIFlmKDk4LGEuYmluZChudWxsLGIsYyxkKSl9ZmluYWxseXtUPWUsVD09PVMmJmJnKCl9fVxuZnVuY3Rpb24gUmooYSxiKXt2YXIgYz1UO1QmPS0yO1R8PVlpO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1Q9YyxUPT09UyYmYmcoKX19XG5mdW5jdGlvbiBGaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxpZShjKSk7aWYobnVsbCE9PVYpZm9yKGM9Vi5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOnZhciBlPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZSYmdm9pZCAwIT09ZSYmd2YoZCk7YnJlYWs7Y2FzZSAzOmRoKGQpO3hmKGQpO2JyZWFrO2Nhc2UgNTpmaChkKTticmVhaztjYXNlIDQ6ZGgoZCk7YnJlYWs7Y2FzZSAxMzpIKE8sZCk7YnJlYWs7Y2FzZSAxOTpIKE8sZCk7YnJlYWs7Y2FzZSAxMDpqZyhkKX1jPWMucmV0dXJufVU9YTtWPVJnKGEuY3VycmVudCxudWxsLGIpO1c9YjtYPWFqO2hqPW51bGw7amo9aWo9MTA3Mzc0MTgyMztraj1udWxsO2xqPTA7bWo9ITF9XG5mdW5jdGlvbiBJaihhLGIpe2Rve3RyeXtoZygpO0FoKCk7aWYobnVsbD09PVZ8fG51bGw9PT1WLnJldHVybilyZXR1cm4gWD1iaixoaj1iLG51bGw7YTp7dmFyIGM9YSxkPVYucmV0dXJuLGU9VixmPWI7Yj1XO2UuZWZmZWN0VGFnfD0yMDQ4O2UuZmlyc3RFZmZlY3Q9ZS5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWYmJlwib2JqZWN0XCI9PT10eXBlb2YgZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYudGhlbil7dmFyIGc9ZixoPTAhPT0oTy5jdXJyZW50JjEpLGs9ZDtkb3t2YXIgbDtpZihsPTEzPT09ay50YWcpe3ZhciBtPWsubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSlsPW51bGwhPT1tLmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgQT1rLm1lbW9pemVkUHJvcHM7bD12b2lkIDA9PT1BLmZhbGxiYWNrPyExOiEwIT09QS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDpoPyExOiEwfX1pZihsKXt2YXIgdz1rLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT13KXt2YXIgTD1uZXcgU2V0O1xuTC5hZGQoZyk7ay51cGRhdGVRdWV1ZT1MfWVsc2Ugdy5hZGQoZyk7aWYoMD09PShrLm1vZGUmMikpe2suZWZmZWN0VGFnfD02NDtlLmVmZmVjdFRhZyY9LTI5ODE7aWYoMT09PWUudGFnKWlmKG51bGw9PT1lLmFsdGVybmF0ZSllLnRhZz0xNztlbHNle3ZhciB3Yj1yZygxMDczNzQxODIzLG51bGwpO3diLnRhZz0yO3RnKGUsd2IpfWUuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMzticmVhayBhfWY9dm9pZCAwO2U9Yjt2YXIgTT1jLnBpbmdDYWNoZTtudWxsPT09TT8oTT1jLnBpbmdDYWNoZT1uZXcgUGksZj1uZXcgU2V0LE0uc2V0KGcsZikpOihmPU0uZ2V0KGcpLHZvaWQgMD09PWYmJihmPW5ldyBTZXQsTS5zZXQoZyxmKSkpO2lmKCFmLmhhcyhlKSl7Zi5hZGQoZSk7dmFyIHE9U2ouYmluZChudWxsLGMsZyxlKTtnLnRoZW4ocSxxKX1rLmVmZmVjdFRhZ3w9NDA5NjtrLmV4cGlyYXRpb25UaW1lPWI7YnJlYWsgYX1rPWsucmV0dXJufXdoaWxlKG51bGwhPT1rKTtmPUVycm9yKChWYShlLnR5cGUpfHxcblwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitXYShlKSl9WCE9PWZqJiYoWD1jaik7Zj10aShmLGUpO2s9ZDtkb3tzd2l0Y2goay50YWcpe2Nhc2UgMzpnPWY7ay5lZmZlY3RUYWd8PTQwOTY7ay5leHBpcmF0aW9uVGltZT1iO3ZhciB5PVFpKGssZyxiKTt1ZyhrLHkpO2JyZWFrIGE7Y2FzZSAxOmc9Zjt2YXIgej1rLnR5cGUscD1rLnN0YXRlTm9kZTtpZigoay5lZmZlY3RUYWcmNjQpPT09RCYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB6LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXAmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwLmNvbXBvbmVudERpZENhdGNoJiZcbihudWxsPT09VWl8fCFVaS5oYXMocCkpKSl7ay5lZmZlY3RUYWd8PTQwOTY7ay5leHBpcmF0aW9uVGltZT1iO3ZhciB1PVRpKGssZyxiKTt1ZyhrLHUpO2JyZWFrIGF9fWs9ay5yZXR1cm59d2hpbGUobnVsbCE9PWspfVY9VGooVil9Y2F0Y2godil7Yj12O2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIEdqKCl7dmFyIGE9V2kuY3VycmVudDtXaS5jdXJyZW50PXpoO3JldHVybiBudWxsPT09YT96aDphfWZ1bmN0aW9uIHlnKGEsYil7YTxpaiYmMjxhJiYoaWo9YSk7bnVsbCE9PWImJmE8amomJjI8YSYmKGpqPWEsa2o9Yil9ZnVuY3Rpb24gemcoYSl7YT5saiYmKGxqPWEpfWZ1bmN0aW9uIE1qKCl7Zm9yKDtudWxsIT09VjspVj1VaihWKX1mdW5jdGlvbiBIaigpe2Zvcig7bnVsbCE9PVYmJiFHZigpOylWPVVqKFYpfVxuZnVuY3Rpb24gVWooYSl7dmFyIGI9VmooYS5hbHRlcm5hdGUsYSxXKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPVRqKGEpKTtYaS5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBUaihhKXtWPWE7ZG97dmFyIGI9Vi5hbHRlcm5hdGU7YT1WLnJldHVybjtpZigoVi5lZmZlY3RUYWcmMjA0OCk9PT1EKXthOnt2YXIgYz1iO2I9Vjt2YXIgZD1XLGU9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSAxNjpicmVhaztjYXNlIDE1OmNhc2UgMDpicmVhaztjYXNlIDE6TihiLnR5cGUpJiZ3ZihiKTticmVhaztjYXNlIDM6ZGgoYik7eGYoYik7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTsobnVsbD09PWN8fG51bGw9PT1jLmNoaWxkKSYmV2goYikmJm1pKGIpO29pKGIpO2JyZWFrO2Nhc2UgNTpmaChiKTtkPWJoKGFoLmN1cnJlbnQpO3ZhciBmPWIudHlwZTtpZihudWxsIT09YyYmbnVsbCE9Yi5zdGF0ZU5vZGUpcGkoYyxiLGYsZSxkKSxjLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCk7ZWxzZSBpZihlKXt2YXIgZz1cbmJoKFpnLmN1cnJlbnQpO2lmKFdoKGIpKXtlPWI7Zj12b2lkIDA7Yz1lLnN0YXRlTm9kZTt2YXIgaD1lLnR5cGUsaz1lLm1lbW9pemVkUHJvcHM7Y1ttZV09ZTtjW25lXT1rO3N3aXRjaChoKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsYyk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKHZhciBsPTA7bDxkYy5sZW5ndGg7bCsrKUcoZGNbbF0sYyk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGMpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGMpO0coXCJsb2FkXCIsYyk7YnJlYWs7Y2FzZSBcImZvcm1cIjpHKFwicmVzZXRcIixjKTtHKFwic3VibWl0XCIsYyk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsYyk7YnJlYWs7Y2FzZSBcImlucHV0XCI6QmIoYyxrKTtHKFwiaW52YWxpZFwiLGMpO1NkKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yy5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhay5tdWx0aXBsZX07RyhcImludmFsaWRcIixjKTtTZChkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TGIoYyxrKSxHKFwiaW52YWxpZFwiLGMpLFNkKGQsXCJvbkNoYW5nZVwiKX1RZChoLGspO2w9bnVsbDtmb3IoZiBpbiBrKWsuaGFzT3duUHJvcGVydHkoZikmJihnPWtbZl0sXCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGc/Yy50ZXh0Q29udGVudCE9PWcmJihsPVtcImNoaWxkcmVuXCIsZ10pOlwibnVtYmVyXCI9PT10eXBlb2YgZyYmYy50ZXh0Q29udGVudCE9PVwiXCIrZyYmKGw9W1wiY2hpbGRyZW5cIixcIlwiK2ddKTppYS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9ZyYmU2QoZCxmKSk7c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOnliKGMpO0diKGMsaywhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eWIoYyk7TmIoYyxrKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGsub25DbGljayYmXG4oYy5vbmNsaWNrPVRkKX1kPWw7ZS51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiZtaShiKX1lbHNle2s9ZjtjPWU7aD1iO2w9OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQ7Zz09PU9iLmh0bWwmJihnPVBiKGspKTtnPT09T2IuaHRtbD9cInNjcmlwdFwiPT09az8oaz1sLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksay5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixsPWsucmVtb3ZlQ2hpbGQoay5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBjLmlzP2w9bC5jcmVhdGVFbGVtZW50KGsse2lzOmMuaXN9KToobD1sLmNyZWF0ZUVsZW1lbnQoayksXCJzZWxlY3RcIj09PWsmJihrPWwsYy5tdWx0aXBsZT9rLm11bHRpcGxlPSEwOmMuc2l6ZSYmKGsuc2l6ZT1jLnNpemUpKSk6bD1sLmNyZWF0ZUVsZW1lbnROUyhnLGspO2s9bDtrW21lXT1oO2tbbmVdPWM7Yz1rO25pKGMsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YztnPWQ7dmFyIG09UmQoZixlKTtzd2l0Y2goZil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLFxuYyk7ZD1lO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihkPTA7ZDxkYy5sZW5ndGg7ZCsrKUcoZGNbZF0sYyk7ZD1lO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixjKTtkPWU7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsYyk7RyhcImxvYWRcIixjKTtkPWU7YnJlYWs7Y2FzZSBcImZvcm1cIjpHKFwicmVzZXRcIixjKTtHKFwic3VibWl0XCIsYyk7ZD1lO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGMpO2Q9ZTticmVhaztjYXNlIFwiaW5wdXRcIjpCYihjLGUpO2Q9QWIoYyxlKTtHKFwiaW52YWxpZFwiLGMpO1NkKGcsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZD1JYihjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZS5tdWx0aXBsZX07ZD1uKHt9LGUse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYyk7U2QoZyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkxiKGMsXG5lKTtkPUtiKGMsZSk7RyhcImludmFsaWRcIixjKTtTZChnLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpkPWV9UWQoZixkKTtoPXZvaWQgMDtrPWY7bD1jO3ZhciBBPWQ7Zm9yKGggaW4gQSlpZihBLmhhc093blByb3BlcnR5KGgpKXt2YXIgdz1BW2hdO1wic3R5bGVcIj09PWg/T2QobCx3KTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oPyh3PXc/dy5fX2h0bWw6dm9pZCAwLG51bGwhPXcmJlNiKGwsdykpOlwiY2hpbGRyZW5cIj09PWg/XCJzdHJpbmdcIj09PXR5cGVvZiB3PyhcInRleHRhcmVhXCIhPT1rfHxcIlwiIT09dykmJlRiKGwsdyk6XCJudW1iZXJcIj09PXR5cGVvZiB3JiZUYihsLFwiXCIrdyk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiZcImF1dG9Gb2N1c1wiIT09aCYmKGlhLmhhc093blByb3BlcnR5KGgpP251bGwhPXcmJlNkKGcsaCk6bnVsbCE9dyYmdWIobCxoLHcsbSkpfXN3aXRjaChmKXtjYXNlIFwiaW5wdXRcIjp5YihjKTtcbkdiKGMsZSwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eWIoYyk7TmIoYyxlKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZS52YWx1ZSYmYy5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrdGIoZS52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkPWM7Yz1lO2QubXVsdGlwbGU9ISFjLm11bHRpcGxlO2g9Yy52YWx1ZTtudWxsIT1oP0piKGQsISFjLm11bHRpcGxlLGgsITEpOm51bGwhPWMuZGVmYXVsdFZhbHVlJiZKYihkLCEhYy5tdWx0aXBsZSxjLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYy5vbmNsaWNrPVRkKX1mZShmLGUpJiZtaShiKX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNlIGlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyB0KEVycm9yKDE2NikpO2JyZWFrO2Nhc2UgNjppZihjJiZudWxsIT1iLnN0YXRlTm9kZSlxaShjLGIsYy5tZW1vaXplZFByb3BzLGUpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PVxudHlwZW9mIGUmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyB0KEVycm9yKDE2NikpO2Y9YmgoYWguY3VycmVudCk7YmgoWmcuY3VycmVudCk7V2goYik/KGQ9Yi5zdGF0ZU5vZGUsZT1iLm1lbW9pemVkUHJvcHMsZFttZV09YixkLm5vZGVWYWx1ZSE9PWUmJm1pKGIpKTooZD1iLGU9KDk9PT1mLm5vZGVUeXBlP2Y6Zi5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShlKSxlW21lXT1iLGQuc3RhdGVOb2RlPWUpfWJyZWFrO2Nhc2UgMTE6YnJlYWs7Y2FzZSAxMzpIKE8sYik7ZT1iLm1lbW9pemVkU3RhdGU7aWYoKGIuZWZmZWN0VGFnJjY0KSE9PUQpe2IuZXhwaXJhdGlvblRpbWU9ZDticmVhayBhfWQ9bnVsbCE9PWU7ZT0hMTtudWxsPT09Yz9XaChiKTooZj1jLm1lbW9pemVkU3RhdGUsZT1udWxsIT09ZixkfHxudWxsPT09Znx8KGY9Yy5jaGlsZC5zaWJsaW5nLG51bGwhPT1mJiYoaD1iLmZpcnN0RWZmZWN0LG51bGwhPT1oPyhiLmZpcnN0RWZmZWN0PWYsZi5uZXh0RWZmZWN0PWgpOlxuKGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWYsZi5uZXh0RWZmZWN0PW51bGwpLGYuZWZmZWN0VGFnPTgpKSk7aWYoZCYmIWUmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1jJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShPLmN1cnJlbnQmMSkpWD09PWFqJiYoWD1kaik7ZWxzZXtpZihYPT09YWp8fFg9PT1kailYPWVqOzAhPT1saiYmbnVsbCE9PVUmJih5aihVLFcpLHpqKFUsbGopKX1pZihkfHxlKWIuZWZmZWN0VGFnfD00O2JyZWFrO2Nhc2UgNzpicmVhaztjYXNlIDg6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDQ6ZGgoYik7b2koYik7YnJlYWs7Y2FzZSAxMDpqZyhiKTticmVhaztjYXNlIDk6YnJlYWs7Y2FzZSAxNDpicmVhaztjYXNlIDE3Ok4oYi50eXBlKSYmd2YoYik7YnJlYWs7Y2FzZSAxOTpIKE8sYik7ZT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWUpYnJlYWs7Zj0oYi5lZmZlY3RUYWcmNjQpIT09RDtoPWUucmVuZGVyaW5nO1xuaWYobnVsbD09PWgpaWYoZilyaShlLCExKTtlbHNle2lmKFghPT1hanx8bnVsbCE9PWMmJihjLmVmZmVjdFRhZyY2NCkhPT1EKWZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KXtoPWdoKGMpO2lmKG51bGwhPT1oKXtiLmVmZmVjdFRhZ3w9NjQ7cmkoZSwhMSk7ZT1oLnVwZGF0ZVF1ZXVlO251bGwhPT1lJiYoYi51cGRhdGVRdWV1ZT1lLGIuZWZmZWN0VGFnfD00KTtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO2ZvcihlPWIuY2hpbGQ7bnVsbCE9PWU7KWY9ZSxjPWQsZi5lZmZlY3RUYWcmPUUsZi5uZXh0RWZmZWN0PW51bGwsZi5maXJzdEVmZmVjdD1udWxsLGYubGFzdEVmZmVjdD1udWxsLGg9Zi5hbHRlcm5hdGUsbnVsbD09PWg/KGYuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGYuZXhwaXJhdGlvblRpbWU9YyxmLmNoaWxkPW51bGwsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwpOihmLmNoaWxkRXhwaXJhdGlvblRpbWU9XG5oLmNoaWxkRXhwaXJhdGlvblRpbWUsZi5leHBpcmF0aW9uVGltZT1oLmV4cGlyYXRpb25UaW1lLGYuY2hpbGQ9aC5jaGlsZCxmLm1lbW9pemVkUHJvcHM9aC5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1oLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1oLnVwZGF0ZVF1ZXVlLGM9aC5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWM/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Yy5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Yy5maXJzdENvbnRleHQscmVzcG9uZGVyczpjLnJlc3BvbmRlcnN9KSxlPWUuc2libGluZztJKE8sTy5jdXJyZW50JjF8MixiKTtiPWIuY2hpbGQ7YnJlYWsgYX1jPWMuc2libGluZ319ZWxzZXtpZighZilpZihjPWdoKGgpLG51bGwhPT1jKXtpZihiLmVmZmVjdFRhZ3w9NjQsZj0hMCxyaShlLCEwKSxudWxsPT09ZS50YWlsJiZcImhpZGRlblwiPT09ZS50YWlsTW9kZSl7ZD1jLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1cbmQsYi5lZmZlY3RUYWd8PTQpO2I9Yi5sYXN0RWZmZWN0PWUubGFzdEVmZmVjdDtudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKTticmVha319ZWxzZSBWZigpPmUudGFpbEV4cGlyYXRpb24mJjE8ZCYmKGIuZWZmZWN0VGFnfD02NCxmPSEwLHJpKGUsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWQtMSk7ZS5pc0JhY2t3YXJkcz8oaC5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1oKTooZD1lLmxhc3QsbnVsbCE9PWQ/ZC5zaWJsaW5nPWg6Yi5jaGlsZD1oLGUubGFzdD1oKX1pZihudWxsIT09ZS50YWlsKXswPT09ZS50YWlsRXhwaXJhdGlvbiYmKGUudGFpbEV4cGlyYXRpb249VmYoKSs1MDApO2Q9ZS50YWlsO2UucmVuZGVyaW5nPWQ7ZS50YWlsPWQuc2libGluZztlLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0O2Quc2libGluZz1udWxsO2U9Ty5jdXJyZW50O2U9Zj9lJjF8MjplJjE7SShPLGUsYik7Yj1kO2JyZWFrIGF9YnJlYWs7Y2FzZSAyMDpicmVhaztcbmNhc2UgMjE6YnJlYWs7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDE1NiksYi50YWcpO31iPW51bGx9ZD1WO2lmKDE9PT1XfHwxIT09ZC5jaGlsZEV4cGlyYXRpb25UaW1lKXtlPTA7Zm9yKGY9ZC5jaGlsZDtudWxsIT09ZjspYz1mLmV4cGlyYXRpb25UaW1lLGg9Zi5jaGlsZEV4cGlyYXRpb25UaW1lLGM+ZSYmKGU9YyksaD5lJiYoZT1oKSxmPWYuc2libGluZztkLmNoaWxkRXhwaXJhdGlvblRpbWU9ZX1pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YSYmKGEuZWZmZWN0VGFnJjIwNDgpPT09RCYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1WLmZpcnN0RWZmZWN0KSxudWxsIT09Vi5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVYuZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1WLmxhc3RFZmZlY3QpLDE8Vi5lZmZlY3RUYWcmJihudWxsIT09YS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVxuVjphLmZpcnN0RWZmZWN0PVYsYS5sYXN0RWZmZWN0PVYpKX1lbHNle2I9c2koVixXKTtpZihudWxsIT09YilyZXR1cm4gYi5lZmZlY3RUYWcmPTIwNDcsYjtudWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5lZmZlY3RUYWd8PTIwNDgpfWI9Vi5zaWJsaW5nO2lmKG51bGwhPT1iKXJldHVybiBiO1Y9YX13aGlsZShudWxsIT09Vik7WD09PWFqJiYoWD1maik7cmV0dXJuIG51bGx9ZnVuY3Rpb24gTGooYSl7dmFyIGI9YS5leHBpcmF0aW9uVGltZTthPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtyZXR1cm4gYj5hP2I6YX1mdW5jdGlvbiBLaihhKXt2YXIgYj1XZigpO1lmKDk5LFdqLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFdqKGEsYil7RWooKTtpZigoVCYoWml8JGkpKSE9PVMpdGhyb3cgdChFcnJvcigzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yayxkPWEuZmluaXNoZWRFeHBpcmF0aW9uVGltZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgdChFcnJvcigxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wO2EuY2FsbGJhY2tQcmlvcml0eT05MDthLm5leHRLbm93blBlbmRpbmdMZXZlbD0wO3ZhciBlPUxqKGMpO2EuZmlyc3RQZW5kaW5nVGltZT1lO2Q8PWEubGFzdFN1c3BlbmRlZFRpbWU/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmQ8PWEuZmlyc3RTdXNwZW5kZWRUaW1lJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9ZC0xKTtkPD1hLmxhc3RQaW5nZWRUaW1lJiZcbihhLmxhc3RQaW5nZWRUaW1lPTApO2Q8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCk7YT09PVUmJihWPVU9bnVsbCxXPTApOzE8Yy5lZmZlY3RUYWc/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxlPWMuZmlyc3RFZmZlY3QpOmU9YzplPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWUpe3ZhciBmPVQ7VHw9JGk7WGkuY3VycmVudD1udWxsO2RlPURkO3ZhciBnPVlkKCk7aWYoWmQoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpdmFyIGg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2g9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBrPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpO2lmKGsmJjAhPT1rLnJhbmdlQ291bnQpe2g9ay5hbmNob3JOb2RlO3ZhciBsPWsuYW5jaG9yT2Zmc2V0LG09ay5mb2N1c05vZGU7az1rLmZvY3VzT2Zmc2V0O1xudHJ5e2gubm9kZVR5cGUsbS5ub2RlVHlwZX1jYXRjaChGYil7aD1udWxsO2JyZWFrIGF9dmFyIEE9MCx3PS0xLEw9LTEsd2I9MCxNPTAscT1nLHk9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB6Ozspe3EhPT1ofHwwIT09bCYmMyE9PXEubm9kZVR5cGV8fCh3PUErbCk7cSE9PW18fDAhPT1rJiYzIT09cS5ub2RlVHlwZXx8KEw9QStrKTszPT09cS5ub2RlVHlwZSYmKEErPXEubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh6PXEuZmlyc3RDaGlsZCkpYnJlYWs7eT1xO3E9en1mb3IoOzspe2lmKHE9PT1nKWJyZWFrIGI7eT09PWgmJisrd2I9PT1sJiYodz1BKTt5PT09bSYmKytNPT09ayYmKEw9QSk7aWYobnVsbCE9PSh6PXEubmV4dFNpYmxpbmcpKWJyZWFrO3E9eTt5PXEucGFyZW50Tm9kZX1xPXp9aD0tMT09PXd8fC0xPT09TD9udWxsOntzdGFydDp3LGVuZDpMfX1lbHNlIGg9bnVsbH1oPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9bnVsbDtlZT17Zm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtcbkRkPSExO1k9ZTtkbyB0cnl7WGooKX1jYXRjaChGYil7aWYobnVsbD09PVkpdGhyb3cgdChFcnJvcigzMzApKTt4aShZLEZiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1lO2RvIHRyeXtmb3IoZz1hLGg9YjtudWxsIT09WTspe3ZhciBwPVkuZWZmZWN0VGFnO3AmMTYmJlRiKFkuc3RhdGVOb2RlLFwiXCIpO2lmKHAmMTI4KXt2YXIgdT1ZLmFsdGVybmF0ZTtpZihudWxsIT09dSl7dmFyIHY9dS5yZWY7bnVsbCE9PXYmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdj92KG51bGwpOnYuY3VycmVudD1udWxsKX19c3dpdGNoKHAmKEV8MTJ8QWMpKXtjYXNlIEU6S2koWSk7WS5lZmZlY3RUYWcmPX5FO2JyZWFrO2Nhc2UgNjpLaShZKTtZLmVmZmVjdFRhZyY9fkU7TGkoWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSBBYzpZLmVmZmVjdFRhZyY9fkFjO2JyZWFrO2Nhc2UgMTAyODpZLmVmZmVjdFRhZyY9fkFjO0xpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgNDpMaShZLmFsdGVybmF0ZSxcblkpO2JyZWFrO2Nhc2UgODpsPVksSGkoZyxsLGgpLElpKGwpfVk9WS5uZXh0RWZmZWN0fX1jYXRjaChGYil7aWYobnVsbD09PVkpdGhyb3cgdChFcnJvcigzMzApKTt4aShZLEZiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7dj1lZTt1PVlkKCk7cD12LmZvY3VzZWRFbGVtO2g9di5zZWxlY3Rpb25SYW5nZTtpZih1IT09cCYmcCYmcC5vd25lckRvY3VtZW50JiZYZChwLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHApKXtudWxsIT09aCYmWmQocCkmJih1PWguc3RhcnQsdj1oLmVuZCx2b2lkIDA9PT12JiYodj11KSxcInNlbGVjdGlvblN0YXJ0XCJpbiBwPyhwLnNlbGVjdGlvblN0YXJ0PXUscC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odixwLnZhbHVlLmxlbmd0aCkpOih2PSh1PXAub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZ1LmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksbD1wLnRleHRDb250ZW50Lmxlbmd0aCxcbmc9TWF0aC5taW4oaC5zdGFydCxsKSxoPXZvaWQgMD09PWguZW5kP2c6TWF0aC5taW4oaC5lbmQsbCksIXYuZXh0ZW5kJiZnPmgmJihsPWgsaD1nLGc9bCksbD1XZChwLGcpLG09V2QocCxoKSxsJiZtJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09bC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWwub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PW0ubm9kZXx8di5mb2N1c09mZnNldCE9PW0ub2Zmc2V0KSYmKHU9dS5jcmVhdGVSYW5nZSgpLHUuc2V0U3RhcnQobC5ub2RlLGwub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLGc+aD8odi5hZGRSYW5nZSh1KSx2LmV4dGVuZChtLm5vZGUsbS5vZmZzZXQpKToodS5zZXRFbmQobS5ub2RlLG0ub2Zmc2V0KSx2LmFkZFJhbmdlKHUpKSkpKSk7dT1bXTtmb3Iodj1wO3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmdS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09XG50eXBlb2YgcC5mb2N1cyYmcC5mb2N1cygpO2ZvcihwPTA7cDx1Lmxlbmd0aDtwKyspdj11W3BdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWVlPW51bGw7RGQ9ISFkZTtkZT1udWxsO2EuY3VycmVudD1jO1k9ZTtkbyB0cnl7Zm9yKHA9ZDtudWxsIT09WTspe3ZhciBCaD1ZLmVmZmVjdFRhZztpZihCaCYzNil7dmFyIGNjPVkuYWx0ZXJuYXRlO3U9WTt2PXA7c3dpdGNoKHUudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OkVpKDE2LDMyLHUpO2JyZWFrO2Nhc2UgMTp2YXIgZWQ9dS5zdGF0ZU5vZGU7aWYodS5lZmZlY3RUYWcmNClpZihudWxsPT09Y2MpZWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBaaj11LmVsZW1lbnRUeXBlPT09dS50eXBlP2NjLm1lbW9pemVkUHJvcHM6Y2codS50eXBlLGNjLm1lbW9pemVkUHJvcHMpO2VkLmNvbXBvbmVudERpZFVwZGF0ZShaaixjYy5tZW1vaXplZFN0YXRlLGVkLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgQ2g9XG51LnVwZGF0ZVF1ZXVlO251bGwhPT1DaCYmQWcodSxDaCxlZCx2KTticmVhaztjYXNlIDM6dmFyIERoPXUudXBkYXRlUXVldWU7aWYobnVsbCE9PURoKXtnPW51bGw7aWYobnVsbCE9PXUuY2hpbGQpc3dpdGNoKHUuY2hpbGQudGFnKXtjYXNlIDU6Zz11LmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Zz11LmNoaWxkLnN0YXRlTm9kZX1BZyh1LERoLGcsdil9YnJlYWs7Y2FzZSA1OnZhciBwaz11LnN0YXRlTm9kZTtudWxsPT09Y2MmJnUuZWZmZWN0VGFnJjQmJih2PXBrLGZlKHUudHlwZSx1Lm1lbW9pemVkUHJvcHMpJiZ2LmZvY3VzKCkpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT11Lm1lbW9pemVkU3RhdGUpe3ZhciB6aT11LmFsdGVybmF0ZTtpZihudWxsIT09emkpe3ZhciBBaT16aS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1BaSl7dmFyIEJpPUFpLmRlaHlkcmF0ZWQ7bnVsbCE9PUJpJiZ6YyhCaSl9fX1icmVhaztcbmNhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6YnJlYWs7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDE2MykpO319aWYoQmgmMTI4KXt1PVk7dmFyIHlkPXUucmVmO2lmKG51bGwhPT15ZCl7dmFyIENpPXUuc3RhdGVOb2RlO3N3aXRjaCh1LnRhZyl7Y2FzZSA1OnZhciB5Zj1DaTticmVhaztkZWZhdWx0OnlmPUNpfVwiZnVuY3Rpb25cIj09PXR5cGVvZiB5ZD95ZCh5Zik6eWQuY3VycmVudD15Zn19WT1ZLm5leHRFZmZlY3R9fWNhdGNoKEZiKXtpZihudWxsPT09WSl0aHJvdyB0KEVycm9yKDMzMCkpO3hpKFksRmIpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPW51bGw7UWYoKTtUPWZ9ZWxzZSBhLmN1cnJlbnQ9YztpZihvailvaj0hMSxwaj1hLHFqPWI7ZWxzZSBmb3IoWT1lO251bGwhPT1ZOyliPVkubmV4dEVmZmVjdCxZLm5leHRFZmZlY3Q9bnVsbCxZPWI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7MD09PWImJihVaT1udWxsKTsxMDczNzQxODIzPT09Yj9hPT09dGo/c2orKzpcbihzaj0wLHRqPWEpOnNqPTA7XCJmdW5jdGlvblwiPT09dHlwZW9mIFlqJiZZaihjLnN0YXRlTm9kZSxkKTtaKGEpO2lmKFJpKXRocm93IFJpPSExLGE9U2ksU2k9bnVsbCxhO2lmKChUJllpKSE9PVMpcmV0dXJuIG51bGw7YmcoKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBYaigpe2Zvcig7bnVsbCE9PVk7KXt2YXIgYT1ZLmVmZmVjdFRhZzsoYSYyNTYpIT09RCYmRGkoWS5hbHRlcm5hdGUsWSk7KGEmNTEyKT09PUR8fG9qfHwob2o9ITAsWmYoOTcsZnVuY3Rpb24oKXtFaigpO3JldHVybiBudWxsfSkpO1k9WS5uZXh0RWZmZWN0fX1mdW5jdGlvbiBFaigpe2lmKDkwIT09cWope3ZhciBhPTk3PHFqPzk3OnFqO3FqPTkwO3JldHVybiBZZihhLGFrKX19XG5mdW5jdGlvbiBhaygpe2lmKG51bGw9PT1wailyZXR1cm4hMTt2YXIgYT1wajtwaj1udWxsO2lmKChUJihaaXwkaSkpIT09Uyl0aHJvdyB0KEVycm9yKDMzMSkpO3ZhciBiPVQ7VHw9JGk7Zm9yKGE9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1hOyl7dHJ5e3ZhciBjPWE7aWYoKGMuZWZmZWN0VGFnJjUxMikhPT1EKXN3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpFaSgxMjgsMCxjKSxFaSgwLDY0LGMpfX1jYXRjaChkKXtpZihudWxsPT09YSl0aHJvdyB0KEVycm9yKDMzMCkpO3hpKGEsZCl9Yz1hLm5leHRFZmZlY3Q7YS5uZXh0RWZmZWN0PW51bGw7YT1jfVQ9YjtiZygpO3JldHVybiEwfWZ1bmN0aW9uIGJrKGEsYixjKXtiPXRpKGMsYik7Yj1RaShhLGIsMTA3Mzc0MTgyMyk7dGcoYSxiKTthPXdqKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlooYSl9XG5mdW5jdGlvbiB4aShhLGIpe2lmKDM9PT1hLnRhZyliayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2JrKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVVpfHwhVWkuaGFzKGQpKSl7YT10aShiLGEpO2E9VGkoYyxhLDEwNzM3NDE4MjMpO3RnKGMsYSk7Yz13aihjLDEwNzM3NDE4MjMpO251bGwhPT1jJiZaKGMpO2JyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIFNqKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7VT09PWEmJlc9PT1jP1g9PT1lanx8WD09PWRqJiYxMDczNzQxODIzPT09aWomJlZmKCktTWk8bmo/RmooYSxXKTptaj0hMDpCaihhLGMpJiYoYj1hLmxhc3RQaW5nZWRUaW1lLDAhPT1iJiZiPGN8fChhLmxhc3RQaW5nZWRUaW1lPWMsYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPT09YyYmKGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wLGEuZmluaXNoZWRXb3JrPW51bGwpLFooYSkpKX1mdW5jdGlvbiBPaShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTE7MT09PWImJihiPUZnKCksYj1HZyhiLGEsbnVsbCkpO2E9d2ooYSxiKTtudWxsIT09YSYmWihhKX12YXIgVmo7XG5Waj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8Sy5jdXJyZW50KW1nPSEwO2Vsc2V7aWYoZDxjKXttZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpoaShiKTtYaCgpO2JyZWFrO2Nhc2UgNTplaChiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOk4oYi50eXBlKSYmQmYoYik7YnJlYWs7Y2FzZSA0OmNoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDppZyhiLGIubWVtb2l6ZWRQcm9wcy52YWx1ZSk7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwIT09ZCYmZD49YylyZXR1cm4gamkoYSxiLGMpO0koTyxPLmN1cnJlbnQmXG4xLGIpO2I9JGgoYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH1JKE8sTy5jdXJyZW50JjEsYik7YnJlYWs7Y2FzZSAxOTpkPWIuY2hpbGRFeHBpcmF0aW9uVGltZT49YztpZigoYS5lZmZlY3RUYWcmNjQpIT09RCl7aWYoZClyZXR1cm4gbGkoYSxiLGMpO2IuZWZmZWN0VGFnfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwpO0koTyxPLmN1cnJlbnQsYik7aWYoIWQpcmV0dXJuIG51bGx9cmV0dXJuICRoKGEsYixjKX1tZz0hMX19ZWxzZSBtZz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PUUpO2E9Yi5wZW5kaW5nUHJvcHM7ZT12ZihiLEouY3VycmVudCk7bGcoYixjKTtlPXdoKG51bGwsYixkLGEsZSxjKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtBaCgpO2lmKE4oZCkpe3ZhciBmPSEwO0JmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZFZyhiLGQsZyxhKTtlLnVwZGF0ZXI9SWc7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9YjtNZyhiLGQsYSxjKTtiPWdpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLFIobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD1FKTthPWIucGVuZGluZ1Byb3BzO1VhKGUpO2lmKDEhPT1lLl9zdGF0dXMpdGhyb3cgZS5fcmVzdWx0O1xuZT1lLl9yZXN1bHQ7Yi50eXBlPWU7Zj1iLnRhZz1jayhlKTthPWNnKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPWRpKG51bGwsYixlLGEsYyk7YnJlYWs7Y2FzZSAxOmI9ZmkobnVsbCxiLGUsYSxjKTticmVhaztjYXNlIDExOmI9WmgobnVsbCxiLGUsYSxjKTticmVhaztjYXNlIDE0OmI9YWkobnVsbCxiLGUsY2coZS50eXBlLGEpLGQsYyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDMwNiksZSxcIlwiKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpjZyhkLGUpLGRpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpjZyhkLGUpLGZpKGEsYixkLGUsYyk7Y2FzZSAzOmhpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09ZCl0aHJvdyB0KEVycm9yKDI4MikpO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50OlxubnVsbDt4ZyhiLGQsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKVhoKCksYj0kaChhLGIsYyk7ZWxzZXtpZihlPWIuc3RhdGVOb2RlLmh5ZHJhdGUpUGg9amUoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxPaD1iLGU9UWg9ITA7aWYoZSlmb3IoYz1YZyhiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5lZmZlY3RUYWc9Yy5lZmZlY3RUYWcmfkV8QWMsYz1jLnNpYmxpbmc7ZWxzZSBSKGEsYixkLGMpLFhoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZWgoYiksbnVsbD09PWEmJlVoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sZ2UoZCxlKT9nPW51bGw6bnVsbCE9PWYmJmdlKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLGVpKGEsYiksYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1cbmIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFIoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJlVoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gamkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gY2goYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9V2coYixudWxsLGQsYyk6UihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmNnKGQsZSksWmgoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtcbmU9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO2lnKGIsZik7aWYobnVsbCE9PWcpe3ZhciBoPWcudmFsdWU7Zj1mZihoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDA7aWYoMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhSy5jdXJyZW50KXtiPSRoKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD1yZyhjLG51bGwpLGwudGFnPTIsdGcoaCxsKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1cbmMpO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJmwuZXhwaXJhdGlvblRpbWU8YyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7a2coaC5yZXR1cm4sYyk7ay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfX1SKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLGxnKGIsYyksZT1uZyhlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUihhLGIsZCxjKSxiLmNoaWxkO1xuY2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1jZyhlLGIucGVuZGluZ1Byb3BzKSxmPWNnKGUudHlwZSxmKSxhaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gY2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmNnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PUUpLGIudGFnPTEsTihkKT8oYT0hMCxCZihiKSk6YT0hMSxsZyhiLGMpLEtnKGIsZCxlLGMpLE1nKGIsZCxlLGMpLGdpKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gbGkoYSxiLGMpfXRocm93IHQoRXJyb3IoMTU2KSxiLnRhZyk7fTt2YXIgWWo9bnVsbCxHaT1udWxsO1xuZnVuY3Rpb24gZGsoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7WWo9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclJvb3QoYyxhLHZvaWQgMCw2ND09PShhLmN1cnJlbnQuZWZmZWN0VGFnJjY0KSl9Y2F0Y2goZSl7fX07R2k9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclVubW91bnQoYyxhKX1jYXRjaChlKXt9fX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBlayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPUQ7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIFNoKGEsYixjLGQpe3JldHVybiBuZXcgZWsoYSxiLGMsZCl9XG5mdW5jdGlvbiBiaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIGNrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09TmEpcmV0dXJuIDExO2lmKGE9PT1RYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBSZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPVNoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPUQsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2V4cGlyYXRpb25UaW1lOmIuZXhwaXJhdGlvblRpbWUsXG5maXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHQscmVzcG9uZGVyczpiLnJlc3BvbmRlcnN9O2Muc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVGcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWJpKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIEhhOnJldHVybiBWZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIE1hOmc9ODtlfD03O2JyZWFrO2Nhc2UgSWE6Zz04O2V8PTE7YnJlYWs7Y2FzZSBKYTpyZXR1cm4gYT1TaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPUphLGEudHlwZT1KYSxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIE9hOnJldHVybiBhPVNoKDEzLGMsYixlKSxhLnR5cGU9T2EsYS5lbGVtZW50VHlwZT1PYSxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIFBhOnJldHVybiBhPVNoKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPVBhLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBLYTpnPVxuMTA7YnJlYWsgYTtjYXNlIExhOmc9OTticmVhayBhO2Nhc2UgTmE6Zz0xMTticmVhayBhO2Nhc2UgUWE6Zz0xNDticmVhayBhO2Nhc2UgUmE6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyB0KEVycm9yKDEzMCksbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpO31iPVNoKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gVmcoYSxiLGMsZCl7YT1TaCg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gU2coYSxiLGMpe2E9U2goNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gVWcoYSxiLGMpe2I9U2goNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBmayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmN1cnJlbnQ9bnVsbDt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLnBpbmdDYWNoZT10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3RoaXMuZmluaXNoZWRXb3JrPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5maXJzdEJhdGNoPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTkwO3RoaXMubGFzdEV4cGlyZWRUaW1lPXRoaXMubGFzdFBpbmdlZFRpbWU9dGhpcy5uZXh0S25vd25QZW5kaW5nTGV2ZWw9dGhpcy5sYXN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9MH1cbmZ1bmN0aW9uIEJqKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7YT1hLmxhc3RTdXNwZW5kZWRUaW1lO3JldHVybiAwIT09YyYmYz49YiYmYTw9Yn1mdW5jdGlvbiB5aihhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXN0U3VzcGVuZGVkVGltZTtjPGImJihhLmZpcnN0U3VzcGVuZGVkVGltZT1iKTtpZihkPmJ8fDA9PT1jKWEubGFzdFN1c3BlbmRlZFRpbWU9YjtiPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtiPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApfVxuZnVuY3Rpb24gemooYSxiKXtiPmEuZmlyc3RQZW5kaW5nVGltZSYmKGEuZmlyc3RQZW5kaW5nVGltZT1iKTt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTswIT09YyYmKGI+PWM/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmI+PWEubGFzdFN1c3BlbmRlZFRpbWUmJihhLmxhc3RTdXNwZW5kZWRUaW1lPWIrMSksYj5hLm5leHRLbm93blBlbmRpbmdMZXZlbCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPWIpKX1mdW5jdGlvbiBEaihhLGIpe3ZhciBjPWEubGFzdEV4cGlyZWRUaW1lO2lmKDA9PT1jfHxjPmIpYS5sYXN0RXhwaXJlZFRpbWU9Yn1cbmZ1bmN0aW9uIGdrKGEsYixjLGQsZSxmKXt2YXIgZz1iLmN1cnJlbnQ7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOntpZihCYyhjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyB0KEVycm9yKDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKE4oaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyB0KEVycm9yKDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihOKGspKXtjPUFmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPXRmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9ZjtlPXJnKGQsZSk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJlxuKGUuY2FsbGJhY2s9Yik7dGcoZyxlKTtIZyhnLGQpO3JldHVybiBkfWZ1bmN0aW9uIGhrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUZnKCksZz1DZy5zdXNwZW5zZTtlPUdnKGYsZSxnKTtyZXR1cm4gZ2soYSxiLGMsZSxnLGQpfWZ1bmN0aW9uIGlrKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gamsoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpHYSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbllhPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6RGIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPXJlKGQpO2lmKCFlKXRocm93IHQoRXJyb3IoOTApKTt6YihkKTtEYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkpiKGEsISFjLm11bHRpcGxlLGIsITEpfX07XG5mdW5jdGlvbiBrayhhKXt2YXIgYj0xMDczNzQxODIxLTI1KigoKDEwNzM3NDE4MjEtRmcoKSs1MDApLzI1fDApKzEpO2I8PXZqJiYtLWI7dGhpcy5fZXhwaXJhdGlvblRpbWU9dmo9Yjt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfWtrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7aWYoIXRoaXMuX2RlZmVyKXRocm93IHQoRXJyb3IoMjUwKSk7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBsaztnayhhLGIsbnVsbCxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtcbmtrLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbmtrLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7aWYoIXRoaXMuX2RlZmVyfHxudWxsPT09Yil0aHJvdyB0KEVycm9yKDI1MSkpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O2lmKG51bGw9PT1kKXRocm93IHQoRXJyb3IoMjUxKSk7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtiPWM7aWYoKFQmKFppfCRpKSkhPT1TKXRocm93IHQoRXJyb3IoMjUzKSk7RGooYSxiKTtaKGEpO2JnKCk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9bnVsbDtcbmI9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PW51bGwsdGhpcy5fZGVmZXI9ITF9O2trLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBsaygpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfWxrLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5say5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl0aHJvdyB0KEVycm9yKDE5MSksYyk7YygpfX19O2Z1bmN0aW9uIG1rKGEsYixjKXtjPW51bGwhPWMmJiEwPT09Yy5oeWRyYXRlO3ZhciBkPW5ldyBmayhhLGIsYyksZT1TaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7ZC5jdXJyZW50PWU7ZS5zdGF0ZU5vZGU9ZDthW29lXT1kLmN1cnJlbnQ7YyYmMCE9PWImJm5jKDk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50KTtyZXR1cm4gZH1mdW5jdGlvbiBuayhhLGIsYyl7dGhpcy5faW50ZXJuYWxSb290PW1rKGEsYixjKX1mdW5jdGlvbiBvayhhLGIpe3RoaXMuX2ludGVybmFsUm9vdD1tayhhLDIsYil9XG5vay5wcm90b3R5cGUucmVuZGVyPW5rLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgbGs7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO2hrKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07b2sucHJvdG90eXBlLnVubW91bnQ9bmsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IGxrO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtoayhudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O1xub2sucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IGtrKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU+PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gcWsoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWRiPVBqO2ViPVFqO2ZiPU5qO2diPWZ1bmN0aW9uKGEsYil7dmFyIGM9VDtUfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1Q9YyxUPT09UyYmYmcoKX19O1xuZnVuY3Rpb24gcmsoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBuayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIHNrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9aWsoZyk7aC5jYWxsKGEpfX1oayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPXJrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWlrKGcpO2suY2FsbChhKX19UmooZnVuY3Rpb24oKXtoayhiLGcsYSxlKX0pfXJldHVybiBpayhnKX1mdW5jdGlvbiB0ayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFxayhiKSl0aHJvdyB0KEVycm9yKDIwMCkpO3JldHVybiBqayhhLGIsbnVsbCxjKX1cbnZhciB3az17Y3JlYXRlUG9ydGFsOnRrLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpYT1udWxsO2Vsc2UgaWYoMSE9PWEubm9kZVR5cGUpe3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgdChFcnJvcigxODgpKTt0aHJvdyB0KEVycm9yKDI2OCksT2JqZWN0LmtleXMoYSkpO31hPUVjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX1yZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7aWYoIXFrKGIpKXRocm93IHQoRXJyb3IoMjAwKSk7cmV0dXJuIHNrKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe2lmKCFxayhiKSl0aHJvdyB0KEVycm9yKDIwMCkpO3JldHVybiBzayhudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXFrKGMpKXRocm93IHQoRXJyb3IoMjAwKSk7XG5pZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXIpdGhyb3cgdChFcnJvcigzOCkpO3JldHVybiBzayhhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtpZighcWsoYSkpdGhyb3cgdChFcnJvcig0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFJqKGZ1bmN0aW9uKCl7c2sobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gdGsuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOlBqLHVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbihhLGIsYyxkKXtOaigpO3JldHVybiBRaihhLGIsYyxkKX0sdW5zdGFibGVfZGlzY3JldGVVcGRhdGVzOlFqLHVuc3RhYmxlX2ZsdXNoRGlzY3JldGVVcGRhdGVzOk5qLGZsdXNoU3luYzpmdW5jdGlvbihhLFxuYil7aWYoKFQmKFppfCRpKSkhPT1TKXRocm93IHQoRXJyb3IoMTg3KSk7dmFyIGM9VDtUfD0xO3RyeXtyZXR1cm4gWWYoOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7VD1jLGJnKCl9fSx1bnN0YWJsZV9jcmVhdGVSb290OnVrLHVuc3RhYmxlX2NyZWF0ZVN5bmNSb290OnZrLHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1UO1R8PTE7dHJ5e1lmKDk5LGEpfWZpbmFsbHl7VD1iLFQ9PT1TJiZiZygpfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50czpbcGUscWUscmUsQmEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lLGZhLExjLGZ1bmN0aW9uKGEpe3hhKGEsS2MpfSxiYixjYixIZCxBYSxFaix7Y3VycmVudDohMX1dfX07ZnVuY3Rpb24gdWsoYSxiKXtpZighcWsoYSkpdGhyb3cgdChFcnJvcigyOTkpLFwidW5zdGFibGVfY3JlYXRlUm9vdFwiKTtyZXR1cm4gbmV3IG9rKGEsYil9XG5mdW5jdGlvbiB2ayhhLGIpe2lmKCFxayhhKSl0aHJvdyB0KEVycm9yKDI5OSksXCJ1bnN0YWJsZV9jcmVhdGVSb290XCIpO3JldHVybiBuZXcgbmsoYSwxLGIpfVxuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIGRrKG4oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpEYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9RWMoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpDZCxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjEwLjFcIixcbnJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO3ZhciB4az17ZGVmYXVsdDp3a30seWs9eGsmJndrfHx4azttb2R1bGUuZXhwb3J0cz15ay5kZWZhdWx0fHx5aztcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTYuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBmLGcsaCxrLGw7XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgcD1udWxsLHE9bnVsbCx0PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXApdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7cCghMCxhKTtwPW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh0LDApLGI7fX0sdT1EYXRlLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCktdX07Zj1mdW5jdGlvbihhKXtudWxsIT09cD9zZXRUaW1lb3V0KGYsMCxhKToocD1hLHNldFRpbWVvdXQodCwwKSl9O2c9ZnVuY3Rpb24oYSxiKXtxPXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChxKX07az1mdW5jdGlvbigpe3JldHVybiExfTtsPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHc9d2luZG93LnBlcmZvcm1hbmNlLHg9d2luZG93LkRhdGUsXG55PXdpbmRvdy5zZXRUaW1lb3V0LHo9d2luZG93LmNsZWFyVGltZW91dCxBPXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsQj13aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlJiYoXCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIiksXCJmdW5jdGlvblwiIT09dHlwZW9mIEImJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiB3JiZcblwiZnVuY3Rpb25cIj09PXR5cGVvZiB3Lm5vdylleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB3Lm5vdygpfTtlbHNle3ZhciBDPXgubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKS1DfX12YXIgRD0hMSxFPW51bGwsRj0tMSxHPTUsSD0wO2s9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49SH07bD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZXJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHVuc3VwcG9ydGVkXCIpOkc9MDxhP01hdGguZmxvb3IoMUUzL2EpOjMzLjMzfTt2YXIgST1uZXcgTWVzc2FnZUNoYW5uZWwsSj1JLnBvcnQyO0kucG9ydDEub25tZXNzYWdlPVxuZnVuY3Rpb24oKXtpZihudWxsIT09RSl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtIPWErRzt0cnl7RSghMCxhKT9KLnBvc3RNZXNzYWdlKG51bGwpOihEPSExLEU9bnVsbCl9Y2F0Y2goYil7dGhyb3cgSi5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBEPSExfTtmPWZ1bmN0aW9uKGEpe0U9YTtEfHwoRD0hMCxKLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0Y9eShmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eihGKTtGPS0xfX1mdW5jdGlvbiBLKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1NYXRoLmZsb29yKChjLTEpLzIpLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEwoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIE0oYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIE4oYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+TChuLGMpKXZvaWQgMCE9PXImJjA+TChyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+TChyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTChhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTz1bXSxQPVtdLFE9MSxSPW51bGwsUz0zLFQ9ITEsVT0hMSxWPSExO1xuZnVuY3Rpb24gVyhhKXtmb3IodmFyIGI9TShQKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKU4oUCk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlOKFApLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSyhPLGIpO2Vsc2UgYnJlYWs7Yj1NKFApfX1mdW5jdGlvbiBYKGEpe1Y9ITE7VyhhKTtpZighVSlpZihudWxsIT09TShPKSlVPSEwLGYoWSk7ZWxzZXt2YXIgYj1NKFApO251bGwhPT1iJiZnKFgsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gWShhLGIpe1U9ITE7ViYmKFY9ITEsaCgpKTtUPSEwO3ZhciBjPVM7dHJ5e1coYik7Zm9yKFI9TShPKTtudWxsIT09UiYmKCEoUi5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWsoKSk7KXt2YXIgZD1SLmNhbGxiYWNrO2lmKG51bGwhPT1kKXtSLmNhbGxiYWNrPW51bGw7Uz1SLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChSLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/Ui5jYWxsYmFjaz1lOlI9PT1NKE8pJiZOKE8pO1coYil9ZWxzZSBOKE8pO1I9TShPKX1pZihudWxsIT09Uil2YXIgbT0hMDtlbHNle3ZhciBuPU0oUCk7bnVsbCE9PW4mJmcoWCxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7Uj1udWxsLFM9YyxUPSExfX1cbmZ1bmN0aW9uIFooYSl7c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4tMTtjYXNlIDI6cmV0dXJuIDI1MDtjYXNlIDU6cmV0dXJuIDEwNzM3NDE4MjM7Y2FzZSA0OnJldHVybiAxRTQ7ZGVmYXVsdDpyZXR1cm4gNUUzfX12YXIgYWE9bDtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVM7Uz1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Uz1jfX07XG5leHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFMpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVN9dmFyIGM9UztTPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtTPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgZT1jLmRlbGF5O2U9XCJudW1iZXJcIj09PXR5cGVvZiBlJiYwPGU/ZCtlOmQ7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WihhKX1lbHNlIGM9WihhKSxlPWQ7Yz1lK2M7YT17aWQ6USsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTplLGV4cGlyYXRpb25UaW1lOmMsc29ydEluZGV4Oi0xfTtlPmQ/KGEuc29ydEluZGV4PWUsSyhQLGEpLG51bGw9PT1NKE8pJiZhPT09TShQKSYmKFY/aCgpOlY9ITAsZyhYLGUtZCkpKTooYS5zb3J0SW5kZXg9YyxLKE8sYSksVXx8VHx8KFU9ITAsZihZKSkpO3JldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1TO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVM7Uz1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtTPWN9fX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBTfTtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtXKGEpO3ZhciBiPU0oTyk7cmV0dXJuIGIhPT1SJiZudWxsIT09UiYmbnVsbCE9PWImJm51bGwhPT1iLmNhbGxiYWNrJiZiLnN0YXJ0VGltZTw9YSYmYi5leHBpcmF0aW9uVGltZTxSLmV4cGlyYXRpb25UaW1lfHxrKCl9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWFhO2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtVfHxUfHwoVT0hMCxmKFkpKX07XG5leHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIE0oTyl9O2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7XG4iLCJpbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQsIENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuLy8gaW1wb3J0IHsgb2JzZXJ2YWJsZSwgYWN0aW9uIH0gZnJvbSBcIm1vYnhcIjtcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSBcIm1vYngtcmVhY3RcIjtcbmltcG9ydCBTb2NpYWxCdXR0b24gZnJvbSBcIi4vU29jaWFsQnV0dG9uXCJcbi8vIGltcG9ydCBUZXJtaW5hbCBmcm9tIFwiLi9UZXJtaW5hbFwiXG5pbXBvcnQgUGFydGljbGVzIGZyb20gJ3JlYWN0LXBhcnRpY2xlcy1qcyc7XG5pbXBvcnQgeyBwYXJ0aWNsZXNDb25maWcsIHBhcnRpY2xlc1N0eWxlIH0gZnJvbSAnLi4vc3R5bGVzL3BhcnRpY2xlcy5qcydcblxuQG9ic2VydmVyXG5jbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuICg8RnJhZ21lbnQ+XG4gICAgICA8UGFydGljbGVzXG4gICAgICAgIHBhcmFtcz17cGFydGljbGVzQ29uZmlnfVxuICAgICAgICBzdHlsZT17cGFydGljbGVzU3R5bGV9IC8+XG4gICAgICA8ZGl2IGlkPVwic2ItcGFuZVwiPlxuICAgICAgICA8ZGl2IGlkPVwic2JcIj5TYW11ZWwgQkVOQUlTPC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9XCJzYi10aXRsZVwiPklUIEVuZ2luZWVyPC9kaXY+XG4gICAgICAgIHsvKiA8VGVybWluYWwgLz4gKi99XG4gICAgICAgIDxkaXYgaWQ9XCJzYi1zb2NpYWxcIj5cbiAgICAgICAgICA8U29jaWFsQnV0dG9uIGxpbms9XCJodHRwczovL2dpdGh1Yi5jb20vU2FtYjEwMlwiIGlkPVwiZ2l0aHViXCIgLz5cbiAgICAgICAgICA8U29jaWFsQnV0dG9uIGxpbms9XCJodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3VzZXJzLzc3NTc1OTAvc2FtYjEwMlwiIGlkPVwic3RhY2stb3ZlcmZsb3dcIiAvPlxuICAgICAgICAgIDxTb2NpYWxCdXR0b24gbGluaz1cImh0dHBzOi8vZnIubGlua2VkaW4uY29tL2luL3NhbXVlbC1iZW5hw69zLWJiMTAxOGE1XCIgaWQ9XCJsaW5rZWRpblwiIC8+XG4gICAgICAgICAgPFNvY2lhbEJ1dHRvbiBsaW5rPVwiaHR0cHM6Ly93d3cucm9vdC1tZS5vcmcvU2FtYjEwMVwiIGlkPVwicm9vdC1tZVwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+PC9GcmFnbWVudD5cbiAgICApO1xuICB9XG5cbiAgLy8gQGFjdGlvblxuICAvLyBoYW5kbGVJbnB1dENoYW5nZSA9IGUgPT4ge1xuICAvLyAgIHRoaXMubmV3VG9kb1RpdGxlID0gZS50YXJnZXQudmFsdWU7XG4gIC8vIH07XG5cbiAgLy8gQGFjdGlvblxuICAvLyBoYW5kbGVGb3JtU3VibWl0ID0gZSA9PiB7XG4gIC8vICAgdGhpcy5wcm9wcy5zdG9yZS5hZGRUb2RvKHRoaXMubmV3VG9kb1RpdGxlKTtcbiAgLy8gICB0aGlzLm5ld1RvZG9UaXRsZSA9IFwiXCI7XG4gIC8vICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAvLyB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCIvKiogQGxpY2Vuc2UgbW9ieC1yZWFjdCB2NS40LjRcbiAqIGluZGV4Lm1vZHVsZS5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNSBNaWNoZWwgV2VzdHN0cmF0ZS5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IHsgaXNPYnNlcnZhYmxlQXJyYXksIGlzT2JzZXJ2YWJsZU9iamVjdCwgaXNPYnNlcnZhYmxlTWFwLCB1bnRyYWNrZWQsIGNyZWF0ZUF0b20sIFJlYWN0aW9uLCBfYWxsb3dTdGF0ZUNoYW5nZXMsICRtb2J4LCBzcHksIGNvbmZpZ3VyZSwgZ2V0RGVidWdOYW1lIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQgUmVhY3RfX2RlZmF1bHQsIHsgQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50LCBQdXJlQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBDaGlsZHJlbiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpbmRET01Ob2RlLCB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyB9IGZyb20gJ3JlYWN0LWRvbSc7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG4vLyBUaGVzZSBmdW5jdGlvbnMgY2FuIGJlIHN0dWJiZWQgb3V0IGluIHNwZWNpZmljIGVudmlyb25tZW50c1xuXG5mdW5jdGlvbiB1bndyYXBFeHBvcnRzICh4KSB7XG5cdHJldHVybiB4ICYmIHguX19lc01vZHVsZSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgJ2RlZmF1bHQnKSA/IHguZGVmYXVsdCA6IHg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG52YXIgcmVhY3RJc19wcm9kdWN0aW9uX21pbiA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xudmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTY7ZnVuY3Rpb24gdShhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgcT1hLiQkdHlwZW9mO3N3aXRjaChxKXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHF9fWNhc2UgZDpyZXR1cm4gcX19fWZ1bmN0aW9uIHYoYSl7cmV0dXJuIHUoYSk9PT1tfWV4cG9ydHMudHlwZU9mPXU7ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlBvcnRhbD1kO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVybiBcInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW4pfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpfHx1KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXY7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdShhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHUoYSk9PT1ofTtcbmV4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVybiBcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHUoYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHUoYSk9PT1lfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHUoYSk9PT1nfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB1KGEpPT09ZH07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHUoYSk9PT1mfTtcbn0pO1xuXG51bndyYXBFeHBvcnRzKHJlYWN0SXNfcHJvZHVjdGlvbl9taW4pO1xudmFyIHJlYWN0SXNfcHJvZHVjdGlvbl9taW5fMSA9IHJlYWN0SXNfcHJvZHVjdGlvbl9taW4udHlwZU9mO1xudmFyIHJlYWN0SXNfcHJvZHVjdGlvbl9taW5fMiA9IHJlYWN0SXNfcHJvZHVjdGlvbl9taW4uQXN5bmNNb2RlO1xudmFyIHJlYWN0SXNfcHJvZHVjdGlvbl9taW5fMyA9IHJlYWN0SXNfcHJvZHVjdGlvbl9taW4uQ29uY3VycmVudE1vZGU7XG52YXIgcmVhY3RJc19wcm9kdWN0aW9uX21pbl80ID0gcmVhY3RJc19wcm9kdWN0aW9uX21pbi5Db250ZXh0Q29uc3VtZXI7XG52YXIgcmVhY3RJc19wcm9kdWN0aW9uX21pbl81ID0gcmVhY3RJc19wcm9kdWN0aW9uX21pbi5Db250ZXh0UHJvdmlkZXI7XG52YXIgcmVhY3RJc19wcm9kdWN0aW9uX21pbl82ID0gcmVhY3RJc19wcm9kdWN0aW9uX21pbi5FbGVtZW50O1xudmFyIHJlYWN0SXNfcHJvZHVjdGlvbl9taW5fNyA9IHJlYWN0SXNfcHJvZHVjdGlvbl9taW4uRm9yd2FyZFJlZjtcbnZhciByZWFjdElzX3Byb2R1Y3Rpb25fbWluXzggPSByZWFjdElzX3Byb2R1Y3Rpb25fbWluLkZyYWdtZW50O1xudmFyIHJlYWN0SXNfcHJvZHVjdGlvbl9taW5fOSA9IHJlYWN0SXNfcHJvZHVjdGlvbl9taW4uUHJvZmlsZXI7XG52YXIgcmVhY3RJc19wcm9kdWN0aW9uX21pbl8xMCA9IHJlYWN0SXNfcHJvZHVjdGlvbl9taW4uUG9ydGFsO1xudmFyIHJlYWN0SXNfcHJvZHVjdGlvbl9taW5fMTEgPSByZWFjdElzX3Byb2R1Y3Rpb25fbWluLlN0cmljdE1vZGU7XG52YXIgcmVhY3RJc19wcm9kdWN0aW9uX21pbl8xMiA9IHJlYWN0SXNfcHJvZHVjdGlvbl9taW4uaXNWYWxpZEVsZW1lbnRUeXBlO1xudmFyIHJlYWN0SXNfcHJvZHVjdGlvbl9taW5fMTMgPSByZWFjdElzX3Byb2R1Y3Rpb25fbWluLmlzQXN5bmNNb2RlO1xudmFyIHJlYWN0SXNfcHJvZHVjdGlvbl9taW5fMTQgPSByZWFjdElzX3Byb2R1Y3Rpb25fbWluLmlzQ29uY3VycmVudE1vZGU7XG52YXIgcmVhY3RJc19wcm9kdWN0aW9uX21pbl8xNSA9IHJlYWN0SXNfcHJvZHVjdGlvbl9taW4uaXNDb250ZXh0Q29uc3VtZXI7XG52YXIgcmVhY3RJc19wcm9kdWN0aW9uX21pbl8xNiA9IHJlYWN0SXNfcHJvZHVjdGlvbl9taW4uaXNDb250ZXh0UHJvdmlkZXI7XG52YXIgcmVhY3RJc19wcm9kdWN0aW9uX21pbl8xNyA9IHJlYWN0SXNfcHJvZHVjdGlvbl9taW4uaXNFbGVtZW50O1xudmFyIHJlYWN0SXNfcHJvZHVjdGlvbl9taW5fMTggPSByZWFjdElzX3Byb2R1Y3Rpb25fbWluLmlzRm9yd2FyZFJlZjtcbnZhciByZWFjdElzX3Byb2R1Y3Rpb25fbWluXzE5ID0gcmVhY3RJc19wcm9kdWN0aW9uX21pbi5pc0ZyYWdtZW50O1xudmFyIHJlYWN0SXNfcHJvZHVjdGlvbl9taW5fMjAgPSByZWFjdElzX3Byb2R1Y3Rpb25fbWluLmlzUHJvZmlsZXI7XG52YXIgcmVhY3RJc19wcm9kdWN0aW9uX21pbl8yMSA9IHJlYWN0SXNfcHJvZHVjdGlvbl9taW4uaXNQb3J0YWw7XG52YXIgcmVhY3RJc19wcm9kdWN0aW9uX21pbl8yMiA9IHJlYWN0SXNfcHJvZHVjdGlvbl9taW4uaXNTdHJpY3RNb2RlO1xuXG52YXIgcmVhY3RJcyA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcblxue1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlYWN0SXNfcHJvZHVjdGlvbl9taW47XG59XG59KTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIHJlbmRlcjogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlXG59O1xuXG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcblxuICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IFRZUEVfU1RBVElDU1t0YXJnZXRDb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG4gICAgICAgIHZhciBzb3VyY2VTdGF0aWNzID0gVFlQRV9TVEFUSUNTW3NvdXJjZUNvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbnZhciBob2lzdE5vblJlYWN0U3RhdGljc19janMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcblxudmFyIEV2ZW50RW1pdHRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnRFbWl0dGVyKTtcblxuICAgIHRoaXMubGlzdGVuZXJzID0gW107XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRXZlbnRFbWl0dGVyLCBbe1xuICAgIGtleTogXCJvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbihjYikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaChjYik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaW5kZXggPSBfdGhpcy5saXN0ZW5lcnMuaW5kZXhPZihjYik7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkgX3RoaXMubGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJlbWl0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVtaXQoZGF0YSkge1xuICAgICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZuKGRhdGEpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEV2ZW50RW1pdHRlcjtcbn0oKTtcblxuZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpIHtcbiAgZnVuY3Rpb24gY2hlY2tUeXBlKGlzUmVxdWlyZWQsIHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCByZXN0ID0gbmV3IEFycmF5KF9sZW4gPiA2ID8gX2xlbiAtIDYgOiAwKSwgX2tleSA9IDY7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIHJlc3RbX2tleSAtIDZdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiB1bnRyYWNrZWQoZnVuY3Rpb24gKCkge1xuICAgICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgXCI8PGFub255bW91cz4+XCI7XG4gICAgICBwcm9wRnVsbE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICAgIHZhciBhY3R1YWwgPSBwcm9wc1twcm9wTmFtZV0gPT09IG51bGwgPyBcIm51bGxcIiA6IFwidW5kZWZpbmVkXCI7XG4gICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIlRoZSBcIiArIGxvY2F0aW9uICsgXCIgYFwiICsgcHJvcEZ1bGxOYW1lICsgXCJgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCBcIiArIFwiaW4gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgYnV0IGl0cyB2YWx1ZSBpcyBgXCIgKyBhY3R1YWwgKyBcImAuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUuYXBwbHkodm9pZCAwLCBbcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lXS5jb25jYXQocmVzdCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGNoYWluZWRDaGVja1R5cGUgPSBjaGVja1R5cGUuYmluZChudWxsLCBmYWxzZSk7XG4gIGNoYWluZWRDaGVja1R5cGUuaXNSZXF1aXJlZCA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIHRydWUpO1xuICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbn0gLy8gQ29waWVkIGZyb20gUmVhY3QuUHJvcFR5cGVzXG5cblxuZnVuY3Rpb24gaXNTeW1ib2wocHJvcFR5cGUsIHByb3BWYWx1ZSkge1xuICAvLyBOYXRpdmUgU3ltYm9sLlxuICBpZiAocHJvcFR5cGUgPT09IFwic3ltYm9sXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddID09PSAnU3ltYm9sJ1xuXG5cbiAgaWYgKHByb3BWYWx1ZVtcIkBAdG9TdHJpbmdUYWdcIl0gPT09IFwiU3ltYm9sXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBGYWxsYmFjayBmb3Igbm9uLXNwZWMgY29tcGxpYW50IFN5bWJvbHMgd2hpY2ggYXJlIHBvbHlmaWxsZWQuXG5cblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHByb3BWYWx1ZSBpbnN0YW5jZW9mIFN5bWJvbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSAvLyBDb3BpZWQgZnJvbSBSZWFjdC5Qcm9wVHlwZXNcblxuXG5mdW5jdGlvbiBnZXRQcm9wVHlwZShwcm9wVmFsdWUpIHtcbiAgdmFyIHByb3BUeXBlID0gX3R5cGVvZihwcm9wVmFsdWUpO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICByZXR1cm4gXCJhcnJheVwiO1xuICB9XG5cbiAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIC8vIE9sZCB3ZWJraXRzIChhdCBsZWFzdCB1bnRpbCBBbmRyb2lkIDQuMCkgcmV0dXJuICdmdW5jdGlvbicgcmF0aGVyIHRoYW5cbiAgICAvLyAnb2JqZWN0JyBmb3IgdHlwZW9mIGEgUmVnRXhwLiBXZSdsbCBub3JtYWxpemUgdGhpcyBoZXJlIHNvIHRoYXQgL2JsYS9cbiAgICAvLyBwYXNzZXMgUHJvcFR5cGVzLm9iamVjdC5cbiAgICByZXR1cm4gXCJvYmplY3RcIjtcbiAgfVxuXG4gIGlmIChpc1N5bWJvbChwcm9wVHlwZSwgcHJvcFZhbHVlKSkge1xuICAgIHJldHVybiBcInN5bWJvbFwiO1xuICB9XG5cbiAgcmV0dXJuIHByb3BUeXBlO1xufSAvLyBUaGlzIGhhbmRsZXMgbW9yZSB0eXBlcyB0aGFuIGBnZXRQcm9wVHlwZWAuIE9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4vLyBDb3BpZWQgZnJvbSBSZWFjdC5Qcm9wVHlwZXNcblxuXG5mdW5jdGlvbiBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpIHtcbiAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcblxuICBpZiAocHJvcFR5cGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgcmV0dXJuIFwiZGF0ZVwiO1xuICAgIH0gZWxzZSBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICByZXR1cm4gXCJyZWdleHBcIjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJvcFR5cGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9ic2VydmFibGVUeXBlQ2hlY2tlckNyZWF0b3IoYWxsb3dOYXRpdmVUeXBlLCBtb2J4VHlwZSkge1xuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZnVuY3Rpb24gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHJldHVybiB1bnRyYWNrZWQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGFsbG93TmF0aXZlVHlwZSkge1xuICAgICAgICBpZiAoZ2V0UHJvcFR5cGUocHJvcHNbcHJvcE5hbWVdKSA9PT0gbW9ieFR5cGUudG9Mb3dlckNhc2UoKSkgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBtb2J4Q2hlY2tlcjtcblxuICAgICAgc3dpdGNoIChtb2J4VHlwZSkge1xuICAgICAgICBjYXNlIFwiQXJyYXlcIjpcbiAgICAgICAgICBtb2J4Q2hlY2tlciA9IGlzT2JzZXJ2YWJsZUFycmF5O1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJPYmplY3RcIjpcbiAgICAgICAgICBtb2J4Q2hlY2tlciA9IGlzT2JzZXJ2YWJsZU9iamVjdDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiTWFwXCI6XG4gICAgICAgICAgbW9ieENoZWNrZXIgPSBpc09ic2VydmFibGVNYXA7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIG1vYnhUeXBlOiBcIi5jb25jYXQobW9ieFR5cGUpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcblxuICAgICAgaWYgKCFtb2J4Q2hlY2tlcihwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcmVjaXNlVHlwZSA9IGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHZhciBuYXRpdmVUeXBlRXhwZWN0YXRpb25NZXNzYWdlID0gYWxsb3dOYXRpdmVUeXBlID8gXCIgb3IgamF2YXNjcmlwdCBgXCIgKyBtb2J4VHlwZS50b0xvd2VyQ2FzZSgpICsgXCJgXCIgOiBcIlwiO1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wIGBcIiArIHByb3BGdWxsTmFtZSArIFwiYCBvZiB0eXBlIGBcIiArIHByZWNpc2VUeXBlICsgXCJgIHN1cHBsaWVkIHRvXCIgKyBcIiBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBgbW9ieC5PYnNlcnZhYmxlXCIgKyBtb2J4VHlwZSArIFwiYFwiICsgbmF0aXZlVHlwZUV4cGVjdGF0aW9uTWVzc2FnZSArIFwiLlwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYnNlcnZhYmxlQXJyYXlPZlR5cGVDaGVja2VyKGFsbG93TmF0aXZlVHlwZSwgdHlwZUNoZWNrZXIpIHtcbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBuZXcgQXJyYXkoX2xlbjIgPiA1ID8gX2xlbjIgLSA1IDogMCksIF9rZXkyID0gNTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgcmVzdFtfa2V5MiAtIDVdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW50cmFja2VkKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0eXBlb2YgdHlwZUNoZWNrZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiUHJvcGVydHkgYFwiICsgcHJvcEZ1bGxOYW1lICsgXCJgIG9mIGNvbXBvbmVudCBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgIGhhcyBcIiArIFwiaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbi5cIik7XG4gICAgICB9XG5cbiAgICAgIHZhciBlcnJvciA9IGNyZWF0ZU9ic2VydmFibGVUeXBlQ2hlY2tlckNyZWF0b3IoYWxsb3dOYXRpdmVUeXBlLCBcIkFycmF5XCIpKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSk7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIGVycm9yO1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZXJyb3IgPSB0eXBlQ2hlY2tlci5hcHBseSh2b2lkIDAsIFtwcm9wVmFsdWUsIGksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyBcIltcIiArIGkgKyBcIl1cIl0uY29uY2F0KHJlc3QpKTtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSk7XG4gIH0pO1xufVxuXG52YXIgb2JzZXJ2YWJsZUFycmF5ID0gY3JlYXRlT2JzZXJ2YWJsZVR5cGVDaGVja2VyQ3JlYXRvcihmYWxzZSwgXCJBcnJheVwiKTtcbnZhciBvYnNlcnZhYmxlQXJyYXlPZiA9IGNyZWF0ZU9ic2VydmFibGVBcnJheU9mVHlwZUNoZWNrZXIuYmluZChudWxsLCBmYWxzZSk7XG52YXIgb2JzZXJ2YWJsZU1hcCA9IGNyZWF0ZU9ic2VydmFibGVUeXBlQ2hlY2tlckNyZWF0b3IoZmFsc2UsIFwiTWFwXCIpO1xudmFyIG9ic2VydmFibGVPYmplY3QgPSBjcmVhdGVPYnNlcnZhYmxlVHlwZUNoZWNrZXJDcmVhdG9yKGZhbHNlLCBcIk9iamVjdFwiKTtcbnZhciBhcnJheU9yT2JzZXJ2YWJsZUFycmF5ID0gY3JlYXRlT2JzZXJ2YWJsZVR5cGVDaGVja2VyQ3JlYXRvcih0cnVlLCBcIkFycmF5XCIpO1xudmFyIGFycmF5T3JPYnNlcnZhYmxlQXJyYXlPZiA9IGNyZWF0ZU9ic2VydmFibGVBcnJheU9mVHlwZUNoZWNrZXIuYmluZChudWxsLCB0cnVlKTtcbnZhciBvYmplY3RPck9ic2VydmFibGVPYmplY3QgPSBjcmVhdGVPYnNlcnZhYmxlVHlwZUNoZWNrZXJDcmVhdG9yKHRydWUsIFwiT2JqZWN0XCIpO1xuXG52YXIgcHJvcFR5cGVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBvYnNlcnZhYmxlQXJyYXk6IG9ic2VydmFibGVBcnJheSxcbiAgb2JzZXJ2YWJsZUFycmF5T2Y6IG9ic2VydmFibGVBcnJheU9mLFxuICBvYnNlcnZhYmxlTWFwOiBvYnNlcnZhYmxlTWFwLFxuICBvYnNlcnZhYmxlT2JqZWN0OiBvYnNlcnZhYmxlT2JqZWN0LFxuICBhcnJheU9yT2JzZXJ2YWJsZUFycmF5OiBhcnJheU9yT2JzZXJ2YWJsZUFycmF5LFxuICBhcnJheU9yT2JzZXJ2YWJsZUFycmF5T2Y6IGFycmF5T3JPYnNlcnZhYmxlQXJyYXlPZixcbiAgb2JqZWN0T3JPYnNlcnZhYmxlT2JqZWN0OiBvYmplY3RPck9ic2VydmFibGVPYmplY3Rcbn0pO1xuXG5mdW5jdGlvbiBpc1N0YXRlbGVzcyhjb21wb25lbnQpIHtcbiAgLy8gYGZ1bmN0aW9uKCkge31gIGhhcyBwcm90b3R5cGUsIGJ1dCBgKCkgPT4ge31gIGRvZXNuJ3RcbiAgLy8gYCgpID0+IHt9YCB2aWEgQmFiZWwgaGFzIHByb3RvdHlwZSB0b28uXG4gIHJldHVybiAhKGNvbXBvbmVudC5wcm90b3R5cGUgJiYgY29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIpO1xufVxudmFyIHN5bWJvbElkID0gMDtcblxuZnVuY3Rpb24gY3JlYXRlU3ltYm9sKG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBTeW1ib2wobmFtZSk7XG4gIH1cblxuICB2YXIgc3ltYm9sID0gXCJfXyRtb2J4LXJlYWN0IFwiLmNvbmNhdChuYW1lLCBcIiAoXCIpLmNvbmNhdChzeW1ib2xJZCwgXCIpXCIpO1xuICBzeW1ib2xJZCsrO1xuICByZXR1cm4gc3ltYm9sO1xufVxuXG52YXIgY3JlYXRlZFN5bWJvbHMgPSB7fTtcbmZ1bmN0aW9uIG5ld1N5bWJvbChuYW1lKSB7XG4gIGlmICghY3JlYXRlZFN5bWJvbHNbbmFtZV0pIHtcbiAgICBjcmVhdGVkU3ltYm9sc1tuYW1lXSA9IGNyZWF0ZVN5bWJvbChuYW1lKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVkU3ltYm9sc1tuYW1lXTtcbn1cbnZhciBtb2J4TWl4aW5zID0gbmV3U3ltYm9sKFwicGF0Y2hNaXhpbnNcIik7XG52YXIgbW9ieFBhdGNoZWREZWZpbml0aW9uID0gbmV3U3ltYm9sKFwicGF0Y2hlZERlZmluaXRpb25cIik7XG5cbmZ1bmN0aW9uIGdldE1peGlucyh0YXJnZXQsIG1ldGhvZE5hbWUpIHtcbiAgdmFyIG1peGlucyA9IHRhcmdldFttb2J4TWl4aW5zXSA9IHRhcmdldFttb2J4TWl4aW5zXSB8fCB7fTtcbiAgdmFyIG1ldGhvZE1peGlucyA9IG1peGluc1ttZXRob2ROYW1lXSA9IG1peGluc1ttZXRob2ROYW1lXSB8fCB7fTtcbiAgbWV0aG9kTWl4aW5zLmxvY2tzID0gbWV0aG9kTWl4aW5zLmxvY2tzIHx8IDA7XG4gIG1ldGhvZE1peGlucy5tZXRob2RzID0gbWV0aG9kTWl4aW5zLm1ldGhvZHMgfHwgW107XG4gIHJldHVybiBtZXRob2RNaXhpbnM7XG59XG5cbmZ1bmN0aW9uIHdyYXBwZXIocmVhbE1ldGhvZCwgbWl4aW5zKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgLy8gbG9ja3MgYXJlIHVzZWQgdG8gZW5zdXJlIHRoYXQgbWl4aW5zIGFyZSBpbnZva2VkIG9ubHkgb25jZSBwZXIgaW52b2NhdGlvbiwgZXZlbiBvbiByZWN1cnNpdmUgY2FsbHNcbiAgbWl4aW5zLmxvY2tzKys7XG5cbiAgdHJ5IHtcbiAgICB2YXIgcmV0VmFsO1xuXG4gICAgaWYgKHJlYWxNZXRob2QgIT09IHVuZGVmaW5lZCAmJiByZWFsTWV0aG9kICE9PSBudWxsKSB7XG4gICAgICByZXRWYWwgPSByZWFsTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cblxuICAgIHJldHVybiByZXRWYWw7XG4gIH0gZmluYWxseSB7XG4gICAgbWl4aW5zLmxvY2tzLS07XG5cbiAgICBpZiAobWl4aW5zLmxvY2tzID09PSAwKSB7XG4gICAgICBtaXhpbnMubWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChteCkge1xuICAgICAgICBteC5hcHBseShfdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gd3JhcEZ1bmN0aW9uKHJlYWxNZXRob2QsIG1peGlucykge1xuICB2YXIgZm4gPSBmdW5jdGlvbiBmbigpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB3cmFwcGVyLmNhbGwuYXBwbHkod3JhcHBlciwgW3RoaXMsIHJlYWxNZXRob2QsIG1peGluc10uY29uY2F0KGFyZ3MpKTtcbiAgfTtcblxuICByZXR1cm4gZm47XG59XG5cbmZ1bmN0aW9uIHBhdGNoKHRhcmdldCwgbWV0aG9kTmFtZSkge1xuICB2YXIgbWl4aW5zID0gZ2V0TWl4aW5zKHRhcmdldCwgbWV0aG9kTmFtZSk7XG5cbiAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBtaXhpbk1ldGhvZHMgPSBuZXcgQXJyYXkoX2xlbjMgPiAyID8gX2xlbjMgLSAyIDogMCksIF9rZXkzID0gMjsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIG1peGluTWV0aG9kc1tfa2V5MyAtIDJdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBtaXhpbk1ldGhvZHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgdmFyIG1peGluTWV0aG9kID0gbWl4aW5NZXRob2RzW19pXTtcblxuICAgIGlmIChtaXhpbnMubWV0aG9kcy5pbmRleE9mKG1peGluTWV0aG9kKSA8IDApIHtcbiAgICAgIG1peGlucy5tZXRob2RzLnB1c2gobWl4aW5NZXRob2QpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBvbGREZWZpbml0aW9uID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIG1ldGhvZE5hbWUpO1xuXG4gIGlmIChvbGREZWZpbml0aW9uICYmIG9sZERlZmluaXRpb25bbW9ieFBhdGNoZWREZWZpbml0aW9uXSkge1xuICAgIC8vIGFscmVhZHkgcGF0Y2hlZCBkZWZpbml0aW9uLCBkbyBub3QgcmVwYXRjaFxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbE1ldGhvZCA9IHRhcmdldFttZXRob2ROYW1lXTtcbiAgdmFyIG5ld0RlZmluaXRpb24gPSBjcmVhdGVEZWZpbml0aW9uKHRhcmdldCwgbWV0aG9kTmFtZSwgb2xkRGVmaW5pdGlvbiA/IG9sZERlZmluaXRpb24uZW51bWVyYWJsZSA6IHVuZGVmaW5lZCwgbWl4aW5zLCBvcmlnaW5hbE1ldGhvZCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG1ldGhvZE5hbWUsIG5ld0RlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWZpbml0aW9uKHRhcmdldCwgbWV0aG9kTmFtZSwgZW51bWVyYWJsZSwgbWl4aW5zLCBvcmlnaW5hbE1ldGhvZCkge1xuICB2YXIgX3JlZjtcblxuICB2YXIgd3JhcHBlZEZ1bmMgPSB3cmFwRnVuY3Rpb24ob3JpZ2luYWxNZXRob2QsIG1peGlucyk7XG4gIHJldHVybiBfcmVmID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBtb2J4UGF0Y2hlZERlZmluaXRpb24sIHRydWUpLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJnZXRcIiwgZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB3cmFwcGVkRnVuYztcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcInNldFwiLCBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICBpZiAodGhpcyA9PT0gdGFyZ2V0KSB7XG4gICAgICB3cmFwcGVkRnVuYyA9IHdyYXBGdW5jdGlvbih2YWx1ZSwgbWl4aW5zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd2hlbiBpdCBpcyBhbiBpbnN0YW5jZSBvZiB0aGUgcHJvdG90eXBlL2EgY2hpbGQgcHJvdG90eXBlIHBhdGNoIHRoYXQgcGFydGljdWxhciBjYXNlIGFnYWluIHNlcGFyYXRlbHlcbiAgICAgIC8vIHNpbmNlIHdlIG5lZWQgdG8gc3RvcmUgc2VwYXJhdGUgdmFsdWVzIGRlcGVuZGluZyBvbiB3ZXRoZXIgaXQgaXMgdGhlIGFjdHVhbCBpbnN0YW5jZSwgdGhlIHByb3RvdHlwZSwgZXRjXG4gICAgICAvLyBlLmcuIHRoZSBtZXRob2QgZm9yIHN1cGVyIG1pZ2h0IG5vdCBiZSB0aGUgc2FtZSBhcyB0aGUgbWV0aG9kIGZvciB0aGUgcHJvdG90eXBlIHdoaWNoIG1pZ2h0IGJlIG5vdCB0aGUgc2FtZVxuICAgICAgLy8gYXMgdGhlIG1ldGhvZCBmb3IgdGhlIGluc3RhbmNlXG4gICAgICB2YXIgbmV3RGVmaW5pdGlvbiA9IGNyZWF0ZURlZmluaXRpb24odGhpcywgbWV0aG9kTmFtZSwgZW51bWVyYWJsZSwgbWl4aW5zLCB2YWx1ZSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbWV0aG9kTmFtZSwgbmV3RGVmaW5pdGlvbik7XG4gICAgfVxuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29uZmlndXJhYmxlXCIsIHRydWUpLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJlbnVtZXJhYmxlXCIsIGVudW1lcmFibGUpLCBfcmVmO1xufVxuXG52YXIgaW5qZWN0b3JDb250ZXh0VHlwZXMgPSB7XG4gIG1vYnhTdG9yZXM6IG9iamVjdE9yT2JzZXJ2YWJsZU9iamVjdFxufTtcbk9iamVjdC5zZWFsKGluamVjdG9yQ29udGV4dFR5cGVzKTtcbnZhciBwcm94aWVkSW5qZWN0b3JQcm9wcyA9IHtcbiAgY29udGV4dFR5cGVzOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gaW5qZWN0b3JDb250ZXh0VHlwZXM7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChfKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJNb2J4IEluamVjdG9yOiB5b3UgYXJlIHRyeWluZyB0byBhdHRhY2ggYGNvbnRleHRUeXBlc2Agb24gYW4gY29tcG9uZW50IGRlY29yYXRlZCB3aXRoIGBpbmplY3RgIChvciBgb2JzZXJ2ZXJgKSBIT0MuIFBsZWFzZSBzcGVjaWZ5IHRoZSBjb250ZXh0VHlwZXMgb24gdGhlIHdyYXBwZWQgY29tcG9uZW50IGluc3RlYWQuIEl0IGlzIGFjY2Vzc2libGUgdGhyb3VnaCB0aGUgYHdyYXBwZWRDb21wb25lbnRgXCIpO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlXG4gIH0sXG4gIGlzTW9ieEluamVjdG9yOiB7XG4gICAgdmFsdWU6IHRydWUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfVxuICAvKipcbiAgICogU3RvcmUgSW5qZWN0aW9uXG4gICAqL1xuXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZUluamVjdG9yKGdyYWJTdG9yZXNGbiwgY29tcG9uZW50LCBpbmplY3ROYW1lcykge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcImluamVjdC1cIiArIChjb21wb25lbnQuZGlzcGxheU5hbWUgfHwgY29tcG9uZW50Lm5hbWUgfHwgY29tcG9uZW50LmNvbnN0cnVjdG9yICYmIGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5uYW1lIHx8IFwiVW5rbm93blwiKTtcbiAgaWYgKGluamVjdE5hbWVzKSBkaXNwbGF5TmFtZSArPSBcIi13aXRoLVwiICsgaW5qZWN0TmFtZXM7XG5cbiAgdmFyIEluamVjdG9yID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhJbmplY3RvciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBJbmplY3RvcigpIHtcbiAgICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbmplY3Rvcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKEluamVjdG9yKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICAgIF90aGlzLnN0b3JlUmVmID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIF90aGlzLndyYXBwZWRJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhJbmplY3RvciwgW3tcbiAgICAgIGtleTogXCJyZW5kZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIC8vIE9wdGltaXphdGlvbjogaXQgbWlnaHQgYmUgbW9yZSBlZmZpY2llbnQgdG8gYXBwbHkgdGhlIG1hcHBlciBmdW5jdGlvbiAqb3V0c2lkZSogdGhlIHJlbmRlciBtZXRob2RcbiAgICAgICAgLy8gKGlmIHRoZSBtYXBwZXIgaXMgYSBmdW5jdGlvbiksIHRoYXQgY291bGQgYXZvaWQgZXhwZW5zaXZlKD8pIHJlLXJlbmRlcmluZyBvZiB0aGUgaW5qZWN0b3IgY29tcG9uZW50XG4gICAgICAgIC8vIFNlZSB0aGlzIHRlc3Q6ICd1c2luZyBhIGN1c3RvbSBpbmplY3RvciBpcyBub3QgdG9vIHJlYWN0aXZlJyBpbiBpbmplY3QuanNcbiAgICAgICAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMucHJvcHMpIHtcbiAgICAgICAgICBpZiAodGhpcy5wcm9wcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBuZXdQcm9wc1trZXldID0gdGhpcy5wcm9wc1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhZGRpdGlvbmFsUHJvcHMgPSBncmFiU3RvcmVzRm4odGhpcy5jb250ZXh0Lm1vYnhTdG9yZXMgfHwge30sIG5ld1Byb3BzLCB0aGlzLmNvbnRleHQpIHx8IHt9O1xuXG4gICAgICAgIGZvciAodmFyIF9rZXkyIGluIGFkZGl0aW9uYWxQcm9wcykge1xuICAgICAgICAgIG5ld1Byb3BzW19rZXkyXSA9IGFkZGl0aW9uYWxQcm9wc1tfa2V5Ml07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzU3RhdGVsZXNzKGNvbXBvbmVudCkpIHtcbiAgICAgICAgICBuZXdQcm9wcy5yZWYgPSB0aGlzLnN0b3JlUmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBuZXdQcm9wcyk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEluamVjdG9yO1xuICB9KENvbXBvbmVudCk7IC8vIFN0YXRpYyBmaWVsZHMgZnJvbSBjb21wb25lbnQgc2hvdWxkIGJlIHZpc2libGUgb24gdGhlIGdlbmVyYXRlZCBJbmplY3RvclxuXG5cbiAgSW5qZWN0b3IuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgaG9pc3ROb25SZWFjdFN0YXRpY3NfY2pzKEluamVjdG9yLCBjb21wb25lbnQpO1xuICBJbmplY3Rvci53cmFwcGVkQ29tcG9uZW50ID0gY29tcG9uZW50O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhJbmplY3RvciwgcHJveGllZEluamVjdG9yUHJvcHMpO1xuICByZXR1cm4gSW5qZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGdyYWJTdG9yZXNCeU5hbWUoc3RvcmVOYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGJhc2VTdG9yZXMsIG5leHRQcm9wcykge1xuICAgIHN0b3JlTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RvcmVOYW1lKSB7XG4gICAgICBpZiAoc3RvcmVOYW1lIGluIG5leHRQcm9wcyAvLyBwcmVmZXIgcHJvcHMgb3ZlciBzdG9yZXNcbiAgICAgICkgcmV0dXJuO1xuICAgICAgaWYgKCEoc3RvcmVOYW1lIGluIGJhc2VTdG9yZXMpKSB0aHJvdyBuZXcgRXJyb3IoXCJNb2JYIGluamVjdG9yOiBTdG9yZSAnXCIgKyBzdG9yZU5hbWUgKyBcIicgaXMgbm90IGF2YWlsYWJsZSEgTWFrZSBzdXJlIGl0IGlzIHByb3ZpZGVkIGJ5IHNvbWUgUHJvdmlkZXJcIik7XG4gICAgICBuZXh0UHJvcHNbc3RvcmVOYW1lXSA9IGJhc2VTdG9yZXNbc3RvcmVOYW1lXTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV4dFByb3BzO1xuICB9O1xufVxuLyoqXG4gKiBoaWdoZXIgb3JkZXIgY29tcG9uZW50IHRoYXQgaW5qZWN0cyBzdG9yZXMgdG8gYSBjaGlsZC5cbiAqIHRha2VzIGVpdGhlciBhIHZhcmFyZ3MgbGlzdCBvZiBzdHJpbmdzLCB3aGljaCBhcmUgc3RvcmVzIHJlYWQgZnJvbSB0aGUgY29udGV4dCxcbiAqIG9yIGEgZnVuY3Rpb24gdGhhdCBtYW51YWxseSBtYXBzIHRoZSBhdmFpbGFibGUgc3RvcmVzIGZyb20gdGhlIGNvbnRleHQgdG8gcHJvcHM6XG4gKiBzdG9yZXNUb1Byb3BzKG1vYnhTdG9yZXMsIHByb3BzLCBjb250ZXh0KSA9PiBuZXdQcm9wc1xuICovXG5cblxuZnVuY3Rpb24gaW5qZWN0KClcbi8qIGZuKHN0b3JlcywgbmV4dFByb3BzKSBvciAuLi5zdG9yZU5hbWVzICovXG57XG4gIHZhciBncmFiU3RvcmVzRm47XG5cbiAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGdyYWJTdG9yZXNGbiA9IGFyZ3VtZW50c1swXTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGNvbXBvbmVudENsYXNzKSB7XG4gICAgICB2YXIgaW5qZWN0ZWQgPSBjcmVhdGVTdG9yZUluamVjdG9yKGdyYWJTdG9yZXNGbiwgY29tcG9uZW50Q2xhc3MpO1xuICAgICAgaW5qZWN0ZWQuaXNNb2J4SW5qZWN0b3IgPSBmYWxzZTsgLy8gc3VwcmVzcyB3YXJuaW5nXG4gICAgICAvLyBtYXJrIHRoZSBJbmplY3RvciBhcyBvYnNlcnZlciwgdG8gbWFrZSBpdCByZWFjdCB0byBleHByZXNzaW9ucyBpbiBgZ3JhYlN0b3Jlc0ZuYCxcbiAgICAgIC8vIHNlZSAjMTExXG5cbiAgICAgIGluamVjdGVkID0gb2JzZXJ2ZXIoaW5qZWN0ZWQpO1xuICAgICAgaW5qZWN0ZWQuaXNNb2J4SW5qZWN0b3IgPSB0cnVlOyAvLyByZXN0b3JlIHdhcm5pbmdcblxuICAgICAgcmV0dXJuIGluamVjdGVkO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdmFyIHN0b3JlTmFtZXMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzdG9yZU5hbWVzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGdyYWJTdG9yZXNGbiA9IGdyYWJTdG9yZXNCeU5hbWUoc3RvcmVOYW1lcyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjb21wb25lbnRDbGFzcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVN0b3JlSW5qZWN0b3IoZ3JhYlN0b3Jlc0ZuLCBjb21wb25lbnRDbGFzcywgc3RvcmVOYW1lcy5qb2luKFwiLVwiKSk7XG4gICAgfTtcbiAgfVxufVxuXG52YXIgbW9ieEFkbWluUHJvcGVydHkgPSAkbW9ieCB8fCBcIiRtb2J4XCI7XG52YXIgbW9ieElzVW5tb3VudGVkID0gbmV3U3ltYm9sKFwiaXNVbm1vdW50ZWRcIik7XG4vKipcbiAqIGRldiB0b29sIHN1cHBvcnRcbiAqL1xuXG52YXIgaXNEZXZ0b29sc0VuYWJsZWQgPSBmYWxzZTtcbnZhciBpc1VzaW5nU3RhdGljUmVuZGVyaW5nID0gZmFsc2U7XG52YXIgd2FybmVkQWJvdXRPYnNlcnZlckluamVjdERlcHJlY2F0aW9uID0gZmFsc2U7IC8vIFdlYWtNYXA8Tm9kZSwgT2JqZWN0PjtcblxudmFyIGNvbXBvbmVudEJ5Tm9kZVJlZ2lzdHJ5ID0gdHlwZW9mIFdlYWtNYXAgIT09IFwidW5kZWZpbmVkXCIgPyBuZXcgV2Vha01hcCgpIDogdW5kZWZpbmVkO1xudmFyIHJlbmRlclJlcG9ydGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xudmFyIHNraXBSZW5kZXJLZXkgPSBuZXdTeW1ib2woXCJza2lwUmVuZGVyXCIpO1xudmFyIGlzRm9yY2luZ1VwZGF0ZUtleSA9IG5ld1N5bWJvbChcImlzRm9yY2luZ1VwZGF0ZVwiKTsgLy8gVXNpbmcgcmVhY3QtaXMgaGFkIHNvbWUgaXNzdWVzIChhbmQgb3BlcmF0ZXMgb24gZWxlbWVudHMsIG5vdCBvbiB0eXBlcyksIHNlZSAjNjA4IC8gIzYwOVxuXG52YXIgUmVhY3RGb3J3YXJkUmVmU3ltYm9sID0gdHlwZW9mIGZvcndhcmRSZWYgPT09IFwiZnVuY3Rpb25cIiAmJiBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcHJvcHMsIF9yZWYpIHt9KVtcIiQkdHlwZW9mXCJdO1xuLyoqXG4gKiBIZWxwZXIgdG8gc2V0IGBwcm9wYCB0byBgdGhpc2AgYXMgbm9uLWVudW1lcmFibGUgKGhpZGRlbiBwcm9wKVxuICogQHBhcmFtIHRhcmdldFxuICogQHBhcmFtIHByb3BcbiAqIEBwYXJhbSB2YWx1ZVxuICovXG5cbmZ1bmN0aW9uIHNldEhpZGRlblByb3AodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICBpZiAoIU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgcHJvcCkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZERPTU5vZGUkMihjb21wb25lbnQpIHtcbiAgaWYgKGZpbmRET01Ob2RlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmaW5kRE9NTm9kZShjb21wb25lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGZpbmRET01Ob2RlIHdpbGwgdGhyb3cgaW4gcmVhY3QtdGVzdC1yZW5kZXJlciwgc2VlOlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC1yZWFjdC9pc3N1ZXMvMjE2XG4gICAgICAvLyBJcyB0aGVyZSBhIGJldHRlciBoZXVyaXN0aWM/XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gcmVwb3J0UmVuZGVyaW5nKGNvbXBvbmVudCkge1xuICB2YXIgbm9kZSA9IGZpbmRET01Ob2RlJDIoY29tcG9uZW50KTtcbiAgaWYgKG5vZGUgJiYgY29tcG9uZW50QnlOb2RlUmVnaXN0cnkpIGNvbXBvbmVudEJ5Tm9kZVJlZ2lzdHJ5LnNldChub2RlLCBjb21wb25lbnQpO1xuICByZW5kZXJSZXBvcnRlci5lbWl0KHtcbiAgICBldmVudDogXCJyZW5kZXJcIixcbiAgICByZW5kZXJUaW1lOiBjb21wb25lbnQuX18kbW9iUmVuZGVyRW5kIC0gY29tcG9uZW50Ll9fJG1vYlJlbmRlclN0YXJ0LFxuICAgIHRvdGFsVGltZTogRGF0ZS5ub3coKSAtIGNvbXBvbmVudC5fXyRtb2JSZW5kZXJTdGFydCxcbiAgICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgICBub2RlOiBub2RlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0cmFja0NvbXBvbmVudHMoKSB7XG4gIGlmICh0eXBlb2YgV2Vha01hcCA9PT0gXCJ1bmRlZmluZWRcIikgdGhyb3cgbmV3IEVycm9yKFwiW21vYngtcmVhY3RdIHRyYWNraW5nIGNvbXBvbmVudHMgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXIuXCIpO1xuICBpZiAoIWlzRGV2dG9vbHNFbmFibGVkKSBpc0RldnRvb2xzRW5hYmxlZCA9IHRydWU7XG59XG5mdW5jdGlvbiB1c2VTdGF0aWNSZW5kZXJpbmcodXNlU3RhdGljUmVuZGVyaW5nKSB7XG4gIGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcgPSB1c2VTdGF0aWNSZW5kZXJpbmc7XG59XG4vKipcbiAqIEVycm9ycyByZXBvcnRlclxuICovXG5cbnZhciBlcnJvcnNSZXBvcnRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbi8qKlxuICogVXRpbGl0aWVzXG4gKi9cblxuZnVuY3Rpb24gcGF0Y2gkMSh0YXJnZXQsIGZ1bmNOYW1lKSB7XG4gIHBhdGNoKHRhcmdldCwgZnVuY05hbWUsIHJlYWN0aXZlTWl4aW5bZnVuY05hbWVdKTtcbn1cblxuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgLy9Gcm9tOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmJqcy9ibG9iL2M2OTkwNGE1MTFiOTAwMjY2OTM1MTY4MjIzMDYzZGQ4NzcyZGZjNDAvcGFja2FnZXMvZmJqcy9zcmMvY29yZS9zaGFsbG93RXF1YWwuanNcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoX3R5cGVvZihvYmpBKSAhPT0gXCJvYmplY3RcIiB8fCBvYmpBID09PSBudWxsIHx8IF90eXBlb2Yob2JqQikgIT09IFwib2JqZWN0XCIgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBGcm9tOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmJqcy9ibG9iL2M2OTkwNGE1MTFiOTAwMjY2OTM1MTY4MjIzMDYzZGQ4NzcyZGZjNDAvcGFja2FnZXMvZmJqcy9zcmMvY29yZS9zaGFsbG93RXF1YWwuanNcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlQ29tcG9uZW50UmVhY3RpdmUocmVuZGVyKSB7XG4gIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gIGlmIChpc1VzaW5nU3RhdGljUmVuZGVyaW5nID09PSB0cnVlKSByZXR1cm4gcmVuZGVyLmNhbGwodGhpcyk7XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmVSZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlzUmVuZGVyaW5nUGVuZGluZyA9IGZhbHNlO1xuICAgIHZhciBleGNlcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHJlbmRlcmluZyA9IHVuZGVmaW5lZDtcbiAgICByZWFjdGlvbi50cmFjayhmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNEZXZ0b29sc0VuYWJsZWQpIHtcbiAgICAgICAgX3RoaXMuX18kbW9iUmVuZGVyU3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICByZW5kZXJpbmcgPSBfYWxsb3dTdGF0ZUNoYW5nZXMoZmFsc2UsIGJhc2VSZW5kZXIpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBleGNlcHRpb24gPSBlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEZXZ0b29sc0VuYWJsZWQpIHtcbiAgICAgICAgX3RoaXMuX18kbW9iUmVuZGVyRW5kID0gRGF0ZS5ub3coKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChleGNlcHRpb24pIHtcbiAgICAgIGVycm9yc1JlcG9ydGVyLmVtaXQoZXhjZXB0aW9uKTtcbiAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVuZGVyaW5nO1xuICB9IC8vIEdlbmVyYXRlIGZyaWVuZGx5IG5hbWUgZm9yIGRlYnVnZ2luZ1xuXG5cbiAgdmFyIGluaXRpYWxOYW1lID0gdGhpcy5kaXNwbGF5TmFtZSB8fCB0aGlzLm5hbWUgfHwgdGhpcy5jb25zdHJ1Y3RvciAmJiAodGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUpIHx8IFwiPGNvbXBvbmVudD5cIjtcbiAgdmFyIHJvb3ROb2RlSUQgPSB0aGlzLl9yZWFjdEludGVybmFsSW5zdGFuY2UgJiYgdGhpcy5fcmVhY3RJbnRlcm5hbEluc3RhbmNlLl9yb290Tm9kZUlEIHx8IHRoaXMuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSAmJiB0aGlzLl9yZWFjdEludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQgfHwgdGhpcy5fcmVhY3RJbnRlcm5hbEZpYmVyICYmIHRoaXMuX3JlYWN0SW50ZXJuYWxGaWJlci5fZGVidWdJRDtcbiAgLyoqXG4gICAqIElmIHByb3BzIGFyZSBzaGFsbG93bHkgbW9kaWZpZWQsIHJlYWN0IHdpbGwgcmVuZGVyIGFueXdheSxcbiAgICogc28gYXRvbS5yZXBvcnRDaGFuZ2VkKCkgc2hvdWxkIG5vdCByZXN1bHQgaW4geWV0IGFub3RoZXIgcmUtcmVuZGVyXG4gICAqL1xuXG4gIHNldEhpZGRlblByb3AodGhpcywgc2tpcFJlbmRlcktleSwgZmFsc2UpO1xuICAvKipcbiAgICogZm9yY2VVcGRhdGUgd2lsbCByZS1hc3NpZ24gdGhpcy5wcm9wcy4gV2UgZG9uJ3Qgd2FudCB0aGF0IHRvIGNhdXNlIGEgbG9vcCxcbiAgICogc28gZGV0ZWN0IHRoZXNlIGNoYW5nZXNcbiAgICovXG5cbiAgc2V0SGlkZGVuUHJvcCh0aGlzLCBpc0ZvcmNpbmdVcGRhdGVLZXksIGZhbHNlKTsgLy8gd2lyZSB1cCByZWFjdGl2ZSByZW5kZXJcblxuICB2YXIgYmFzZVJlbmRlciA9IHJlbmRlci5iaW5kKHRoaXMpO1xuICB2YXIgaXNSZW5kZXJpbmdQZW5kaW5nID0gZmFsc2U7XG4gIHZhciByZWFjdGlvbiA9IG5ldyBSZWFjdGlvbihcIlwiLmNvbmNhdChpbml0aWFsTmFtZSwgXCIjXCIpLmNvbmNhdChyb290Tm9kZUlELCBcIi5yZW5kZXIoKVwiKSwgZnVuY3Rpb24gKCkge1xuICAgIGlmICghaXNSZW5kZXJpbmdQZW5kaW5nKSB7XG4gICAgICAvLyBOLkIuIEdldHRpbmcgaGVyZSAqYmVmb3JlIG1vdW50aW5nKiBtZWFucyB0aGF0IGEgY29tcG9uZW50IGNvbnN0cnVjdG9yIGhhcyBzaWRlIGVmZmVjdHMgKHNlZSB0aGUgcmVsZXZhbnQgdGVzdCBpbiBtaXNjLmpzKVxuICAgICAgLy8gVGhpcyB1bmlkaW9tYXRpYyBSZWFjdCB1c2FnZSBidXQgUmVhY3Qgd2lsbCBjb3JyZWN0bHkgd2FybiBhYm91dCB0aGlzIHNvIHdlIGNvbnRpbnVlIGFzIHVzdWFsXG4gICAgICAvLyBTZWUgIzg1IC8gUHVsbCAjNDRcbiAgICAgIGlzUmVuZGVyaW5nUGVuZGluZyA9IHRydWU7XG4gICAgICBpZiAodHlwZW9mIF90aGlzMi5jb21wb25lbnRXaWxsUmVhY3QgPT09IFwiZnVuY3Rpb25cIikgX3RoaXMyLmNvbXBvbmVudFdpbGxSZWFjdCgpOyAvLyBUT0RPOiB3cmFwIGluIGFjdGlvbj9cblxuICAgICAgaWYgKF90aGlzMlttb2J4SXNVbm1vdW50ZWRdICE9PSB0cnVlKSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSB1bm1vdW50ZWQgYXQgdGhpcyBwb2ludCwgY29tcG9uZW50V2lsbFJlYWN0KCkgaGFkIGEgc2lkZSBlZmZlY3QgY2F1c2luZyB0aGUgY29tcG9uZW50IHRvIHVubW91bnRlZFxuICAgICAgICAvLyBUT0RPOiByZW1vdmUgdGhpcyBjaGVjaz8gVGhlbiByZWFjdCB3aWxsIHByb3Blcmx5IHdhcm4gYWJvdXQgdGhlIGZhY3QgdGhhdCB0aGlzIHNob3VsZCBub3QgaGFwcGVuPyBTZWUgIzczXG4gICAgICAgIC8vIEhvd2V2ZXIsIHBlb3BsZSBhbHNvIGNsYWltIHRoaXMgbWlnaHQgaGFwcGVuIGR1cmluZyB1bml0IHRlc3RzLi5cbiAgICAgICAgdmFyIGhhc0Vycm9yID0gdHJ1ZTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIHNldEhpZGRlblByb3AoX3RoaXMyLCBpc0ZvcmNpbmdVcGRhdGVLZXksIHRydWUpO1xuICAgICAgICAgIGlmICghX3RoaXMyW3NraXBSZW5kZXJLZXldKSBDb21wb25lbnQucHJvdG90eXBlLmZvcmNlVXBkYXRlLmNhbGwoX3RoaXMyKTtcbiAgICAgICAgICBoYXNFcnJvciA9IGZhbHNlO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHNldEhpZGRlblByb3AoX3RoaXMyLCBpc0ZvcmNpbmdVcGRhdGVLZXksIGZhbHNlKTtcbiAgICAgICAgICBpZiAoaGFzRXJyb3IpIHJlYWN0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJlYWN0aW9uLnJlYWN0Q29tcG9uZW50ID0gdGhpcztcbiAgcmVhY3RpdmVSZW5kZXJbbW9ieEFkbWluUHJvcGVydHldID0gcmVhY3Rpb247XG4gIHRoaXMucmVuZGVyID0gcmVhY3RpdmVSZW5kZXI7XG4gIHJldHVybiByZWFjdGl2ZVJlbmRlci5jYWxsKHRoaXMpO1xufVxuLyoqXG4gKiBSZWFjdGl2ZU1peGluXG4gKi9cblxuXG52YXIgcmVhY3RpdmVNaXhpbiA9IHtcbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmIChpc1VzaW5nU3RhdGljUmVuZGVyaW5nID09PSB0cnVlKSByZXR1cm47XG4gICAgdGhpcy5yZW5kZXJbbW9ieEFkbWluUHJvcGVydHldICYmIHRoaXMucmVuZGVyW21vYnhBZG1pblByb3BlcnR5XS5kaXNwb3NlKCk7XG4gICAgdGhpc1ttb2J4SXNVbm1vdW50ZWRdID0gdHJ1ZTtcblxuICAgIGlmIChpc0RldnRvb2xzRW5hYmxlZCkge1xuICAgICAgdmFyIG5vZGUgPSBmaW5kRE9NTm9kZSQyKHRoaXMpO1xuXG4gICAgICBpZiAobm9kZSAmJiBjb21wb25lbnRCeU5vZGVSZWdpc3RyeSkge1xuICAgICAgICBjb21wb25lbnRCeU5vZGVSZWdpc3RyeS5kZWxldGUobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHJlbmRlclJlcG9ydGVyLmVtaXQoe1xuICAgICAgICBldmVudDogXCJkZXN0cm95XCIsXG4gICAgICAgIGNvbXBvbmVudDogdGhpcyxcbiAgICAgICAgbm9kZTogbm9kZVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKGlzRGV2dG9vbHNFbmFibGVkKSB7XG4gICAgICByZXBvcnRSZW5kZXJpbmcodGhpcyk7XG4gICAgfVxuICB9LFxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICBpZiAoaXNEZXZ0b29sc0VuYWJsZWQpIHtcbiAgICAgIHJlcG9ydFJlbmRlcmluZyh0aGlzKTtcbiAgICB9XG4gIH0sXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgaWYgKGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlttb2J4LXJlYWN0XSBJdCBzZWVtcyB0aGF0IGEgcmUtcmVuZGVyaW5nIG9mIGEgUmVhY3QgY29tcG9uZW50IGlzIHRyaWdnZXJlZCB3aGlsZSBpbiBzdGF0aWMgKHNlcnZlci1zaWRlKSBtb2RlLiBQbGVhc2UgbWFrZSBzdXJlIGNvbXBvbmVudHMgYXJlIHJlbmRlcmVkIG9ubHkgb25jZSBzZXJ2ZXItc2lkZS5cIik7XG4gICAgfSAvLyB1cGRhdGUgb24gYW55IHN0YXRlIGNoYW5nZXMgKGFzIGlzIHRoZSBkZWZhdWx0KVxuXG5cbiAgICBpZiAodGhpcy5zdGF0ZSAhPT0gbmV4dFN0YXRlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIHVwZGF0ZSBpZiBwcm9wcyBhcmUgc2hhbGxvd2x5IG5vdCBlcXVhbCwgaW5zcGlyZWQgYnkgUHVyZVJlbmRlck1peGluXG4gICAgLy8gd2UgY291bGQgcmV0dXJuIGp1c3QgJ2ZhbHNlJyBoZXJlLCBhbmQgYXZvaWQgdGhlIGBza2lwUmVuZGVyYCBjaGVja3MgZXRjXG4gICAgLy8gaG93ZXZlciwgaXQgaXMgbmljZXIgaWYgbGlmZWN5Y2xlIGV2ZW50cyBhcmUgdHJpZ2dlcmVkIGxpa2UgdXN1YWxseSxcbiAgICAvLyBzbyB3ZSByZXR1cm4gdHJ1ZSBoZXJlIGlmIHByb3BzIGFyZSBzaGFsbG93bHkgbW9kaWZpZWQuXG5cblxuICAgIHJldHVybiAhc2hhbGxvd0VxdWFsKHRoaXMucHJvcHMsIG5leHRQcm9wcyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG1ha2VPYnNlcnZhYmxlUHJvcCh0YXJnZXQsIHByb3BOYW1lKSB7XG4gIHZhciB2YWx1ZUhvbGRlcktleSA9IG5ld1N5bWJvbChcInJlYWN0UHJvcF9cIi5jb25jYXQocHJvcE5hbWUsIFwiX3ZhbHVlSG9sZGVyXCIpKTtcbiAgdmFyIGF0b21Ib2xkZXJLZXkgPSBuZXdTeW1ib2woXCJyZWFjdFByb3BfXCIuY29uY2F0KHByb3BOYW1lLCBcIl9hdG9tSG9sZGVyXCIpKTtcblxuICBmdW5jdGlvbiBnZXRBdG9tKCkge1xuICAgIGlmICghdGhpc1thdG9tSG9sZGVyS2V5XSkge1xuICAgICAgc2V0SGlkZGVuUHJvcCh0aGlzLCBhdG9tSG9sZGVyS2V5LCBjcmVhdGVBdG9tKFwicmVhY3RpdmUgXCIgKyBwcm9wTmFtZSkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzW2F0b21Ib2xkZXJLZXldO1xuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcE5hbWUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGdldEF0b20uY2FsbCh0aGlzKS5yZXBvcnRPYnNlcnZlZCgpO1xuICAgICAgcmV0dXJuIHRoaXNbdmFsdWVIb2xkZXJLZXldO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodikge1xuICAgICAgaWYgKCF0aGlzW2lzRm9yY2luZ1VwZGF0ZUtleV0gJiYgIXNoYWxsb3dFcXVhbCh0aGlzW3ZhbHVlSG9sZGVyS2V5XSwgdikpIHtcbiAgICAgICAgc2V0SGlkZGVuUHJvcCh0aGlzLCB2YWx1ZUhvbGRlcktleSwgdik7XG4gICAgICAgIHNldEhpZGRlblByb3AodGhpcywgc2tpcFJlbmRlcktleSwgdHJ1ZSk7XG4gICAgICAgIGdldEF0b20uY2FsbCh0aGlzKS5yZXBvcnRDaGFuZ2VkKCk7XG4gICAgICAgIHNldEhpZGRlblByb3AodGhpcywgc2tpcFJlbmRlcktleSwgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0SGlkZGVuUHJvcCh0aGlzLCB2YWx1ZUhvbGRlcktleSwgdik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogT2JzZXJ2ZXIgZnVuY3Rpb24gLyBkZWNvcmF0b3JcbiAqL1xuXG5cbmZ1bmN0aW9uIG9ic2VydmVyKGFyZzEsIGFyZzIpIHtcbiAgaWYgKHR5cGVvZiBhcmcxID09PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3RvcmUgbmFtZXMgc2hvdWxkIGJlIHByb3ZpZGVkIGFzIGFycmF5XCIpO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJnMSkpIHtcbiAgICAvLyBUT0RPOiByZW1vdmUgaW4gbmV4dCBtYWpvclxuICAgIC8vIGNvbXBvbmVudCBuZWVkcyBzdG9yZXNcbiAgICBpZiAoIXdhcm5lZEFib3V0T2JzZXJ2ZXJJbmplY3REZXByZWNhdGlvbikge1xuICAgICAgd2FybmVkQWJvdXRPYnNlcnZlckluamVjdERlcHJlY2F0aW9uID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUud2FybignTW9ieCBvYnNlcnZlcjogVXNpbmcgb2JzZXJ2ZXIgdG8gaW5qZWN0IHN0b3JlcyBpcyBkZXByZWNhdGVkIHNpbmNlIDQuMC4gVXNlIGBAaW5qZWN0KFwic3RvcmUxXCIsIFwic3RvcmUyXCIpIEBvYnNlcnZlciBDb21wb25lbnRDbGFzc2Agb3IgYGluamVjdChcInN0b3JlMVwiLCBcInN0b3JlMlwiKShvYnNlcnZlcihjb21wb25lbnRDbGFzcykpYCBpbnN0ZWFkIG9mIGBAb2JzZXJ2ZXIoW1wic3RvcmUxXCIsIFwic3RvcmUyXCJdKSBDb21wb25lbnRDbGFzc2AnKTtcbiAgICB9XG5cbiAgICBpZiAoIWFyZzIpIHtcbiAgICAgIC8vIGludm9rZWQgYXMgZGVjb3JhdG9yXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGNvbXBvbmVudENsYXNzKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZlcihhcmcxLCBjb21wb25lbnRDbGFzcyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaW5qZWN0LmFwcGx5KG51bGwsIGFyZzEpKG9ic2VydmVyKGFyZzIpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tcG9uZW50Q2xhc3MgPSBhcmcxO1xuXG4gIGlmIChjb21wb25lbnRDbGFzcy5pc01vYnhJbmplY3RvciA9PT0gdHJ1ZSkge1xuICAgIGNvbnNvbGUud2FybihcIk1vYnggb2JzZXJ2ZXI6IFlvdSBhcmUgdHJ5aW5nIHRvIHVzZSAnb2JzZXJ2ZXInIG9uIGEgY29tcG9uZW50IHRoYXQgYWxyZWFkeSBoYXMgJ2luamVjdCcuIFBsZWFzZSBhcHBseSAnb2JzZXJ2ZXInIGJlZm9yZSBhcHBseWluZyAnaW5qZWN0J1wiKTtcbiAgfVxuXG4gIGlmIChjb21wb25lbnRDbGFzcy5fX3Byb3RvX18gPT09IFB1cmVDb21wb25lbnQpIHtcbiAgICBjb25zb2xlLndhcm4oXCJNb2J4IG9ic2VydmVyOiBZb3UgYXJlIHVzaW5nICdvYnNlcnZlcicgb24gUmVhY3QuUHVyZUNvbXBvbmVudC4gVGhlc2UgdHdvIGFjaGlldmUgdHdvIG9wcG9zaXRlIGdvYWxzIGFuZCBzaG91bGQgbm90IGJlIHVzZWQgdG9nZXRoZXJcIik7XG4gIH0gLy8gVW53cmFwIGZvcndhcmQgcmVmcyBpbnRvIGA8T2JzZXJ2ZXI+YCBjb21wb25lbnRcbiAgLy8gd2UgbmVlZCB0byB1bndyYXAgdGhlIHJlbmRlciwgYmVjYXVzZSBpdCBpcyB0aGUgaW5uZXIgcmVuZGVyIHRoYXQgbmVlZHMgdG8gYmUgdHJhY2tlZCxcbiAgLy8gbm90IHRoZSBGb3J3YXJkUmVmIEhvQ1xuXG5cbiAgaWYgKFJlYWN0Rm9yd2FyZFJlZlN5bWJvbCAmJiBjb21wb25lbnRDbGFzc1tcIiQkdHlwZW9mXCJdID09PSBSZWFjdEZvcndhcmRSZWZTeW1ib2wpIHtcbiAgICB2YXIgX2Jhc2VSZW5kZXIgPSBjb21wb25lbnRDbGFzcy5yZW5kZXI7XG4gICAgaWYgKHR5cGVvZiBfYmFzZVJlbmRlciAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJyZW5kZXIgcHJvcGVydHkgb2YgRm9yd2FyZFJlZiB3YXMgbm90IGEgZnVuY3Rpb25cIik7IC8vIFRPRE86IGRvIHdlIG5lZWQgdG8gaG9pc3Qgc3RhdGljcyBmcm9tIGJhc2VSZW5kZXIgdG8gdGhlIGZvcndhcmQgcmVmP1xuXG4gICAgcmV0dXJuIGZvcndhcmRSZWYoZnVuY3Rpb24gT2JzZXJ2ZXJGb3J3YXJkUmVmKCkge1xuICAgICAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHM7XG4gICAgICByZXR1cm4gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChPYnNlcnZlciwgbnVsbCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX2Jhc2VSZW5kZXIuYXBwbHkodW5kZWZpbmVkLCBfYXJndW1lbnRzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9IC8vIFN0YXRlbGVzcyBmdW5jdGlvbiBjb21wb25lbnQ6XG4gIC8vIElmIGl0IGlzIGZ1bmN0aW9uIGJ1dCBkb2Vzbid0IHNlZW0gdG8gYmUgYSByZWFjdCBjbGFzcyBjb25zdHJ1Y3RvcixcbiAgLy8gd3JhcCBpdCB0byBhIHJlYWN0IGNsYXNzIGF1dG9tYXRpY2FsbHlcblxuXG4gIGlmICh0eXBlb2YgY29tcG9uZW50Q2xhc3MgPT09IFwiZnVuY3Rpb25cIiAmJiAoIWNvbXBvbmVudENsYXNzLnByb3RvdHlwZSB8fCAhY29tcG9uZW50Q2xhc3MucHJvdG90eXBlLnJlbmRlcikgJiYgIWNvbXBvbmVudENsYXNzLmlzUmVhY3RDbGFzcyAmJiAhQ29tcG9uZW50LmlzUHJvdG90eXBlT2YoY29tcG9uZW50Q2xhc3MpKSB7XG4gICAgdmFyIF9jbGFzcywgX3RlbXA7XG5cbiAgICB2YXIgb2JzZXJ2ZXJDb21wb25lbnQgPSBvYnNlcnZlcigoX3RlbXAgPSBfY2xhc3MgPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgX2luaGVyaXRzKF9jbGFzcywgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIF9jbGFzcygpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9jbGFzcyk7XG5cbiAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihfY2xhc3MpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuXG4gICAgICBfY3JlYXRlQ2xhc3MoX2NsYXNzLCBbe1xuICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBvbmVudENsYXNzLmNhbGwodGhpcywgdGhpcy5wcm9wcywgdGhpcy5jb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gX2NsYXNzO1xuICAgIH0oQ29tcG9uZW50KSwgX2NsYXNzLmRpc3BsYXlOYW1lID0gY29tcG9uZW50Q2xhc3MuZGlzcGxheU5hbWUgfHwgY29tcG9uZW50Q2xhc3MubmFtZSwgX2NsYXNzLmNvbnRleHRUeXBlcyA9IGNvbXBvbmVudENsYXNzLmNvbnRleHRUeXBlcywgX2NsYXNzLnByb3BUeXBlcyA9IGNvbXBvbmVudENsYXNzLnByb3BUeXBlcywgX2NsYXNzLmRlZmF1bHRQcm9wcyA9IGNvbXBvbmVudENsYXNzLmRlZmF1bHRQcm9wcywgX3RlbXApKTtcbiAgICBob2lzdE5vblJlYWN0U3RhdGljc19janMob2JzZXJ2ZXJDb21wb25lbnQsIGNvbXBvbmVudENsYXNzKTtcbiAgICByZXR1cm4gb2JzZXJ2ZXJDb21wb25lbnQ7XG4gIH1cblxuICBpZiAoIWNvbXBvbmVudENsYXNzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHBhc3MgYSB2YWxpZCBjb21wb25lbnQgdG8gJ29ic2VydmVyJ1wiKTtcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBjb21wb25lbnRDbGFzcy5wcm90b3R5cGUgfHwgY29tcG9uZW50Q2xhc3M7XG4gIG1peGluTGlmZWN5Y2xlRXZlbnRzKHRhcmdldCk7XG4gIGNvbXBvbmVudENsYXNzLmlzTW9iWFJlYWN0T2JzZXJ2ZXIgPSB0cnVlO1xuICBtYWtlT2JzZXJ2YWJsZVByb3AodGFyZ2V0LCBcInByb3BzXCIpO1xuICBtYWtlT2JzZXJ2YWJsZVByb3AodGFyZ2V0LCBcInN0YXRlXCIpO1xuICB2YXIgYmFzZVJlbmRlciA9IHRhcmdldC5yZW5kZXI7XG5cbiAgdGFyZ2V0LnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbWFrZUNvbXBvbmVudFJlYWN0aXZlLmNhbGwodGhpcywgYmFzZVJlbmRlcik7XG4gIH07XG5cbiAgcmV0dXJuIGNvbXBvbmVudENsYXNzO1xufVxuXG5mdW5jdGlvbiBtaXhpbkxpZmVjeWNsZUV2ZW50cyh0YXJnZXQpIHtcbiAgW1wiY29tcG9uZW50RGlkTW91bnRcIiwgXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLCBcImNvbXBvbmVudERpZFVwZGF0ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uIChmdW5jTmFtZSkge1xuICAgIHBhdGNoJDEodGFyZ2V0LCBmdW5jTmFtZSk7XG4gIH0pO1xuXG4gIGlmICghdGFyZ2V0LnNob3VsZENvbXBvbmVudFVwZGF0ZSkge1xuICAgIHRhcmdldC5zaG91bGRDb21wb25lbnRVcGRhdGUgPSByZWFjdGl2ZU1peGluLnNob3VsZENvbXBvbmVudFVwZGF0ZTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodGFyZ2V0LnNob3VsZENvbXBvbmVudFVwZGF0ZSAhPT0gcmVhY3RpdmVNaXhpbi5zaG91bGRDb21wb25lbnRVcGRhdGUpIHtcbiAgICAgIC8vIFRPRE86IG1ha2UgdGhyb3cgaW4gbmV4dCBtYWpvclxuICAgICAgY29uc29sZS53YXJuKFwiVXNlIGBzaG91bGRDb21wb25lbnRVcGRhdGVgIGluIGFuIGBvYnNlcnZlcmAgYmFzZWQgY29tcG9uZW50IGJyZWFrcyB0aGUgYmVoYXZpb3Igb2YgYG9ic2VydmVyYCBhbmQgbWlnaHQgbGVhZCB0byB1bmV4cGVjdGVkIHJlc3VsdHMuIE1hbnVhbGx5IGltcGxlbWVudGluZyBgc0NVYCBzaG91bGQgbm90IGJlIG5lZWRlZCB3aGVuIHVzaW5nIG1vYngtcmVhY3QuXCIpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgT2JzZXJ2ZXIgPSBvYnNlcnZlcihmdW5jdGlvbiAoX3JlZjIpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZjIuY2hpbGRyZW4sXG4gICAgICBvYnNlcnZlckluamVjdCA9IF9yZWYyLmluamVjdCxcbiAgICAgIHJlbmRlciA9IF9yZWYyLnJlbmRlcjtcbiAgdmFyIGNvbXBvbmVudCA9IGNoaWxkcmVuIHx8IHJlbmRlcjtcblxuICBpZiAodHlwZW9mIGNvbXBvbmVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCFvYnNlcnZlckluamVjdCkge1xuICAgIHJldHVybiBjb21wb25lbnQoKTtcbiAgfSAvLyBUT0RPOiByZW1vdmUgaW4gbmV4dCBtYWpvclxuXG5cbiAgY29uc29sZS53YXJuKFwiPE9ic2VydmVyIGluamVjdD0uLi4vPiBpcyBubyBsb25nZXIgc3VwcG9ydGVkLiBQbGVhc2UgdXNlIGluamVjdCBvbiB0aGUgZW5jbG9zaW5nIGNvbXBvbmVudCBpbnN0ZWFkXCIpO1xuICB2YXIgSW5qZWN0Q29tcG9uZW50ID0gaW5qZWN0KG9ic2VydmVySW5qZWN0KShjb21wb25lbnQpO1xuICByZXR1cm4gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChJbmplY3RDb21wb25lbnQsIG51bGwpO1xufSk7XG5PYnNlcnZlci5kaXNwbGF5TmFtZSA9IFwiT2JzZXJ2ZXJcIjtcblxudmFyIE9ic2VydmVyUHJvcHNDaGVjayA9IGZ1bmN0aW9uIE9ic2VydmVyUHJvcHNDaGVjayhwcm9wcywga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gIHZhciBleHRyYUtleSA9IGtleSA9PT0gXCJjaGlsZHJlblwiID8gXCJyZW5kZXJcIiA6IFwiY2hpbGRyZW5cIjtcblxuICBpZiAodHlwZW9mIHByb3BzW2tleV0gPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgcHJvcHNbZXh0cmFLZXldID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wLGRvIG5vdCB1c2UgY2hpbGRyZW4gYW5kIHJlbmRlciBpbiB0aGUgc2FtZSB0aW1lIGluYFwiICsgY29tcG9uZW50TmFtZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByb3BzW2tleV0gPT09IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgcHJvcHNbZXh0cmFLZXldID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wIGBcIiArIHByb3BGdWxsTmFtZSArIFwiYCBvZiB0eXBlIGBcIiArIF90eXBlb2YocHJvcHNba2V5XSkgKyBcImAgc3VwcGxpZWQgdG9cIiArIFwiIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGBmdW5jdGlvbmAuXCIpO1xufTtcblxuT2JzZXJ2ZXIucHJvcFR5cGVzID0ge1xuICByZW5kZXI6IE9ic2VydmVyUHJvcHNDaGVjayxcbiAgY2hpbGRyZW46IE9ic2VydmVyUHJvcHNDaGVja1xufTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKTtcbiAgaWYgKHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAvLyBDYWxsIHRoaXMuY29uc3RydWN0b3IuZ0RTRlAgdG8gc3VwcG9ydCBzdWItY2xhc3Nlcy5cbiAgLy8gVXNlIHRoZSBzZXRTdGF0ZSgpIHVwZGF0ZXIgdG8gZW5zdXJlIHN0YXRlIGlzbid0IHN0YWxlIGluIGNlcnRhaW4gZWRnZSBjYXNlcy5cbiAgZnVuY3Rpb24gdXBkYXRlcihwcmV2U3RhdGUpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgcmV0dXJuIHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQgPyBzdGF0ZSA6IG51bGw7XG4gIH1cbiAgLy8gQmluZGluZyBcInRoaXNcIiBpcyBpbXBvcnRhbnQgZm9yIHNoYWxsb3cgcmVuZGVyZXIgc3VwcG9ydC5cbiAgdGhpcy5zZXRTdGF0ZSh1cGRhdGVyLmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gIHRyeSB7XG4gICAgdmFyIHByZXZQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHByZXZTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5wcm9wcyA9IG5leHRQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gbmV4dFN0YXRlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnID0gdHJ1ZTtcbiAgICB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90ID0gdGhpcy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZVxuICAgICk7XG4gIH0gZmluYWxseSB7XG4gICAgdGhpcy5wcm9wcyA9IHByZXZQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gcHJldlN0YXRlO1xuICB9XG59XG5cbi8vIFJlYWN0IG1heSB3YXJuIGFib3V0IGNXTS9jV1JQL2NXVSBtZXRob2RzIGJlaW5nIGRlcHJlY2F0ZWQuXG4vLyBBZGQgYSBmbGFnIHRvIHN1cHByZXNzIHRoZXNlIHdhcm5pbmdzIGZvciB0aGlzIHNwZWNpYWwgY2FzZS5cbmNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5jb21wb25lbnRXaWxsVXBkYXRlLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuXG5mdW5jdGlvbiBwb2x5ZmlsbChDb21wb25lbnQkJDEpIHtcbiAgdmFyIHByb3RvdHlwZSA9IENvbXBvbmVudCQkMS5wcm90b3R5cGU7XG5cbiAgaWYgKCFwcm90b3R5cGUgfHwgIXByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gb25seSBwb2x5ZmlsbCBjbGFzcyBjb21wb25lbnRzJyk7XG4gIH1cblxuICBpZiAoXG4gICAgdHlwZW9mIENvbXBvbmVudCQkMS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgcHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybiBDb21wb25lbnQkJDE7XG4gIH1cblxuICAvLyBJZiBuZXcgY29tcG9uZW50IEFQSXMgYXJlIGRlZmluZWQsIFwidW5zYWZlXCIgbGlmZWN5Y2xlcyB3b24ndCBiZSBjYWxsZWQuXG4gIC8vIEVycm9yIGlmIGFueSBvZiB0aGVzZSBsaWZlY3ljbGVzIGFyZSBwcmVzZW50LFxuICAvLyBCZWNhdXNlIHRoZXkgd291bGQgd29yayBkaWZmZXJlbnRseSBiZXR3ZWVuIG9sZGVyIGFuZCBuZXdlciAoMTYuMyspIHZlcnNpb25zIG9mIFJlYWN0LlxuICB2YXIgZm91bmRXaWxsTW91bnROYW1lID0gbnVsbDtcbiAgdmFyIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsVXBkYXRlTmFtZSA9IG51bGw7XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdjb21wb25lbnRXaWxsTW91bnQnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUnO1xuICB9XG4gIGlmIChcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsIHx8XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSAhPT0gbnVsbFxuICApIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IENvbXBvbmVudCQkMS5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQkJDEubmFtZTtcbiAgICB2YXIgbmV3QXBpTmFtZSA9XG4gICAgICB0eXBlb2YgQ29tcG9uZW50JCQxLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoKSdcbiAgICAgICAgOiAnZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKSc7XG5cbiAgICB0aHJvdyBFcnJvcihcbiAgICAgICdVbnNhZmUgbGVnYWN5IGxpZmVjeWNsZXMgd2lsbCBub3QgYmUgY2FsbGVkIGZvciBjb21wb25lbnRzIHVzaW5nIG5ldyBjb21wb25lbnQgQVBJcy5cXG5cXG4nICtcbiAgICAgICAgY29tcG9uZW50TmFtZSArXG4gICAgICAgICcgdXNlcyAnICtcbiAgICAgICAgbmV3QXBpTmFtZSArXG4gICAgICAgICcgYnV0IGFsc28gY29udGFpbnMgdGhlIGZvbGxvd2luZyBsZWdhY3kgbGlmZWN5Y2xlczonICtcbiAgICAgICAgKGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxNb3VudE5hbWUgOiAnJykgK1xuICAgICAgICAoZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbFxuICAgICAgICAgID8gJ1xcbiAgJyArIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWVcbiAgICAgICAgICA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbFVwZGF0ZU5hbWUgOiAnJykgK1xuICAgICAgICAnXFxuXFxuVGhlIGFib3ZlIGxpZmVjeWNsZXMgc2hvdWxkIGJlIHJlbW92ZWQuIExlYXJuIG1vcmUgYWJvdXQgdGhpcyB3YXJuaW5nIGhlcmU6XFxuJyArXG4gICAgICAgICdodHRwczovL2ZiLm1lL3JlYWN0LWFzeW5jLWNvbXBvbmVudC1saWZlY3ljbGUtaG9va3MnXG4gICAgKTtcbiAgfVxuXG4gIC8vIFJlYWN0IDw9IDE2LjIgZG9lcyBub3Qgc3VwcG9ydCBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV00gYW5kIGNXUlAgdG8gaW52b2tlIHRoZSBuZXcgc3RhdGljIGxpZmVjeWNsZS5cbiAgLy8gTmV3ZXIgdmVyc2lvbnMgb2YgUmVhY3Qgd2lsbCBpZ25vcmUgdGhlc2UgbGlmZWN5Y2xlcyBpZiBnRFNGUCBleGlzdHMuXG4gIGlmICh0eXBlb2YgQ29tcG9uZW50JCQxLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBjb21wb25lbnRXaWxsTW91bnQ7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IGdldFNuYXBzaG90QmVmb3JlVXBkYXRlLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV1UgdG8gaW52b2tlIHRoZSBuZXcgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGF0IGxpZmVjeWNsZSBpZiBnU0JVIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBwb2x5ZmlsbCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIGZvciBjb21wb25lbnRzIHRoYXQgZG8gbm90IGRlZmluZSBjb21wb25lbnREaWRVcGRhdGUoKSBvbiB0aGUgcHJvdG90eXBlJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGNvbXBvbmVudFdpbGxVcGRhdGU7XG5cbiAgICB2YXIgY29tcG9uZW50RGlkVXBkYXRlID0gcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZTtcblxuICAgIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGVQb2x5ZmlsbChcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZSxcbiAgICAgIG1heWJlU25hcHNob3RcbiAgICApIHtcbiAgICAgIC8vIDE2LjMrIHdpbGwgbm90IGV4ZWN1dGUgb3VyIHdpbGwtdXBkYXRlIG1ldGhvZDtcbiAgICAgIC8vIEl0IHdpbGwgcGFzcyBhIHNuYXBzaG90IHZhbHVlIHRvIGRpZC11cGRhdGUgdGhvdWdoLlxuICAgICAgLy8gT2xkZXIgdmVyc2lvbnMgd2lsbCByZXF1aXJlIG91ciBwb2x5ZmlsbGVkIHdpbGwtdXBkYXRlIHZhbHVlLlxuICAgICAgLy8gV2UgbmVlZCB0byBoYW5kbGUgYm90aCBjYXNlcywgYnV0IGNhbid0IGp1c3QgY2hlY2sgZm9yIHRoZSBwcmVzZW5jZSBvZiBcIm1heWJlU25hcHNob3RcIixcbiAgICAgIC8vIEJlY2F1c2UgZm9yIDw9IDE1LnggdmVyc2lvbnMgdGhpcyBtaWdodCBiZSBhIFwicHJldkNvbnRleHRcIiBvYmplY3QuXG4gICAgICAvLyBXZSBhbHNvIGNhbid0IGp1c3QgY2hlY2sgXCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBnZXQtc25hcHNob3QgbWlnaHQgcmV0dXJuIGEgZmFsc3kgdmFsdWUuXG4gICAgICAvLyBTbyBjaGVjayBmb3IgdGhlIGV4cGxpY2l0IF9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyBmbGFnIHRvIGRldGVybWluZSBiZWhhdmlvci5cbiAgICAgIHZhciBzbmFwc2hvdCA9IHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnXG4gICAgICAgID8gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFxuICAgICAgICA6IG1heWJlU25hcHNob3Q7XG5cbiAgICAgIGNvbXBvbmVudERpZFVwZGF0ZS5jYWxsKHRoaXMsIHByZXZQcm9wcywgcHJldlN0YXRlLCBzbmFwc2hvdCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQkJDE7XG59XG5cbnZhciBzcGVjaWFsUmVhY3RLZXlzID0ge1xuICBjaGlsZHJlbjogdHJ1ZSxcbiAga2V5OiB0cnVlLFxuICByZWY6IHRydWVcbn07XG5cbnZhciBQcm92aWRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFByb3ZpZGVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb3ZpZGVyKTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFByb3ZpZGVyKS5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG4gICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICBjb3B5U3RvcmVzKHByb3BzLCBfdGhpcy5zdGF0ZSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFByb3ZpZGVyLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIENoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldENoaWxkQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgc3RvcmVzID0ge307IC8vIGluaGVyaXQgc3RvcmVzXG5cbiAgICAgIGNvcHlTdG9yZXModGhpcy5jb250ZXh0Lm1vYnhTdG9yZXMsIHN0b3Jlcyk7IC8vIGFkZCBvd24gc3RvcmVzXG5cbiAgICAgIGNvcHlTdG9yZXModGhpcy5wcm9wcywgc3RvcmVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1vYnhTdG9yZXM6IHN0b3Jlc1xuICAgICAgfTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICBpZiAoIW5leHRQcm9wcykgcmV0dXJuIG51bGw7XG4gICAgICBpZiAoIXByZXZTdGF0ZSkgcmV0dXJuIG5leHRQcm9wczsgLy8gTWF5YmUgdGhpcyB3YXJuaW5nIGlzIHRvbyBhZ2dyZXNzaXZlP1xuXG4gICAgICBpZiAoT2JqZWN0LmtleXMobmV4dFByb3BzKS5maWx0ZXIodmFsaWRTdG9yZU5hbWUpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMocHJldlN0YXRlKS5maWx0ZXIodmFsaWRTdG9yZU5hbWUpLmxlbmd0aCkgY29uc29sZS53YXJuKFwiTW9iWCBQcm92aWRlcjogVGhlIHNldCBvZiBwcm92aWRlZCBzdG9yZXMgaGFzIGNoYW5nZWQuIFBsZWFzZSBhdm9pZCBjaGFuZ2luZyBzdG9yZXMgYXMgdGhlIGNoYW5nZSBtaWdodCBub3QgcHJvcGFnYXRlIHRvIGFsbCBjaGlsZHJlblwiKTtcbiAgICAgIGlmICghbmV4dFByb3BzLnN1cHByZXNzQ2hhbmdlZFN0b3JlV2FybmluZykgZm9yICh2YXIga2V5IGluIG5leHRQcm9wcykge1xuICAgICAgICBpZiAodmFsaWRTdG9yZU5hbWUoa2V5KSAmJiBwcmV2U3RhdGVba2V5XSAhPT0gbmV4dFByb3BzW2tleV0pIGNvbnNvbGUud2FybihcIk1vYlggUHJvdmlkZXI6IFByb3ZpZGVkIHN0b3JlICdcIiArIGtleSArIFwiJyBoYXMgY2hhbmdlZC4gUGxlYXNlIGF2b2lkIHJlcGxhY2luZyBzdG9yZXMgYXMgdGhlIGNoYW5nZSBtaWdodCBub3QgcHJvcGFnYXRlIHRvIGFsbCBjaGlsZHJlblwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXh0UHJvcHM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFByb3ZpZGVyO1xufShDb21wb25lbnQpO1xuXG5Qcm92aWRlci5jb250ZXh0VHlwZXMgPSB7XG4gIG1vYnhTdG9yZXM6IG9iamVjdE9yT2JzZXJ2YWJsZU9iamVjdFxufTtcblByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICBtb2J4U3RvcmVzOiBvYmplY3RPck9ic2VydmFibGVPYmplY3QuaXNSZXF1aXJlZFxufTtcblxuZnVuY3Rpb24gY29weVN0b3Jlcyhmcm9tLCB0bykge1xuICBpZiAoIWZyb20pIHJldHVybjtcblxuICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgIGlmICh2YWxpZFN0b3JlTmFtZShrZXkpKSB0b1trZXldID0gZnJvbVtrZXldO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkU3RvcmVOYW1lKGtleSkge1xuICByZXR1cm4gIXNwZWNpYWxSZWFjdEtleXNba2V5XSAmJiBrZXkgIT09IFwic3VwcHJlc3NDaGFuZ2VkU3RvcmVXYXJuaW5nXCI7XG59IC8vIFRPRE86IGtpbGwgaW4gbmV4dCBtYWpvclxuXG5cbnBvbHlmaWxsKFByb3ZpZGVyKTtcblxudmFyIHN0b3JlS2V5ID0gbmV3U3ltYm9sKFwiZGlzcG9zZU9uVW5tb3VudFwiKTtcblxuZnVuY3Rpb24gcnVuRGlzcG9zZXJzT25XaWxsVW5tb3VudCgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAoIXRoaXNbc3RvcmVLZXldKSB7XG4gICAgLy8gd2hlbiBkaXNwb3NlT25Vbm1vdW50IGlzIG9ubHkgc2V0IHRvIHNvbWUgaW5zdGFuY2VzIG9mIGEgY29tcG9uZW50IGl0IHdpbGwgc3RpbGwgcGF0Y2ggdGhlIHByb3RvdHlwZVxuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXNbc3RvcmVLZXldLmZvckVhY2goZnVuY3Rpb24gKHByb3BLZXlPckZ1bmN0aW9uKSB7XG4gICAgdmFyIHByb3AgPSB0eXBlb2YgcHJvcEtleU9yRnVuY3Rpb24gPT09IFwic3RyaW5nXCIgPyBfdGhpc1twcm9wS2V5T3JGdW5jdGlvbl0gOiBwcm9wS2V5T3JGdW5jdGlvbjtcblxuICAgIGlmIChwcm9wICE9PSB1bmRlZmluZWQgJiYgcHJvcCAhPT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW21vYngtcmVhY3RdIGRpc3Bvc2VPblVubW91bnQgb25seSB3b3JrcyBvbiBmdW5jdGlvbnMgc3VjaCBhcyBkaXNwb3NlcnMgcmV0dXJuZWQgYnkgcmVhY3Rpb25zLCBhdXRvcnVuLCBldGMuXCIpO1xuICAgICAgfVxuXG4gICAgICBwcm9wKCk7XG4gICAgfVxuICB9KTtcbiAgdGhpc1tzdG9yZUtleV0gPSBbXTtcbn1cblxuZnVuY3Rpb24gZGlzcG9zZU9uVW5tb3VudCh0YXJnZXQsIHByb3BlcnR5S2V5T3JGdW5jdGlvbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wZXJ0eUtleU9yRnVuY3Rpb24pKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5T3JGdW5jdGlvbi5tYXAoZnVuY3Rpb24gKGZuKSB7XG4gICAgICByZXR1cm4gZGlzcG9zZU9uVW5tb3VudCh0YXJnZXQsIGZuKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICghdGFyZ2V0IGluc3RhbmNlb2YgQ29tcG9uZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiW21vYngtcmVhY3RdIGRpc3Bvc2VPblVubW91bnQgb25seSB3b3JrcyBvbiBjbGFzcyBiYXNlZCBSZWFjdCBjb21wb25lbnRzLlwiKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJvcGVydHlLZXlPckZ1bmN0aW9uICE9PSBcInN0cmluZ1wiICYmIHR5cGVvZiBwcm9wZXJ0eUtleU9yRnVuY3Rpb24gIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlttb2J4LXJlYWN0XSBkaXNwb3NlT25Vbm1vdW50IG9ubHkgd29ya3MgaWYgdGhlIHBhcmFtZXRlciBpcyBlaXRoZXIgYSBwcm9wZXJ0eSBrZXkgb3IgYSBmdW5jdGlvbi5cIik7XG4gIH0gLy8gYWRkIHByb3BlcnR5IGtleSAvIGZ1bmN0aW9uIHdlIHdhbnQgcnVuIChkaXNwb3NlZCkgdG8gdGhlIHN0b3JlXG5cblxuICB2YXIgY29tcG9uZW50V2FzQWxyZWFkeU1vZGlmaWVkID0gISF0YXJnZXRbc3RvcmVLZXldO1xuICB2YXIgc3RvcmUgPSB0YXJnZXRbc3RvcmVLZXldIHx8ICh0YXJnZXRbc3RvcmVLZXldID0gW10pO1xuICBzdG9yZS5wdXNoKHByb3BlcnR5S2V5T3JGdW5jdGlvbik7IC8vIHR3ZWFrIHRoZSBjb21wb25lbnQgY2xhc3MgY29tcG9uZW50V2lsbFVubW91bnQgaWYgbm90IGRvbmUgYWxyZWFkeVxuXG4gIGlmICghY29tcG9uZW50V2FzQWxyZWFkeU1vZGlmaWVkKSB7XG4gICAgcGF0Y2godGFyZ2V0LCBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsIHJ1bkRpc3Bvc2Vyc09uV2lsbFVubW91bnQpO1xuICB9IC8vIHJldHVybiB0aGUgZGlzcG9zZXIgYXMgaXMgaWYgaW52b2tlZCBhcyBhIG5vbiBkZWNvcmF0b3JcblxuXG4gIGlmICh0eXBlb2YgcHJvcGVydHlLZXlPckZ1bmN0aW9uICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5T3JGdW5jdGlvbjtcbiAgfVxufVxuXG5pZiAoIUNvbXBvbmVudCkgdGhyb3cgbmV3IEVycm9yKFwibW9ieC1yZWFjdCByZXF1aXJlcyBSZWFjdCB0byBiZSBhdmFpbGFibGVcIik7XG5pZiAoIXNweSkgdGhyb3cgbmV3IEVycm9yKFwibW9ieC1yZWFjdCByZXF1aXJlcyBtb2J4IHRvIGJlIGF2YWlsYWJsZVwiKTtcbmlmICh0eXBlb2YgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgPT09IFwiZnVuY3Rpb25cIikgY29uZmlndXJlKHtcbiAgcmVhY3Rpb25TY2hlZHVsZXI6IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzXG59KTtcbnZhciBvbkVycm9yID0gZnVuY3Rpb24gb25FcnJvcihmbikge1xuICByZXR1cm4gZXJyb3JzUmVwb3J0ZXIub24oZm4pO1xufTtcblxuaWYgKCh0eXBlb2YgX19NT0JYX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihfX01PQlhfREVWVE9PTFNfR0xPQkFMX0hPT0tfXykpID09PSBcIm9iamVjdFwiKSB7XG4gIHZhciBtb2J4ID0ge1xuICAgIHNweTogc3B5LFxuICAgIGV4dHJhczoge1xuICAgICAgZ2V0RGVidWdOYW1lOiBnZXREZWJ1Z05hbWVcbiAgICB9XG4gIH07XG4gIHZhciBtb2J4UmVhY3QgPSB7XG4gICAgcmVuZGVyUmVwb3J0ZXI6IHJlbmRlclJlcG9ydGVyLFxuICAgIGNvbXBvbmVudEJ5Tm9kZVJlZ2lzdHJ5OiBjb21wb25lbnRCeU5vZGVSZWdpc3RyeSxcbiAgICBjb21wb25lbnRCeU5vZGVSZWdpc3Rlcnk6IGNvbXBvbmVudEJ5Tm9kZVJlZ2lzdHJ5LFxuICAgIHRyYWNrQ29tcG9uZW50czogdHJhY2tDb21wb25lbnRzXG4gIH07XG5cbiAgX19NT0JYX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uaW5qZWN0TW9ieFJlYWN0KG1vYnhSZWFjdCwgbW9ieCk7XG59XG5cbmV4cG9ydCB7IHByb3BUeXBlcywgcHJvcFR5cGVzIGFzIFByb3BUeXBlcywgb25FcnJvciwgb2JzZXJ2ZXIsIE9ic2VydmVyLCByZW5kZXJSZXBvcnRlciwgY29tcG9uZW50QnlOb2RlUmVnaXN0cnkgYXMgY29tcG9uZW50QnlOb2RlUmVnaXN0ZXJ5LCBjb21wb25lbnRCeU5vZGVSZWdpc3RyeSwgdHJhY2tDb21wb25lbnRzLCB1c2VTdGF0aWNSZW5kZXJpbmcsIFByb3ZpZGVyLCBpbmplY3QsIGRpc3Bvc2VPblVubW91bnQgfTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcblxuY29uc3QgU29jaWFsQnV0dG9uID0gKHsgbGluaywgaWQgfSkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxhIGNsYXNzTmFtZT1cInNiLXNvY2lhbC1uZXR3b3JrXCIgaHJlZj17bGlua30gdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNiLXNvY2lhbC1uZXR3b3JrLWNvbnRhaW5lclwiPjxpbWcgaWQ9e2lkfSBzcmM9e2Avc3RhdGljL2ltYWdlcy8ke2lkID09PSAncm9vdC1tZScgPyBgJHtpZH0uanBnYCA6IGAke2lkfS5zdmdgfWB9IC8+PC9kaXY+XG4gICAgICAgIDwvYT5cbiAgICApXG59XG5leHBvcnQgZGVmYXVsdCBTb2NpYWxCdXR0b24iLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KHJlcXVpcmUoXCJyZWFjdFwiKSk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJyZWFjdFwiXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLlBhcnRpY2xlcz10KHJlcXVpcmUoXCJyZWFjdFwiKSk6ZS5QYXJ0aWNsZXM9dChlLlJlYWN0KX0odGhpcyxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gaShuKXtpZih0W25dKXJldHVybiB0W25dLmV4cG9ydHM7dmFyIHI9dFtuXT17aTpuLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbbl0uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMsaSksci5sPSEwLHIuZXhwb3J0c31yZXR1cm4gaS5tPWUsaS5jPXQsaS5kPWZ1bmN0aW9uKGUsdCxuKXtpLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxnZXQ6bn0pfSxpLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0saS50PWZ1bmN0aW9uKGUsdCl7aWYoMSZ0JiYoZT1pKGUpKSw4JnQpcmV0dXJuIGU7aWYoNCZ0JiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciBuPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoaS5yKG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJnQmJlwic3RyaW5nXCIhPXR5cGVvZiBlKWZvcih2YXIgciBpbiBlKWkuZChuLHIsZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19LmJpbmQobnVsbCxyKSk7cmV0dXJuIG59LGkubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gaS5kKHQsXCJhXCIsdCksdH0saS5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxpLnA9XCJcIixpKGkucz0yNyl9KFtmdW5jdGlvbihlLHQsaSl7dmFyIG49aSgxOCkscj1cIm9iamVjdFwiPT10eXBlb2Ygc2VsZiYmc2VsZiYmc2VsZi5PYmplY3Q9PT1PYmplY3QmJnNlbGYsYT1ufHxyfHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7ZS5leHBvcnRzPWF9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxmdW5jdGlvbihlKXtlLkNJUkNMRT1cImNpcmNsZVwiLGUuRURHRT1cImVkZ2VcIixlLlRSSUFOR0xFPVwidHJpYW5nbGVcIixlLlBPTFlHT049XCJwb2x5Z29uXCIsZS5TVEFSPVwic3RhclwiLGUuSU1BR0U9XCJpbWFnZVwiLGUuSU1BR0VTPVwiaW1hZ2VzXCJ9KHQuU2hhcGVUeXBlfHwodC5TaGFwZVR5cGU9e30pKSxmdW5jdGlvbihlKXtlLlRPUD1cInRvcFwiLGUuVE9QX1JJR0hUPVwidG9wLXJpZ2h0XCIsZS5SSUdIVD1cInJpZ2h0XCIsZS5CT1RUT01fUklHSFQ9XCJib3R0b20tcmlnaHRcIixlLkJPVFRPTT1cImJvdHRvbVwiLGUuQk9UVE9NX0xFRlQ9XCJib3R0b20tbGVmdFwiLGUuTEVGVD1cImxlZnRcIixlLlRPUF9MRUZUPVwidG9wLWxlZnRcIixlLk5PTkU9XCJub25lXCJ9KHQuTW92ZURpcmVjdGlvbnx8KHQuTW92ZURpcmVjdGlvbj17fSkpLGZ1bmN0aW9uKGUpe2UuQk9VTkNFPVwiYm91bmNlXCIsZS5PVVQ9XCJvdXRcIn0odC5Nb3ZlT3V0TW9kZXx8KHQuTW92ZU91dE1vZGU9e30pKSxmdW5jdGlvbihlKXtlLkdSQUI9XCJncmFiXCIsZS5QVVNIPVwicHVzaFwiLGUuUkVNT1ZFPVwicmVtb3ZlXCIsZS5CVUJCTEU9XCJidWJibGVcIixlLlJFUFVMU0U9XCJyZXB1bHNlXCJ9KHQuSW50ZXJhY3Rpdml0eU1vZGV8fCh0LkludGVyYWN0aXZpdHlNb2RlPXt9KSksZnVuY3Rpb24oZSl7ZS5JTkxJTkU9XCJpbmxpbmVcIixlLklOU0lERT1cImluc2lkZVwiLGUuT1VUU0lERT1cIm91dHNpZGVcIn0odC5Qb2x5Z29uVHlwZXx8KHQuUG9seWdvblR5cGU9e30pKSxmdW5jdGlvbihlKXtlLlJBTkRPTV9QT0lOVD1cInJhbmRvbS1wb2ludFwiLGUuT05FX1BFUl9QT0lOVD1cIm9uZS1wZXItcG9pbnRcIixlLlJBTkRPTV9MRU5HVEg9XCJyYW5kb20tbGVuZ3RoXCIsZS5FUVVJRElTVEFOVD1cImVxdWlkaXN0YW50XCJ9KHQuUG9seWdvbklubGluZUFycmFuZ2VtZW50VHlwZXx8KHQuUG9seWdvbklubGluZUFycmFuZ2VtZW50VHlwZT17fSkpLGZ1bmN0aW9uKGUpe2UuUEFUSD1cInBhdGhcIixlLlJBRElVUz1cInJhZGl1c1wifSh0LlBvbHlnb25Nb3ZlVHlwZXx8KHQuUG9seWdvbk1vdmVUeXBlPXt9KSl9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe2Zvcih2YXIgaSBpbiBlKXQuaGFzT3duUHJvcGVydHkoaSl8fCh0W2ldPWVbaV0pfXZhciByPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPXIoaSgxNSkpO3QuSW50ZXJhY3Rpdml0eT1hLmRlZmF1bHQ7dmFyIG89cihpKDI5KSk7dC5Nb2Rlcz1vLmRlZmF1bHQ7dmFyIHM9cihpKDMwKSk7dC5QYXJ0aWNsZT1zLmRlZmF1bHQ7dmFyIGM9cihpKDMxKSk7dC5QYXJ0aWNsZU1hbmFnZXI9Yy5kZWZhdWx0O3ZhciBsPXIoaSgzMikpO3QuUGFydGljbGVzTGlicmFyeT1sLmRlZmF1bHQ7dmFyIHU9cihpKDM0KSk7dC5WZW5kb3JzPXUuZGVmYXVsdCxuKGkoMzUpKSxuKGkoMSkpLG4oaSgzNikpLG4oaSg0KSl9LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDUxKSxyPWkoNTcpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciBpPXIoZSx0KTtyZXR1cm4gbihpKT9pOnZvaWQgMH19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybihuPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9KShlKX1mdW5jdGlvbiByKGUsdCl7cmV0dXJuIHQuaW5kZXhPZihlKT4tMX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmhleFRvUmdiPWZ1bmN0aW9uKGUpe2U9ZS5yZXBsYWNlKC9eIz8oW2EtZlxcZF0pKFthLWZcXGRdKShbYS1mXFxkXSkkL2ksZnVuY3Rpb24oZSx0LGksbil7cmV0dXJuIHQrdCtpK2krbitufSk7dmFyIHQ9L14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaS5leGVjKGUpO3JldHVybiB0P3tyOnBhcnNlSW50KHRbMV0sMTYpLGc6cGFyc2VJbnQodFsyXSwxNiksYjpwYXJzZUludCh0WzNdLDE2KX06bnVsbH0sdC5jbGFtcD1mdW5jdGlvbihlLHQsaSl7cmV0dXJuIE1hdGgubWluKE1hdGgubWF4KGUsdCksaSl9LHQuaXNJbkFycmF5PXIsdC5pc0VxdWFsPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIEFycmF5LmlzQXJyYXkodCk/cihlLHQpOnQ9PT1lfSx0LmRlZXBBc3NpZ249ZnVuY3Rpb24oZSl7Zm9yKHZhciBpPWFyZ3VtZW50cy5sZW5ndGgscj1uZXcgQXJyYXkoaT4xP2ktMTowKSxhPTE7YTxpO2ErKylyW2EtMV09YXJndW1lbnRzW2FdO2Zvcih2YXIgbz0wLHM9cjtvPHMubGVuZ3RoO28rKyl7dmFyIGM9c1tvXTtpZihudWxsIT1jKXt2YXIgbD1uKGMpO2lmKFwib2JqZWN0XCI9PT1sKXt2YXIgdT1BcnJheS5pc0FycmF5KGMpO3U/XCJvYmplY3RcIj09PW4oZSkmJmUmJkFycmF5LmlzQXJyYXkoZSl8fChlPVtdKTpcIm9iamVjdFwiPT09bihlKSYmZSYmIUFycmF5LmlzQXJyYXkoZSl8fChlPXt9KTt2YXIgaD1mdW5jdGlvbihpKXtpZihcIl9fcHJvdG9fX1wiPT09aSlyZXR1cm5cImNvbnRpbnVlXCI7dmFyIHI9Y1tpXSxhPVwib2JqZWN0XCI9PT1uKHIpO2EmJkFycmF5LmlzQXJyYXkocik/ZVtpXT1yLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gdC5kZWVwQXNzaWduKGVbaV0sbil9KTplW2ldPXQuZGVlcEFzc2lnbihlW2ldLHIpfTtmb3IodmFyIHkgaW4gYyloKHkpfWVsc2UgZT1jfX1yZXR1cm4gZX0sdC5nZXRDb2xvcj1mdW5jdGlvbihlKXt2YXIgaT17fTtpZihcIm9iamVjdFwiPT1uKGUpKWlmKGUgaW5zdGFuY2VvZiBBcnJheSl7dmFyIHI9ZVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqZS5sZW5ndGgpXTtpLnJnYj10LmhleFRvUmdiKHIpfWVsc2V7dmFyIGE9ZS5yLG89ZS5nLHM9ZS5iO2lmKHZvaWQgMCE9PWEmJnZvaWQgMCE9PW8mJnZvaWQgMCE9PXMpaS5yZ2I9e3I6YSxnOm8sYjpzfTtlbHNle3ZhciBjPWUuaCxsPWUucyx1PWUubDt2b2lkIDAhPT1jJiZ2b2lkIDAhPT1vJiZ2b2lkIDAhPT1zJiYoaS5oc2w9e2g6YyxzOmwsbDp1fSl9fWVsc2VcInJhbmRvbVwiPT1lP2kucmdiPXtyOk1hdGguZmxvb3IoMjU1Kk1hdGgucmFuZG9tKCkpKzEsZzpNYXRoLmZsb29yKDI1NSpNYXRoLnJhbmRvbSgpKSsxLGI6TWF0aC5mbG9vcigyNTUqTWF0aC5yYW5kb20oKSkrMX06XCJzdHJpbmdcIj09dHlwZW9mIGUmJihpLnJnYj10LmhleFRvUmdiKGUpKTtyZXR1cm4gaX19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDQxKSxyPWkoNDIpLGE9aSg0Myksbz1pKDQ0KSxzPWkoNDUpO2Z1bmN0aW9uIGMoZSl7dmFyIHQ9LTEsaT1udWxsPT1lPzA6ZS5sZW5ndGg7Zm9yKHRoaXMuY2xlYXIoKTsrK3Q8aTspe3ZhciBuPWVbdF07dGhpcy5zZXQoblswXSxuWzFdKX19Yy5wcm90b3R5cGUuY2xlYXI9bixjLnByb3RvdHlwZS5kZWxldGU9cixjLnByb3RvdHlwZS5nZXQ9YSxjLnByb3RvdHlwZS5oYXM9byxjLnByb3RvdHlwZS5zZXQ9cyxlLmV4cG9ydHM9Y30sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoMTYpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgaT1lLmxlbmd0aDtpLS07KWlmKG4oZVtpXVswXSx0KSlyZXR1cm4gaTtyZXR1cm4tMX19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDEyKSxyPWkoNTMpLGE9aSg1NCksbz1cIltvYmplY3QgTnVsbF1cIixzPVwiW29iamVjdCBVbmRlZmluZWRdXCIsYz1uP24udG9TdHJpbmdUYWc6dm9pZCAwO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT92b2lkIDA9PT1lP3M6bzpjJiZjIGluIE9iamVjdChlKT9yKGUpOmEoZSl9fSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSgzKShPYmplY3QsXCJjcmVhdGVcIik7ZS5leHBvcnRzPW59LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDY2KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgaT1lLl9fZGF0YV9fO3JldHVybiBuKHQpP2lbXCJzdHJpbmdcIj09dHlwZW9mIHQ/XCJzdHJpbmdcIjpcImhhc2hcIl06aS5tYXB9fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZSYmXCJvYmplY3RcIj09dHlwZW9mIGV9fSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSgzKShpKDApLFwiTWFwXCIpO2UuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSgwKS5TeW1ib2w7ZS5leHBvcnRzPW59LGZ1bmN0aW9uKGUsdCl7dmFyIGk9QXJyYXkuaXNBcnJheTtlLmV4cG9ydHM9aX0sZnVuY3Rpb24odCxpKXt0LmV4cG9ydHM9ZX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0KXtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG49dFtpXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByLGE9aSgxKTshZnVuY3Rpb24oZSl7ZS5NT1VTRU1PVkU9XCJtb3VzZW1vdmVcIixlLk1PVVNFTEVBVkU9XCJtb3VzZWxlYXZlXCJ9KHI9dC5Nb3VzZUludGVyYWN0aXZpdHlTdGF0dXN8fCh0Lk1vdXNlSW50ZXJhY3Rpdml0eVN0YXR1cz17fSkpO3ZhciBvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMubGlicmFyeT10LHRoaXMubW91c2VNb3ZlUG9zaXRpb249e3g6MCx5OjB9LHRoaXMubW91c2VDbGlja1Bvc2l0aW9uPXt4OjAseTowfSx0aGlzLm1vdXNlQ2xpY2tUaW1lPTAsdGhpcy5vbk1vdXNlTW92ZT10aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcyksdGhpcy5vbk1vdXNlTGVhdmU9dGhpcy5vbk1vdXNlTGVhdmUuYmluZCh0aGlzKSx0aGlzLm9uTW91c2VDbGljaz10aGlzLm9uTW91c2VDbGljay5iaW5kKHRoaXMpfXZhciB0LGksbztyZXR1cm4gdD1lLChpPVt7a2V5OlwiYXR0YWNoRXZlbnRIYW5kbGVyc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5saWJyYXJ5LmdldFBhcmFtZXRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5pbnRlcmFjdGl2aXR5fSk7XCJ3aW5kb3dcIj09PWUuZGV0ZWN0X29uP3RoaXMuaW50ZXJhY3Rpb25FbGVtZW50PXdpbmRvdzp0aGlzLmludGVyYWN0aW9uRWxlbWVudD10aGlzLmxpYnJhcnkuY2FudmFzLmVsZW1lbnQsKGUuZXZlbnRzLm9uaG92ZXIuZW5hYmxlfHxlLmV2ZW50cy5vbmNsaWNrLmVuYWJsZSkmJih0aGlzLmludGVyYWN0aW9uRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsdGhpcy5vbk1vdXNlTW92ZSksdGhpcy5pbnRlcmFjdGlvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIix0aGlzLm9uTW91c2VMZWF2ZSkpLGUuZXZlbnRzLm9uY2xpY2suZW5hYmxlJiZ0aGlzLmludGVyYWN0aW9uRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0aGlzLm9uTW91c2VDbGljayl9fSx7a2V5OlwiZGV0YWNoRXZlbnRIYW5kbGVyc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5saWJyYXJ5LmdldFBhcmFtZXRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5pbnRlcmFjdGl2aXR5fSk7dGhpcy5pbnRlcmFjdGlvbkVsZW1lbnQmJigoZS5ldmVudHMub25ob3Zlci5lbmFibGV8fGUuZXZlbnRzLm9uY2xpY2suZW5hYmxlKSYmKHRoaXMuaW50ZXJhY3Rpb25FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIix0aGlzLm9uTW91c2VNb3ZlKSx0aGlzLmludGVyYWN0aW9uRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLHRoaXMub25Nb3VzZUxlYXZlKSksZS5ldmVudHMub25jbGljay5lbmFibGUmJnRoaXMuaW50ZXJhY3Rpb25FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMub25Nb3VzZUNsaWNrKSl9fSx7a2V5Olwib25Nb3VzZU1vdmVcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD17eDowLHk6MH07dGhpcy5pbnRlcmFjdGlvbkVsZW1lbnQ9PT13aW5kb3c/KHQueD1lLmNsaWVudFgsdC55PWUuY2xpZW50WSk6KHQueD1lLm9mZnNldFh8fGUuY2xpZW50WCx0Lnk9ZS5vZmZzZXRZfHxlLmNsaWVudFkpLHRoaXMubW91c2VNb3ZlUG9zaXRpb249dCx0aGlzLmxpYnJhcnkucmV0aW5hJiYodGhpcy5tb3VzZU1vdmVQb3NpdGlvbi54Kj10aGlzLmxpYnJhcnkuY2FudmFzLnB4cmF0aW8sdGhpcy5tb3VzZU1vdmVQb3NpdGlvbi55Kj10aGlzLmxpYnJhcnkuY2FudmFzLnB4cmF0aW8pLHRoaXMubW91c2VTdGF0dXM9ci5NT1VTRU1PVkV9fSx7a2V5Olwib25Nb3VzZUxlYXZlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLm1vdXNlTW92ZVBvc2l0aW9uLng9MCx0aGlzLm1vdXNlTW92ZVBvc2l0aW9uLnk9MCx0aGlzLm1vdXNlU3RhdHVzPXIuTU9VU0VMRUFWRX19LHtrZXk6XCJvbk1vdXNlQ2xpY2tcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLmxpYnJhcnkuZ2V0UGFyYW1ldGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLmludGVyYWN0aXZpdHl9KSxpPXRoaXMubGlicmFyeS5nZXRQYXJhbWV0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFydGljbGVzfSksbj10aGlzLmxpYnJhcnkuZ2V0UGFyYW1ldGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLnBvbHlnb259KTtpZih0aGlzLm1vdXNlQ2xpY2tQb3NpdGlvbj1PYmplY3QuYXNzaWduKHt9LHRoaXMubW91c2VNb3ZlUG9zaXRpb24pLG4uZW5hYmxlJiZbYS5Qb2x5Z29uVHlwZS5JTlNJREUsYS5Qb2x5Z29uVHlwZS5PVVRTSURFXS5pbmRleE9mKG4udHlwZSk+LTEpe3ZhciByPXRoaXMubGlicmFyeS5wb2x5Z29uTWFzay5pc1BvaW50SW5zaWRlUG9seWdvbih0aGlzLm1vdXNlQ2xpY2tQb3NpdGlvbik7aWYobi50eXBlPT09YS5Qb2x5Z29uVHlwZS5JTlNJREUmJiFyKXJldHVybjtpZihuLnR5cGU9PT1hLlBvbHlnb25UeXBlLk9VVFNJREUmJnIpcmV0dXJufWlmKHRoaXMubW91c2VDbGlja1RpbWU9KG5ldyBEYXRlKS5nZXRUaW1lKCksdC5ldmVudHMub25jbGljay5lbmFibGUpc3dpdGNoKHQuZXZlbnRzLm9uY2xpY2subW9kZSl7Y2FzZSBhLkludGVyYWN0aXZpdHlNb2RlLlBVU0g6aS5tb3ZlLmVuYWJsZT90aGlzLmxpYnJhcnkubW9kZXMucHVzaFBhcnRpY2xlcyh0Lm1vZGVzLnB1c2gucGFydGljbGVzX25iLHRoaXMubW91c2VDbGlja1Bvc2l0aW9uKToxPT10Lm1vZGVzLnB1c2gucGFydGljbGVzX25iP3RoaXMubGlicmFyeS5tb2Rlcy5wdXNoUGFydGljbGVzKHQubW9kZXMucHVzaC5wYXJ0aWNsZXNfbmIsdGhpcy5tb3VzZUNsaWNrUG9zaXRpb24pOnQubW9kZXMucHVzaC5wYXJ0aWNsZXNfbmI+MSYmdGhpcy5saWJyYXJ5Lm1vZGVzLnB1c2hQYXJ0aWNsZXModC5tb2Rlcy5wdXNoLnBhcnRpY2xlc19uYik7YnJlYWs7Y2FzZSBhLkludGVyYWN0aXZpdHlNb2RlLlJFTU9WRTp0aGlzLmxpYnJhcnkubW9kZXMucmVtb3ZlUGFydGljbGVzKHQubW9kZXMucmVtb3ZlLnBhcnRpY2xlc19uYik7YnJlYWs7Y2FzZSBhLkludGVyYWN0aXZpdHlNb2RlLkJVQkJMRTp0aGlzLmxpYnJhcnkubW9kZXMuYnViYmxlX2NsaWNraW5nPSEwO2JyZWFrO2Nhc2UgYS5JbnRlcmFjdGl2aXR5TW9kZS5SRVBVTFNFOnRoaXMubGlicmFyeS5tb2Rlcy5yZXB1bHNlX2NsaWNraW5nPSEwLHRoaXMubGlicmFyeS5tb2Rlcy5yZXB1bHNlX2NvdW50PTAsdGhpcy5saWJyYXJ5Lm1vZGVzLnJlcHVsc2VfZmluaXNoPSExLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlLmxpYnJhcnkubW9kZXMucmVwdWxzZV9jbGlja2luZz0hMX0sMWUzKnQubW9kZXMucmVwdWxzZS5kdXJhdGlvbil9fX0se2tleTpcImxpbmtQYXJ0aWNsZXNcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBpPXRoaXMubGlicmFyeS5tYW5hZ2VyLmdldERpc3RhbmNlKGUsdCksbj10aGlzLmxpYnJhcnkuY2FudmFzLHI9dGhpcy5saWJyYXJ5LmdldFBhcmFtZXRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5wYXJ0aWNsZXMubGluZV9saW5rZWR9KTtpZihpPD1yLmRpc3RhbmNlKXt2YXIgYT1yLm9wYWNpdHktaS8oMS9yLm9wYWNpdHkpL3IuZGlzdGFuY2U7aWYoYT4wKXt2YXIgbz1yLmNvbG9yX3JnYl9saW5lLHM9by5yLGM9by5nLGw9by5iO24uY3R4LnNhdmUoKSxuLmN0eC5zdHJva2VTdHlsZT1cInJnYmEoIFwiLmNvbmNhdChzLFwiLCBcIikuY29uY2F0KGMsXCIsIFwiKS5jb25jYXQobCxcIiwgXCIpLmNvbmNhdChhLFwiIClcIiksbi5jdHgubGluZVdpZHRoPXIud2lkdGgsbi5jdHguYmVnaW5QYXRoKCksci5zaGFkb3cuZW5hYmxlJiYobi5jdHguc2hhZG93Qmx1cj1yLnNoYWRvdy5ibHVyLG4uY3R4LnNoYWRvd0NvbG9yPXIuc2hhZG93LmNvbG9yKSxuLmN0eC5tb3ZlVG8oZS54LGUueSksbi5jdHgubGluZVRvKHQueCx0LnkpLG4uY3R4LnN0cm9rZSgpLG4uY3R4LmNsb3NlUGF0aCgpLG4uY3R4LnJlc3RvcmUoKX19fX0se2tleTpcImF0dHJhY3RQYXJ0aWNsZXNcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBpPXRoaXMubGlicmFyeS5tYW5hZ2VyLmdldERpc3RhbmNlcyhlLHQpLG49aS5kaXN0YW5jZSxyPWkuZGlzdGFuY2VYLGE9aS5kaXN0YW5jZVksbz10aGlzLmxpYnJhcnkuZ2V0UGFyYW1ldGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLnBhcnRpY2xlcy5saW5lX2xpbmtlZH0pLHM9dGhpcy5saWJyYXJ5LmdldFBhcmFtZXRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5wYXJ0aWNsZXMubW92ZS5hdHRyYWN0fSk7aWYobjw9by5kaXN0YW5jZSl7dmFyIGM9ci8oMWUzKnMucm90YXRlWCksbD1hLygxZTMqcy5yb3RhdGVZKTtlLnZ4LT1jLGUudnktPWwsdC52eCs9Yyx0LnZ5Kz1sfX19LHtrZXk6XCJib3VuY2VQYXJ0aWNsZXNcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3RoaXMubGlicmFyeS5tYW5hZ2VyLmdldERpc3RhbmNlKGUsdCk8PWUucmFkaXVzK3QucmFkaXVzJiYoZS52eD0tZS52eCxlLnZ5PS1lLnZ5LHQudng9LXQudngsdC52eT0tdC52eSl9fV0pJiZuKHQucHJvdG90eXBlLGkpLG8mJm4odCxvKSxlfSgpO3QuZGVmYXVsdD1vfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBlPT09dHx8ZSE9ZSYmdCE9dH19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDcpLHI9aSgxOSksYT1cIltvYmplY3QgQXN5bmNGdW5jdGlvbl1cIixvPVwiW29iamVjdCBGdW5jdGlvbl1cIixzPVwiW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl1cIixjPVwiW29iamVjdCBQcm94eV1cIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoIXIoZSkpcmV0dXJuITE7dmFyIHQ9bihlKTtyZXR1cm4gdD09b3x8dD09c3x8dD09YXx8dD09Y319LGZ1bmN0aW9uKGUsdCxpKXsoZnVuY3Rpb24odCl7dmFyIGk9XCJvYmplY3RcIj09dHlwZW9mIHQmJnQmJnQuT2JqZWN0PT09T2JqZWN0JiZ0O2UuZXhwb3J0cz1pfSkuY2FsbCh0aGlzLGkoNTIpKX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9dHlwZW9mIGU7cmV0dXJuIG51bGwhPWUmJihcIm9iamVjdFwiPT10fHxcImZ1bmN0aW9uXCI9PXQpfX0sZnVuY3Rpb24oZSx0KXt2YXIgaT1GdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKG51bGwhPWUpe3RyeXtyZXR1cm4gaS5jYWxsKGUpfWNhdGNoKGUpe310cnl7cmV0dXJuIGUrXCJcIn1jYXRjaChlKXt9fXJldHVyblwiXCJ9fSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSg1OCkscj1pKDY1KSxhPWkoNjcpLG89aSg2OCkscz1pKDY5KTtmdW5jdGlvbiBjKGUpe3ZhciB0PS0xLGk9bnVsbD09ZT8wOmUubGVuZ3RoO2Zvcih0aGlzLmNsZWFyKCk7Kyt0PGk7KXt2YXIgbj1lW3RdO3RoaXMuc2V0KG5bMF0sblsxXSl9fWMucHJvdG90eXBlLmNsZWFyPW4sYy5wcm90b3R5cGUuZGVsZXRlPXIsYy5wcm90b3R5cGUuZ2V0PWEsYy5wcm90b3R5cGUuaGFzPW8sYy5wcm90b3R5cGUuc2V0PXMsZS5leHBvcnRzPWN9LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDcwKSxyPWkoNzMpLGE9aSg3NCksbz0xLHM9MjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LGksYyxsLHUpe3ZhciBoPWkmbyx5PWUubGVuZ3RoLHA9dC5sZW5ndGg7aWYoeSE9cCYmIShoJiZwPnkpKXJldHVybiExO3ZhciB2PXUuZ2V0KGUpO2lmKHYmJnUuZ2V0KHQpKXJldHVybiB2PT10O3ZhciBmPS0xLGQ9ITAsYj1pJnM/bmV3IG46dm9pZCAwO2Zvcih1LnNldChlLHQpLHUuc2V0KHQsZSk7KytmPHk7KXt2YXIgZz1lW2ZdLG09dFtmXTtpZihjKXZhciBfPWg/YyhtLGcsZix0LGUsdSk6YyhnLG0sZixlLHQsdSk7aWYodm9pZCAwIT09Xyl7aWYoXyljb250aW51ZTtkPSExO2JyZWFrfWlmKGIpe2lmKCFyKHQsZnVuY3Rpb24oZSx0KXtpZighYShiLHQpJiYoZz09PWV8fGwoZyxlLGksYyx1KSkpcmV0dXJuIGIucHVzaCh0KX0pKXtkPSExO2JyZWFrfX1lbHNlIGlmKGchPT1tJiYhbChnLG0saSxjLHUpKXtkPSExO2JyZWFrfX1yZXR1cm4gdS5kZWxldGUoZSksdS5kZWxldGUodCksZH19LGZ1bmN0aW9uKGUsdCxpKXsoZnVuY3Rpb24oZSl7dmFyIG49aSgwKSxyPWkoOTEpLGE9dCYmIXQubm9kZVR5cGUmJnQsbz1hJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmIWUubm9kZVR5cGUmJmUscz1vJiZvLmV4cG9ydHM9PT1hP24uQnVmZmVyOnZvaWQgMCxjPShzP3MuaXNCdWZmZXI6dm9pZCAwKXx8cjtlLmV4cG9ydHM9Y30pLmNhbGwodGhpcyxpKDI0KShlKSl9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBlLndlYnBhY2tQb2x5ZmlsbHx8KGUuZGVwcmVjYXRlPWZ1bmN0aW9uKCl7fSxlLnBhdGhzPVtdLGUuY2hpbGRyZW58fChlLmNoaWxkcmVuPVtdKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImxvYWRlZFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmx9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJpZFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLml9fSksZS53ZWJwYWNrUG9seWZpbGw9MSksZX19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDkzKSxyPWkoOTQpLGE9aSg5NSksbz1hJiZhLmlzVHlwZWRBcnJheSxzPW8/cihvKTpuO2UuZXhwb3J0cz1zfSxmdW5jdGlvbihlLHQpe3ZhciBpPTkwMDcxOTkyNTQ3NDA5OTE7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiBlJiZlPi0xJiZlJTE9PTAmJmU8PWl9fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHI9bihpKDI4KSk7dC5QYXJ0aWNsZXM9ci5kZWZhdWx0LHQuZGVmYXVsdD1yLmRlZmF1bHR9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybihuPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9KShlKX1mdW5jdGlvbiByKGUsdCl7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBuPXRbaV07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1mdW5jdGlvbiBhKGUpe2lmKHZvaWQgMD09PWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiBlfWZ1bmN0aW9uIG8oZSx0LGkpe3JldHVybihvPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmdldD9SZWZsZWN0LmdldDpmdW5jdGlvbihlLHQsaSl7dmFyIG49ZnVuY3Rpb24oZSx0KXtmb3IoOyFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KSYmbnVsbCE9PShlPXMoZSkpOyk7cmV0dXJuIGV9KGUsdCk7aWYobil7dmFyIHI9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuLHQpO3JldHVybiByLmdldD9yLmdldC5jYWxsKGkpOnIudmFsdWV9fSkoZSx0LGl8fGUpfWZ1bmN0aW9uIHMoZSl7cmV0dXJuKHM9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZjpmdW5jdGlvbihlKXtyZXR1cm4gZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKX0pKGUpfWZ1bmN0aW9uIGMoZSx0KXtyZXR1cm4oYz1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuX19wcm90b19fPXQsZX0pKGUsdCl9dmFyIGw9dGhpcyYmdGhpcy5fX2ltcG9ydFN0YXJ8fGZ1bmN0aW9uKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD17fTtpZihudWxsIT1lKWZvcih2YXIgaSBpbiBlKU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsaSkmJih0W2ldPWVbaV0pO3JldHVybiB0LmRlZmF1bHQ9ZSx0fSx1PXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBoPWwoaSgxNCkpLHk9aSgxNCkscD1pKDIpLHY9dShpKDM3KSksZj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpe3ZhciBpO3JldHVybiBmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksKGk9ZnVuY3Rpb24oZSx0KXtyZXR1cm4hdHx8XCJvYmplY3RcIiE9PW4odCkmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/YShlKTp0fSh0aGlzLHModCkuY2FsbCh0aGlzLGUpKSkuc3RhdGU9e2NhbnZhczp2b2lkIDAsbGlicmFyeTp2b2lkIDB9LGkubG9hZENhbnZhcz1pLmxvYWRDYW52YXMuYmluZChhKGkpKSxpfXZhciBpLGwsdTtyZXR1cm4gZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJmMoZSx0KX0odCx5LkNvbXBvbmVudCksaT10LChsPVt7a2V5OlwiYnVpbGRQYXJ0aWNsZXNMaWJyYXJ5XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dHJ5e2lmKHZvaWQgMD09PXdpbmRvdylyZXR1cm4gbnVsbH1jYXRjaChlKXtyZXR1cm4gbnVsbH1yZXR1cm4gbmV3IHAuUGFydGljbGVzTGlicmFyeShlKX19LHtrZXk6XCJyZWZyZXNoXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxpPXRoaXMuc3RhdGUuY2FudmFzO2kmJih0aGlzLmRlc3Ryb3koKSx0aGlzLnNldFN0YXRlKHtsaWJyYXJ5OnRoaXMuYnVpbGRQYXJ0aWNsZXNMaWJyYXJ5KGUucGFyYW1zKX0sZnVuY3Rpb24oKXt0LmxvYWRDYW52YXMoaSl9KSl9fSx7a2V5OlwiZGVzdHJveVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5zdGF0ZS5saWJyYXJ5JiZ0aGlzLnN0YXRlLmxpYnJhcnkuZGVzdHJveSgpfX0se2tleTpcImxvYWRDYW52YXNcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2UmJnRoaXMuc2V0U3RhdGUoe2NhbnZhczplfSxmdW5jdGlvbigpe3ZhciBpPXQuc3RhdGUubGlicmFyeTtpJiYoaS5sb2FkQ2FudmFzKGUpLGkuc3RhcnQoKSl9KX19LHtrZXk6XCJzaG91bGRDb21wb25lbnRVcGRhdGVcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4hdi5kZWZhdWx0KGUsdGhpcy5wcm9wcyl9fSx7a2V5OlwiY29tcG9uZW50RGlkVXBkYXRlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnJlZnJlc2godGhpcy5wcm9wcyl9fSx7a2V5OlwiZm9yY2VVcGRhdGVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMucmVmcmVzaCh0aGlzLnByb3BzKSxvKHModC5wcm90b3R5cGUpLFwiZm9yY2VVcGRhdGVcIix0aGlzKS5jYWxsKHRoaXMpfX0se2tleTpcImNvbXBvbmVudERpZE1vdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnNldFN0YXRlKHtsaWJyYXJ5OnRoaXMuYnVpbGRQYXJ0aWNsZXNMaWJyYXJ5KHRoaXMucHJvcHMucGFyYW1zKX0pfX0se2tleTpcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmRlc3Ryb3koKSx0aGlzLnNldFN0YXRlKHtsaWJyYXJ5OnZvaWQgMH0pfX0se2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUud2lkdGgsaT1lLmhlaWdodCxuPWUuY2xhc3NOYW1lLHI9ZS5jYW52YXNDbGFzc05hbWU7cmV0dXJuIGguY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6bn0saC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIse3JlZjp0aGlzLmxvYWRDYW52YXMsY2xhc3NOYW1lOnIsc3R5bGU6T2JqZWN0LmFzc2lnbih7fSx0aGlzLnByb3BzLnN0eWxlLHt3aWR0aDp0LGhlaWdodDppfSl9KSl9fV0pJiZyKGkucHJvdG90eXBlLGwpLHUmJnIoaSx1KSx0fSgpO2YuZGVmYXVsdFByb3BzPXt3aWR0aDpcIjEwMCVcIixoZWlnaHQ6XCIxMDAlXCIscGFyYW1zOnt9LHN0eWxlOnt9fSx0LmRlZmF1bHQ9Zn0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0KXtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG49dFtpXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByPWkoMiksYT1pKDEpLG89aSgxNSkscz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLmxpYnJhcnk9dCx0aGlzLmJ1YmJsZV9jbGlja2luZz0hMSx0aGlzLmJ1YmJsZV9kdXJhdGlvbl9lbmQ9ITEsdGhpcy5wdXNoaW5nPSExLHRoaXMucmVwdWxzZV9jbGlja2luZz0hMSx0aGlzLnJlcHVsc2VfY291bnQ9MCx0aGlzLnJlcHVsc2VfZmluaXNoPSExfXZhciB0LGkscztyZXR1cm4gdD1lLChpPVt7a2V5OlwicHVzaFBhcnRpY2xlc1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIGk9dGhpcy5saWJyYXJ5Lm1hbmFnZXIsbj10aGlzLmxpYnJhcnkuZ2V0UGFyYW1ldGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLnBhcnRpY2xlc30pO3RoaXMucHVzaGluZz0hMDt2YXIgYT1lO24ubnVtYmVyLm1heD4wJiYoYT1uLmFycmF5Lmxlbmd0aCtlPm4ubnVtYmVyLm1heD9uLm51bWJlci5tYXgtbi5hcnJheS5sZW5ndGg6ZSk7Zm9yKHZhciBvPTA7bzxhO28rKyluLmFycmF5LnB1c2gobmV3IHIuUGFydGljbGUodGhpcy5saWJyYXJ5LHtwb3NpdGlvbjp0fSkpLG89PT1lLTEmJihuLm1vdmUuZW5hYmxlfHxpLnBhcnRpY2xlc0RyYXcoKSx0aGlzLnB1c2hpbmc9ITEpfX0se2tleTpcInJlbW92ZVBhcnRpY2xlc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubGlicmFyeS5tYW5hZ2VyLGk9dGhpcy5saWJyYXJ5LmdldFBhcmFtZXRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5wYXJ0aWNsZXN9KTtpLmFycmF5LnNwbGljZSgwLGUpLGkubW92ZS5lbmFibGV8fHQucGFydGljbGVzRHJhdygpfX0se2tleTpcImJ1YmJsZVBhcnRpY2xlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxpPXRoaXMubGlicmFyeS5nZXRQYXJhbWV0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaW50ZXJhY3Rpdml0eX0pLG49dGhpcy5saWJyYXJ5LmdldFBhcmFtZXRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5wYXJ0aWNsZXN9KTtpZihpLmV2ZW50cy5vbmhvdmVyLmVuYWJsZSYmci5pc0luQXJyYXkoYS5JbnRlcmFjdGl2aXR5TW9kZS5CVUJCTEUsaS5ldmVudHMub25ob3Zlci5tb2RlKSl7dmFyIHM9dGhpcy5saWJyYXJ5Lm1hbmFnZXIuZ2V0RGlzdGFuY2UoZSx0aGlzLmxpYnJhcnkuaW50ZXJhY3Rpdml0eS5tb3VzZU1vdmVQb3NpdGlvbiksYz1pLm1vZGVzLmJ1YmJsZS5kaXN0YW5jZSxsPTEtcy9jO2lmKHM8PWMpe2lmKGw+PTAmJnRoaXMubGlicmFyeS5pbnRlcmFjdGl2aXR5Lm1vdXNlU3RhdHVzPT09by5Nb3VzZUludGVyYWN0aXZpdHlTdGF0dXMuTU9VU0VNT1ZFKXt2YXIgdT1pLm1vZGVzLmJ1YmJsZS5zaXplLGg9bi5zaXplLnZhbHVlO2lmKHUhPWgpaWYodT5oKXt2YXIgeT1lLnJhZGl1cyt1Kmw7eT49MCYmKGUucmFkaXVzX2J1YmJsZT15KX1lbHNle3ZhciBwPWUucmFkaXVzLXUsdj1lLnJhZGl1cy1wKmw7ZS5yYWRpdXNfYnViYmxlPXY+MD92OjB9aWYoaS5tb2Rlcy5idWJibGUub3BhY2l0eSE9PW4ub3BhY2l0eS52YWx1ZSlpZihpLm1vZGVzLmJ1YmJsZS5vcGFjaXR5Pm4ub3BhY2l0eS52YWx1ZSl7dmFyIGY9aS5tb2Rlcy5idWJibGUub3BhY2l0eSpsO2Y+ZS5vcGFjaXR5VmFsdWUmJmY8PWkubW9kZXMuYnViYmxlLm9wYWNpdHkmJihlLmJ1YmJsZU9wYWNpdHk9Zil9ZWxzZXt2YXIgZD1lLm9wYWNpdHlWYWx1ZS0obi5vcGFjaXR5LnZhbHVlLWkubW9kZXMuYnViYmxlLm9wYWNpdHkpKmw7ZDxlLm9wYWNpdHlWYWx1ZSYmZD49aS5tb2Rlcy5idWJibGUub3BhY2l0eSYmKGUuYnViYmxlT3BhY2l0eT1kKX19fWVsc2UgZS5idWJibGVPcGFjaXR5PWUub3BhY2l0eVZhbHVlLGUucmFkaXVzX2J1YmJsZT1lLnJhZGl1czt0aGlzLmxpYnJhcnkuaW50ZXJhY3Rpdml0eS5tb3VzZVN0YXR1cz09PW8uTW91c2VJbnRlcmFjdGl2aXR5U3RhdHVzLk1PVVNFTEVBVkUmJihlLmJ1YmJsZU9wYWNpdHk9ZS5vcGFjaXR5VmFsdWUsZS5yYWRpdXNfYnViYmxlPWUucmFkaXVzKX1lbHNlIGlmKGkuZXZlbnRzLm9uY2xpY2suZW5hYmxlJiZyLmlzSW5BcnJheShhLkludGVyYWN0aXZpdHlNb2RlLkJVQkJMRSxpLmV2ZW50cy5vbmNsaWNrLm1vZGUpJiZ0aGlzLmJ1YmJsZV9jbGlja2luZyl7dmFyIGI9dGhpcy5saWJyYXJ5Lm1hbmFnZXIuZ2V0RGlzdGFuY2UoZSx0aGlzLmxpYnJhcnkuaW50ZXJhY3Rpdml0eS5tb3VzZUNsaWNrUG9zaXRpb24pLGc9KChuZXcgRGF0ZSkuZ2V0VGltZSgpLXRoaXMubGlicmFyeS5pbnRlcmFjdGl2aXR5Lm1vdXNlQ2xpY2tUaW1lKS8xZTM7Zz5pLm1vZGVzLmJ1YmJsZS5kdXJhdGlvbiYmKHRoaXMuYnViYmxlX2R1cmF0aW9uX2VuZD0hMCksZz4yKmkubW9kZXMuYnViYmxlLmR1cmF0aW9uJiYodGhpcy5idWJibGVfY2xpY2tpbmc9ITEsdGhpcy5idWJibGVfZHVyYXRpb25fZW5kPSExKTt2YXIgbT1mdW5jdGlvbihuLHIsYSxvLHMpe2lmKG4hPXIpaWYodC5idWJibGVfZHVyYXRpb25fZW5kKXtpZihudWxsIT1hKXt2YXIgYz1uKyhuLShvLWcqKG8tbikvaS5tb2Rlcy5idWJibGUuZHVyYXRpb24pKTtcInNpemVcIj09cyYmKGUucmFkaXVzX2J1YmJsZT1jKSxcIm9wYWNpdHlcIj09cyYmKGUuYnViYmxlT3BhY2l0eT1jKX19ZWxzZSBpZihiPD1pLm1vZGVzLmJ1YmJsZS5kaXN0YW5jZSl7aWYoKG51bGwhPWE/YTpvKSE9bil7dmFyIGw9by1nKihvLW4pL2kubW9kZXMuYnViYmxlLmR1cmF0aW9uO1wic2l6ZVwiPT1zJiYoZS5yYWRpdXNfYnViYmxlPWwpLFwib3BhY2l0eVwiPT1zJiYoZS5idWJibGVPcGFjaXR5PWwpfX1lbHNlXCJzaXplXCI9PXMmJihlLnJhZGl1c19idWJibGU9dm9pZCAwKSxcIm9wYWNpdHlcIj09cyYmKGUuYnViYmxlT3BhY2l0eT12b2lkIDApfTt0aGlzLmJ1YmJsZV9jbGlja2luZyYmKG0oaS5tb2Rlcy5idWJibGUuc2l6ZSxuLnNpemUudmFsdWUsZS5yYWRpdXNfYnViYmxlLGUucmFkaXVzLFwic2l6ZVwiKSxtKGkubW9kZXMuYnViYmxlLm9wYWNpdHksbi5vcGFjaXR5LnZhbHVlLGUuYnViYmxlT3BhY2l0eSxlLm9wYWNpdHlWYWx1ZSxcIm9wYWNpdHlcIikpfX19LHtrZXk6XCJyZXB1bHNlUGFydGljbGVcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLmxpYnJhcnkuY2FudmFzLGk9dGhpcy5saWJyYXJ5LmdldFBhcmFtZXRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5pbnRlcmFjdGl2aXR5fSksbj10aGlzLmxpYnJhcnkuZ2V0UGFyYW1ldGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLnBhcnRpY2xlc30pO2lmKGkuZXZlbnRzLm9uaG92ZXIuZW5hYmxlJiZyLmlzSW5BcnJheShhLkludGVyYWN0aXZpdHlNb2RlLlJFUFVMU0UsaS5ldmVudHMub25ob3Zlci5tb2RlKSYmdGhpcy5saWJyYXJ5LmludGVyYWN0aXZpdHkubW91c2VTdGF0dXM9PT1vLk1vdXNlSW50ZXJhY3Rpdml0eVN0YXR1cy5NT1VTRU1PVkUpe3ZhciBzPXRoaXMubGlicmFyeS5tYW5hZ2VyLmdldERpc3RhbmNlcyhlLHRoaXMubGlicmFyeS5pbnRlcmFjdGl2aXR5Lm1vdXNlTW92ZVBvc2l0aW9uKSxjPXMuZGlzdGFuY2UsbD17eDpzLmRpc3RhbmNlWC9jLHk6cy5kaXN0YW5jZVkvY30sdT1pLm1vZGVzLnJlcHVsc2UuZGlzdGFuY2UsaD1yLmNsYW1wKDEvdSooLTEqTWF0aC5wb3coYy91LDIpKzEpKnUqMTAwLDAsNTApLHk9e3g6ZS54K2wueCpoLHk6ZS55K2wueSpofTtuLm1vdmUub3V0X21vZGU9PT1hLk1vdmVPdXRNb2RlLkJPVU5DRT8oeS54LWUucmFkaXVzPjAmJnkueCtlLnJhZGl1czx0LndpZHRoJiYoZS54PXkueCkseS55LWUucmFkaXVzPjAmJnkueStlLnJhZGl1czx0LmhlaWdodCYmKGUueT15LnkpKTooZS54PXkueCxlLnk9eS55KX1lbHNlIGlmKGkuZXZlbnRzLm9uY2xpY2suZW5hYmxlJiZyLmlzSW5BcnJheShhLkludGVyYWN0aXZpdHlNb2RlLlJFUFVMU0UsaS5ldmVudHMub25jbGljay5tb2RlKSlpZih0aGlzLnJlcHVsc2VfZmluaXNofHwodGhpcy5yZXB1bHNlX2NvdW50KyssdGhpcy5yZXB1bHNlX2NvdW50PT1uLmFycmF5Lmxlbmd0aCYmKHRoaXMucmVwdWxzZV9maW5pc2g9ITApKSx0aGlzLnJlcHVsc2VfY2xpY2tpbmcpe3ZhciBwPU1hdGgucG93KGkubW9kZXMucmVwdWxzZS5kaXN0YW5jZS82LDMpLHY9dGhpcy5saWJyYXJ5Lm1hbmFnZXIuZ2V0RGlzdGFuY2VzKHRoaXMubGlicmFyeS5pbnRlcmFjdGl2aXR5Lm1vdXNlQ2xpY2tQb3NpdGlvbixlKSxmPXYuZGlzdGFuY2UsZD12LmRpc3RhbmNlWCxiPXYuZGlzdGFuY2VZLGc9LTEqKHAvTWF0aC5wb3coZiwyKSk7aWYoZjw9cCl7dmFyIG09TWF0aC5hdGFuMihiLGQpO2lmKGUudng9ZypNYXRoLmNvcyhtKSxlLnZ5PWcqTWF0aC5zaW4obSksbi5tb3ZlLm91dF9tb2RlPT09YS5Nb3ZlT3V0TW9kZS5CT1VOQ0Upe3ZhciBfPXt4OmUueCtlLnZ4LHk6ZS55K2Uudnl9O18ueCtlLnJhZGl1cz50LndpZHRoP2Uudng9LWUudng6Xy54LWUucmFkaXVzPDAmJihlLnZ4PS1lLnZ4KSxfLnkrZS5yYWRpdXM+dC5oZWlnaHQ/ZS52eT0tZS52eTpfLnktZS5yYWRpdXM8MCYmKGUudnk9LWUudnkpfX19ZWxzZSExPT09dGhpcy5yZXB1bHNlX2NsaWNraW5nJiYoZS52eD1lLnZ4X2ksZS52eT1lLnZ5X2kpfX0se2tleTpcImdyYWJQYXJ0aWNsZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubGlicmFyeS5jYW52YXMsaT10aGlzLmxpYnJhcnkuZ2V0UGFyYW1ldGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlfSksbj1pLmludGVyYWN0aXZpdHkscj1pLnBhcnRpY2xlcztpZihuLmV2ZW50cy5vbmhvdmVyLmVuYWJsZSYmdGhpcy5saWJyYXJ5LmludGVyYWN0aXZpdHkubW91c2VTdGF0dXM9PT1vLk1vdXNlSW50ZXJhY3Rpdml0eVN0YXR1cy5NT1VTRU1PVkUpe3ZhciBhPXRoaXMubGlicmFyeS5tYW5hZ2VyLmdldERpc3RhbmNlKGUsdGhpcy5saWJyYXJ5LmludGVyYWN0aXZpdHkubW91c2VNb3ZlUG9zaXRpb24pO2lmKGE8PW4ubW9kZXMuZ3JhYi5kaXN0YW5jZSl7dmFyIHM9bi5tb2Rlcy5ncmFiLGM9cy5saW5lX2xpbmtlZC5vcGFjaXR5LWEvKDEvcy5saW5lX2xpbmtlZC5vcGFjaXR5KS9zLmRpc3RhbmNlO2lmKGM+MCl7dmFyIGw9ci5saW5lX2xpbmtlZC5jb2xvcl9yZ2JfbGluZSx1PWwucixoPWwuZyx5PWwuYjt0LmN0eC5zdHJva2VTdHlsZT1cInJnYmEoIFwiLmNvbmNhdCh1LFwiLCBcIikuY29uY2F0KGgsXCIsIFwiKS5jb25jYXQoeSxcIiwgXCIpLmNvbmNhdChjLFwiIClcIiksdC5jdHgubGluZVdpZHRoPXIubGluZV9saW5rZWQud2lkdGgsdC5jdHguYmVnaW5QYXRoKCksdC5jdHgubW92ZVRvKGUueCxlLnkpLHQuY3R4LmxpbmVUbyh0aGlzLmxpYnJhcnkuaW50ZXJhY3Rpdml0eS5tb3VzZU1vdmVQb3NpdGlvbi54LHRoaXMubGlicmFyeS5pbnRlcmFjdGl2aXR5Lm1vdXNlTW92ZVBvc2l0aW9uLnkpLHQuY3R4LnN0cm9rZSgpLHQuY3R4LmNsb3NlUGF0aCgpfX19fX1dKSYmbih0LnByb3RvdHlwZSxpKSxzJiZuKHQscyksZX0oKTt0LmRlZmF1bHQ9c30sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0KXtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG49dFtpXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByPWkoMiksYT1pKDEpLG89aSg0KSxzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXt2YXIgaT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30sbj1pLmNvbG9yLHI9aS5tb3ZlLGE9aS5vcGFjaXR5LG89aS5wb2x5Z29uLHM9aS5wb3NpdGlvbixjPWkuc2hhcGUsbD1pLnNpemU7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLmxpYnJhcnk9dCx0aGlzLnNldHVwU2l6ZShsKSx0aGlzLnNldHVwUG9zaXRpb24ocixvLHMpLHRoaXMuc2V0dXBDb2xvcihuKSx0aGlzLnNldHVwT3BhY2l0eShhKSx0aGlzLnNldHVwQW5pbWF0aW9uKHIpLHRoaXMuc2V0dXBTaGFwZShjKX12YXIgdCxpLHM7cmV0dXJuIHQ9ZSwoaT1be2tleTpcInNldHVwU2l6ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubGlicmFyeS5nZXRQYXJhbWV0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFydGljbGVzLnNpemV9KTtlPW8uZGVlcEFzc2lnbih7fSx0LGUpLHRoaXMucmFkaXVzPShlLnJhbmRvbT9NYXRoLnJhbmRvbSgpOjEpKmUudmFsdWUsZS5hbmltLmVuYWJsZSYmKHRoaXMuc2l6ZV9zdGF0dXM9ITEsdGhpcy52cz1lLmFuaW0uc3BlZWQvMTAwLGUuYW5pbS5zeW5jfHwodGhpcy52cz10aGlzLnZzKk1hdGgucmFuZG9tKCkpKX19LHtrZXk6XCJzZXR1cFBvc2l0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LGkpe3RoaXMuaW5pdGlhbFBvc2l0aW9uPWk7dmFyIG49dGhpcy5saWJyYXJ5LmdldFBhcmFtZXRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5wYXJ0aWNsZXMubW92ZX0pO2U9by5kZWVwQXNzaWduKHt9LG4sZSk7dmFyIHI9dGhpcy5saWJyYXJ5LmdldFBhcmFtZXRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5wb2x5Z29ufSk7dD1vLmRlZXBBc3NpZ24oe30scix0KTt2YXIgcz10aGlzLmxpYnJhcnkuZ2V0UGFyYW1ldGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLnBhcnRpY2xlcy5hcnJheX0pLGM9dGhpcy5saWJyYXJ5LGw9Yy5jYW52YXMsdT1jLnZlbmRvcnM7aWYoaSl0aGlzLng9aS54LHRoaXMueT1pLnk7ZWxzZSBpZih0LmVuYWJsZSl7dmFyIGg7c3dpdGNoKHQudHlwZSl7Y2FzZSBhLlBvbHlnb25UeXBlLklOTElORTpzd2l0Y2godC5pbmxpbmUuYXJyYW5nZW1lbnQpe2Nhc2UgYS5Qb2x5Z29uSW5saW5lQXJyYW5nZW1lbnRUeXBlLlJBTkRPTV9QT0lOVDpoPXRoaXMubGlicmFyeS5wb2x5Z29uTWFzay5nZXRSYW5kb21Qb2ludE9uUG9seWdvblBhdGgoKTticmVhaztjYXNlIGEuUG9seWdvbklubGluZUFycmFuZ2VtZW50VHlwZS5SQU5ET01fTEVOR1RIOmg9dGhpcy5saWJyYXJ5LnBvbHlnb25NYXNrLmdldFJhbmRvbVBvaW50T25Qb2x5Z29uUGF0aEJ5TGVuZ3RoKCk7YnJlYWs7Y2FzZSBhLlBvbHlnb25JbmxpbmVBcnJhbmdlbWVudFR5cGUuRVFVSURJU1RBTlQ6aD10aGlzLmxpYnJhcnkucG9seWdvbk1hc2suZ2V0RXF1aWRpc3RhbnRQb2luZ09uUG9seWdvblBhdGhCeUluZGV4KHMubGVuZ3RoKTticmVhaztjYXNlIGEuUG9seWdvbklubGluZUFycmFuZ2VtZW50VHlwZS5PTkVfUEVSX1BPSU5UOmRlZmF1bHQ6aD10aGlzLmxpYnJhcnkucG9seWdvbk1hc2suZ2V0UG9pbmdPblBvbHlnb25QYXRoQnlJbmRleChzLmxlbmd0aCl9YnJlYWs7Y2FzZSBhLlBvbHlnb25UeXBlLklOU0lERTpoPXRoaXMubGlicmFyeS5wb2x5Z29uTWFzay5nZXRSYW5kb21Qb2ludEluc2lkZVBvbHlnb25QYXRoKCk7YnJlYWs7Y2FzZSBhLlBvbHlnb25UeXBlLk9VVFNJREU6aD10aGlzLmxpYnJhcnkucG9seWdvbk1hc2suZ2V0UmFuZG9tUG9pbnRPdXRzaWRlUG9seWdvblBhdGgoKX1oJiYodGhpcy54PWgueCx0aGlzLnk9aC55LHRoaXMuaW5pdGlhbFBvc2l0aW9uPXt4OnRoaXMueCx5OnRoaXMueX0pfXZvaWQgMCE9PXRoaXMueCYmdm9pZCAwIT09dGhpcy55fHwodGhpcy54PU1hdGgucmFuZG9tKCkqbC53aWR0aCx0aGlzLnk9TWF0aC5yYW5kb20oKSpsLmhlaWdodCksdGhpcy54Pmwud2lkdGgtMip0aGlzLnJhZGl1cz90aGlzLng9dGhpcy54LXRoaXMucmFkaXVzOnRoaXMueDwyKnRoaXMucmFkaXVzJiYodGhpcy54PXRoaXMueCt0aGlzLnJhZGl1cyksdGhpcy55PmwuaGVpZ2h0LTIqdGhpcy5yYWRpdXM/dGhpcy55PXRoaXMueS10aGlzLnJhZGl1czp0aGlzLnk8Mip0aGlzLnJhZGl1cyYmKHRoaXMueT10aGlzLnkrdGhpcy5yYWRpdXMpLGUuYm91bmNlJiZ1LmNoZWNrT3ZlcmxhcCh0aGlzLHt4OnRoaXMueCx5OnRoaXMueX0pfX0se2tleTpcInNldHVwQ29sb3JcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLmxpYnJhcnkuZ2V0UGFyYW1ldGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLnBhcnRpY2xlcy5jb2xvcn0pO2U9by5kZWVwQXNzaWduKHt9LGUsdCksdGhpcy5jb2xvcj1yLmdldENvbG9yKGUudmFsdWUpfX0se2tleTpcInNldHVwT3BhY2l0eVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubGlicmFyeS5nZXRQYXJhbWV0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFydGljbGVzLm9wYWNpdHl9KTtlPW8uZGVlcEFzc2lnbih7fSx0LGUpLHRoaXMub3BhY2l0eVZhbHVlPShlLnJhbmRvbT9NYXRoLnJhbmRvbSgpOjEpKmUudmFsdWUsZS5hbmltLmVuYWJsZSYmKHRoaXMub3BhY2l0eV9zdGF0dXM9ITEsdGhpcy52bz1lLmFuaW0uc3BlZWQvMTAwLGUuYW5pbS5zeW5jfHwodGhpcy52bz10aGlzLnZvKk1hdGgucmFuZG9tKCkpKX19LHtrZXk6XCJzZXR1cEFuaW1hdGlvblwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0LGk9dGhpcy5saWJyYXJ5LmdldFBhcmFtZXRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5wYXJ0aWNsZXMubW92ZX0pO3N3aXRjaCgoZT1vLmRlZXBBc3NpZ24oe30saSxlKSkuZGlyZWN0aW9uKXtjYXNlIGEuTW92ZURpcmVjdGlvbi5UT1A6dD17eDowLHk6LTF9O2JyZWFrO2Nhc2UgYS5Nb3ZlRGlyZWN0aW9uLlRPUF9SSUdIVDp0PXt4Oi41LHk6LS41fTticmVhaztjYXNlIGEuTW92ZURpcmVjdGlvbi5SSUdIVDp0PXt4OjEseTowfTticmVhaztjYXNlIGEuTW92ZURpcmVjdGlvbi5CT1RUT01fUklHSFQ6dD17eDouNSx5Oi41fTticmVhaztjYXNlIGEuTW92ZURpcmVjdGlvbi5CT1RUT006dD17eDowLHk6MX07YnJlYWs7Y2FzZSBhLk1vdmVEaXJlY3Rpb24uQk9UVE9NX0xFRlQ6dD17eDotLjUseToxfTticmVhaztjYXNlIGEuTW92ZURpcmVjdGlvbi5MRUZUOnQ9e3g6LTEseTowfTticmVhaztjYXNlIGEuTW92ZURpcmVjdGlvbi5UT1BfTEVGVDp0PXt4Oi0uNSx5Oi0uNX07YnJlYWs7ZGVmYXVsdDp0PXt4OjAseTowfX1lLnN0cmFpZ2h0Pyh0aGlzLnZ4PXQueCx0aGlzLnZ5PXQueSxlLnJhbmRvbSYmKHRoaXMudng9dGhpcy52eCpNYXRoLnJhbmRvbSgpLHRoaXMudnk9dGhpcy52eSpNYXRoLnJhbmRvbSgpKSk6KHRoaXMudng9dC54K01hdGgucmFuZG9tKCktLjUsdGhpcy52eT10LnkrTWF0aC5yYW5kb20oKS0uNSksdGhpcy52eF9pPXRoaXMudngsdGhpcy52eV9pPXRoaXMudnl9fSx7a2V5Olwic2V0dXBTaGFwZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsaT10aGlzLmxpYnJhcnkuZ2V0UGFyYW1ldGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLnBhcnRpY2xlcy5zaGFwZX0pO2U9by5kZWVwQXNzaWduKHt9LGksZSk7dmFyIG49dGhpcy5saWJyYXJ5LmdldFBhcmFtZXRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5wYXJ0aWNsZXMuYXJyYXl9KTtpZihBcnJheS5pc0FycmF5KGUudHlwZSkpe3ZhciByPWUudHlwZVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqZS50eXBlLmxlbmd0aCldO2U9by5kZWVwQXNzaWduKHt9LGUse3R5cGU6cn0pfXRoaXMuc2hhcGU9ZSxlLnR5cGUhPT1hLlNoYXBlVHlwZS5JTUFHRSYmZS50eXBlIT09YS5TaGFwZVR5cGUuSU1BR0VTfHwoZS50eXBlPT09YS5TaGFwZVR5cGUuSU1BR0VTP3RoaXMuc2hhcGVJbWFnZT10aGlzLmxpYnJhcnkuaW1hZ2VNYW5hZ2VyLmdldEltYWdlKG4ubGVuZ3RoKTp0aGlzLnNoYXBlSW1hZ2U9dGhpcy5saWJyYXJ5LmltYWdlTWFuYWdlci5nZXRJbWFnZSgpLFwic3ZnXCI9PT10aGlzLnNoYXBlSW1hZ2UudHlwZSYmdm9pZCAwIT09dGhpcy5zaGFwZUltYWdlLnN2Z0RhdGEmJnRoaXMubGlicmFyeS5pbWFnZU1hbmFnZXIuY3JlYXRlU3ZnSW1hZ2UodGhpcy5zaGFwZUltYWdlLnN2Z0RhdGEse2NvbG9yOnRoaXMuY29sb3Isb3BhY2l0eTp0aGlzLm9wYWNpdHlWYWx1ZX0pLnRoZW4oZnVuY3Rpb24oZSl7dC5zaGFwZUltYWdlLmVsZW1lbnREYXRhPWUsdC5zaGFwZUltYWdlLmxvYWRlZD0hMH0pKX19LHtrZXk6XCJkcmF3XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZSx0LGksbj10aGlzLmxpYnJhcnkscj1uLmNhbnZhcyxvPW4udmVuZG9ycztpZihlPXZvaWQgMCE9PXRoaXMucmFkaXVzX2J1YmJsZT90aGlzLnJhZGl1c19idWJibGU6dGhpcy5yYWRpdXMsdD12b2lkIDAhPT10aGlzLmJ1YmJsZU9wYWNpdHk/dGhpcy5idWJibGVPcGFjaXR5OnRoaXMub3BhY2l0eVZhbHVlLHRoaXMuY29sb3IucmdiKXt2YXIgcz10aGlzLmNvbG9yLnJnYixjPXMucixsPXMuZyx1PXMuYjtpPVwicmdiYSggXCIuY29uY2F0KGMsXCIsIFwiKS5jb25jYXQobCxcIiwgXCIpLmNvbmNhdCh1LFwiLCBcIikuY29uY2F0KHQsXCIgKVwiKX1lbHNle3ZhciBoPXRoaXMuY29sb3IuaHNsLHk9aC5oLHA9aC5zLHY9aC5sO2k9XCJoc2xhKCBcIi5jb25jYXQoeSxcIiwgXCIpLmNvbmNhdChwLFwiLCBcIikuY29uY2F0KHYsXCIsIFwiKS5jb25jYXQodCxcIiApXCIpfXN3aXRjaChyLmN0eC5maWxsU3R5bGU9aSxyLmN0eC5iZWdpblBhdGgoKSx0aGlzLnNoYXBlLnR5cGUpe2Nhc2UgYS5TaGFwZVR5cGUuQ0lSQ0xFOnIuY3R4LmFyYyh0aGlzLngsdGhpcy55LGUsMCwyKk1hdGguUEksITEpO2JyZWFrO2Nhc2UgYS5TaGFwZVR5cGUuRURHRTpyLmN0eC5yZWN0KHRoaXMueC1lLHRoaXMueS1lLDIqZSwyKmUpO2JyZWFrO2Nhc2UgYS5TaGFwZVR5cGUuVFJJQU5HTEU6by5kcmF3U2hhcGUoci5jdHgsdGhpcy54LWUsdGhpcy55K2UvMS42NiwyKmUsMywyKTticmVhaztjYXNlIGEuU2hhcGVUeXBlLlBPTFlHT046by5kcmF3U2hhcGUoci5jdHgsdGhpcy54LWUvKHRoaXMuc2hhcGUucG9seWdvbi5uYl9zaWRlcy8zLjUpLHRoaXMueS1lLy43NiwyLjY2KmUvKHRoaXMuc2hhcGUucG9seWdvbi5uYl9zaWRlcy8zKSx0aGlzLnNoYXBlLnBvbHlnb24ubmJfc2lkZXMsMSk7YnJlYWs7Y2FzZSBhLlNoYXBlVHlwZS5TVEFSOm8uZHJhd1NoYXBlKHIuY3R4LHRoaXMueC0yKmUvKHRoaXMuc2hhcGUucG9seWdvbi5uYl9zaWRlcy80KSx0aGlzLnktZS8xLjUyLDIqZSoyLjY2Lyh0aGlzLnNoYXBlLnBvbHlnb24ubmJfc2lkZXMvMyksdGhpcy5zaGFwZS5wb2x5Z29uLm5iX3NpZGVzLDIpO2JyZWFrO2Nhc2UgYS5TaGFwZVR5cGUuSU1BR0VTOmNhc2UgYS5TaGFwZVR5cGUuSU1BR0U6dGhpcy5zaGFwZUltYWdlLmVsZW1lbnREYXRhJiZyLmN0eC5kcmF3SW1hZ2UodGhpcy5zaGFwZUltYWdlLmVsZW1lbnREYXRhLHRoaXMueC1lLHRoaXMueS1lLDIqZSwyKmUvdGhpcy5zaGFwZUltYWdlLnJhdGlvKX1yLmN0eC5jbG9zZVBhdGgoKSx0aGlzLnNoYXBlLnN0cm9rZS53aWR0aD4wJiYoci5jdHguc3Ryb2tlU3R5bGU9dGhpcy5zaGFwZS5zdHJva2UuY29sb3Isci5jdHgubGluZVdpZHRoPXRoaXMuc2hhcGUuc3Ryb2tlLndpZHRoLHIuY3R4LnN0cm9rZSgpKSxyLmN0eC5maWxsKCl9fV0pJiZuKHQucHJvdG90eXBlLGkpLHMmJm4odCxzKSxlfSgpO3QuZGVmYXVsdD1zfSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlLHQpe2Zvcih2YXIgaT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgbj10W2ldO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHI9aSgyKSxhPWkoMSksbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLmxpYnJhcnk9dCx0aGlzLnBhcnRpY2xlc0NyZWF0ZT10aGlzLnBhcnRpY2xlc0NyZWF0ZS5iaW5kKHRoaXMpfXZhciB0LGksbztyZXR1cm4gdD1lLChpPVt7a2V5OlwicGFydGljbGVzQ3JlYXRlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmxpYnJhcnkuZ2V0UGFyYW1ldGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLnBhcnRpY2xlc30pLHQ9dGhpcy5saWJyYXJ5LmdldFBhcmFtZXRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5wb2x5Z29ufSksaT1lLm51bWJlci52YWx1ZTt0LmVuYWJsZSYmdC50eXBlPT09YS5Qb2x5Z29uVHlwZS5JTkxJTkUmJnQuaW5saW5lLmFycmFuZ2VtZW50PT09YS5Qb2x5Z29uSW5saW5lQXJyYW5nZW1lbnRUeXBlLk9ORV9QRVJfUE9JTlQmJihpPXRoaXMubGlicmFyeS5wb2x5Z29uTWFzay5nZXRWZXJ0aWNlc051bWJlcigpKTtmb3IodmFyIG49MDtuPGk7bisrKWUuYXJyYXkucHVzaChuZXcgci5QYXJ0aWNsZSh0aGlzLmxpYnJhcnkpKX19LHtrZXk6XCJwYXJ0aWNsZXNVcGRhdGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLmxpYnJhcnksaT10LmNhbnZhcyxuPXQubW9kZXMsbz10aGlzLmxpYnJhcnkuZ2V0UGFyYW1ldGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLmludGVyYWN0aXZpdHl9KSxzPXRoaXMubGlicmFyeS5nZXRQYXJhbWV0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFydGljbGVzfSksYz10aGlzLmxpYnJhcnkuZ2V0UGFyYW1ldGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLnBvbHlnb259KTtzLmFycmF5LmZvckVhY2goZnVuY3Rpb24odCxsKXtpZihzLm1vdmUuZW5hYmxlKXt2YXIgdT1zLm1vdmUuc3BlZWQvMjt0LngrPXQudngqdSx0LnkrPXQudnkqdX12YXIgaDtzd2l0Y2gocy5vcGFjaXR5LmFuaW0uZW5hYmxlJiYoMT09dC5vcGFjaXR5X3N0YXR1cz8odC5vcGFjaXR5VmFsdWU+PXMub3BhY2l0eS52YWx1ZSYmKHQub3BhY2l0eV9zdGF0dXM9ITEpLHQub3BhY2l0eVZhbHVlKz10LnZvKToodC5vcGFjaXR5VmFsdWU8PXMub3BhY2l0eS5hbmltLm9wYWNpdHlfbWluJiYodC5vcGFjaXR5X3N0YXR1cz0hMCksdC5vcGFjaXR5VmFsdWUtPXQudm8pLHQub3BhY2l0eVZhbHVlPDAmJih0Lm9wYWNpdHlWYWx1ZT0wKSkscy5zaXplLmFuaW0uZW5hYmxlJiYoMT09dC5zaXplX3N0YXR1cz8odC5yYWRpdXM+PXMuc2l6ZS52YWx1ZSYmKHQuc2l6ZV9zdGF0dXM9ITEpLHQucmFkaXVzKz10LnZzKToodC5yYWRpdXM8PXMuc2l6ZS5hbmltLnNpemVfbWluJiYodC5zaXplX3N0YXR1cz0hMCksdC5yYWRpdXMtPXQudnMpLHQucmFkaXVzPDAmJih0LnJhZGl1cz0wKSksaD1cImJvdW5jZVwiPT1zLm1vdmUub3V0X21vZGU/e3hfbGVmdDp0LnJhZGl1cyx4X3JpZ2h0Omkud2lkdGgseV90b3A6dC5yYWRpdXMseV9ib3R0b206aS5oZWlnaHR9Ont4X2xlZnQ6LXQucmFkaXVzLHhfcmlnaHQ6aS53aWR0aCt0LnJhZGl1cyx5X3RvcDotdC5yYWRpdXMseV9ib3R0b206aS5oZWlnaHQrdC5yYWRpdXN9LHQueC10LnJhZGl1cz5pLndpZHRoPyh0Lng9aC54X2xlZnQsdC55PU1hdGgucmFuZG9tKCkqaS5oZWlnaHQpOnQueCt0LnJhZGl1czwwJiYodC54PWgueF9yaWdodCx0Lnk9TWF0aC5yYW5kb20oKSppLmhlaWdodCksdC55LXQucmFkaXVzPmkuaGVpZ2h0Pyh0Lnk9aC55X3RvcCx0Lng9TWF0aC5yYW5kb20oKSppLndpZHRoKTp0LnkrdC5yYWRpdXM8MCYmKHQueT1oLnlfYm90dG9tLHQueD1NYXRoLnJhbmRvbSgpKmkud2lkdGgpLHMubW92ZS5vdXRfbW9kZSl7Y2FzZVwiYm91bmNlXCI6aWYoYy5lbmFibGUpe3ZhciB5PWMubW92ZS5yYWRpdXM7c3dpdGNoKGMudHlwZSl7Y2FzZSBhLlBvbHlnb25UeXBlLklOTElORTplLmdldERpc3RhbmNlKHQuaW5pdGlhbFBvc2l0aW9uLHQpPnkmJih0LnZ4PS10LnZ4K3QudnkvMix0LnZ5PS10LnZ5K3QudngvMik7YnJlYWs7Y2FzZSBhLlBvbHlnb25UeXBlLklOU0lERTpjYXNlIGEuUG9seWdvblR5cGUuT1VUU0lERTp2YXIgcD1jLm1vdmUudHlwZTtpZihwPT09YS5Qb2x5Z29uTW92ZVR5cGUuUkFESVVTKWUuZ2V0RGlzdGFuY2UodC5pbml0aWFsUG9zaXRpb24sdCk+eSYmKHQudng9LXQudngrdC52eS8yLHQudnk9LXQudnkrdC52eC8yKTtlbHNlIGlmKHA9PT1hLlBvbHlnb25Nb3ZlVHlwZS5QQVRIKXt2YXIgdj1jLnR5cGU9PT1hLlBvbHlnb25UeXBlLklOU0lERSxmPWUubGlicmFyeS5wb2x5Z29uTWFzay5pc1BvaW50SW5zaWRlUG9seWdvbih7eDp0LngseTp0Lnl9KTsodiYmIWZ8fCF2JiZmKSYmKHQudng9LXQudngrdC52eS8yLHQudnk9LXQudnkrdC52eC8yKX19fWVsc2UgdC54K3QucmFkaXVzPmkud2lkdGg/dC52eD0tdC52eDp0LngtdC5yYWRpdXM8MCYmKHQudng9LXQudngpLHQueSt0LnJhZGl1cz5pLmhlaWdodD90LnZ5PS10LnZ5OnQueS10LnJhZGl1czwwJiYodC52eT0tdC52eSl9aWYoci5pc0luQXJyYXkoXCJncmFiXCIsby5ldmVudHMub25ob3Zlci5tb2RlKSYmbi5ncmFiUGFydGljbGUodCksKHIuaXNJbkFycmF5KFwiYnViYmxlXCIsby5ldmVudHMub25ob3Zlci5tb2RlKXx8ci5pc0luQXJyYXkoXCJidWJibGVcIixvLmV2ZW50cy5vbmNsaWNrLm1vZGUpKSYmbi5idWJibGVQYXJ0aWNsZSh0KSwoci5pc0luQXJyYXkoXCJyZXB1bHNlXCIsby5ldmVudHMub25ob3Zlci5tb2RlKXx8ci5pc0luQXJyYXkoXCJyZXB1bHNlXCIsby5ldmVudHMub25jbGljay5tb2RlKSkmJm4ucmVwdWxzZVBhcnRpY2xlKHQpLHMubGluZV9saW5rZWQuZW5hYmxlfHxzLm1vdmUuYXR0cmFjdC5lbmFibGUpZm9yKHZhciBkPWwrMTtkPHMuYXJyYXkubGVuZ3RoO2QrKyl7dmFyIGI9cy5hcnJheVtkXTtzLmxpbmVfbGlua2VkLmVuYWJsZSYmZS5saWJyYXJ5LmludGVyYWN0aXZpdHkubGlua1BhcnRpY2xlcyh0LGIpLHMubW92ZS5hdHRyYWN0LmVuYWJsZSYmZS5saWJyYXJ5LmludGVyYWN0aXZpdHkuYXR0cmFjdFBhcnRpY2xlcyh0LGIpLHMubW92ZS5ib3VuY2UmJmUubGlicmFyeS5pbnRlcmFjdGl2aXR5LmJvdW5jZVBhcnRpY2xlcyh0LGIpfX0pfX0se2tleTpcImdldERpc3RhbmNlc1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIGk9ZS54LXQueCxuPWUueS10Lnk7cmV0dXJue2Rpc3RhbmNlOk1hdGguc3FydChpKmkrbipuKSxkaXN0YW5jZVg6aSxkaXN0YW5jZVk6bn19fSx7a2V5OlwiZ2V0RGlzdGFuY2VcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmdldERpc3RhbmNlcyhlLHQpLmRpc3RhbmNlfX0se2tleTpcInBhcnRpY2xlc0RyYXdcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMubGlicmFyeSx0PWUuY2FudmFzLGk9ZS5tYW5hZ2VyLG49dGhpcy5saWJyYXJ5LmdldFBhcmFtZXRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5wYXJ0aWNsZXN9KSxyPXRoaXMubGlicmFyeS5nZXRQYXJhbWV0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUucG9seWdvbn0pO3QuY3R4LmNsZWFyUmVjdCgwLDAsdC53aWR0aCx0LmhlaWdodCksaS5wYXJ0aWNsZXNVcGRhdGUoKSxuLmFycmF5LmZvckVhY2goZnVuY3Rpb24oZSl7ZS5kcmF3KCl9KSxyLmVuYWJsZSYmci5kcmF3LmVuYWJsZSYmdGhpcy5saWJyYXJ5LnBvbHlnb25NYXNrLmRyYXdQb2x5Z29uKCl9fSx7a2V5OlwicGFydGljbGVzRW1wdHlcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMubGlicmFyeS5nZXRQYXJhbWV0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFydGljbGVzfSkuYXJyYXk9W119fSx7a2V5OlwicGFydGljbGVzUmVmcmVzaFwiLHZhbHVlOmZ1bmN0aW9uKCl7Y2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5saWJyYXJ5LmRyYXdBbmltRnJhbWUpLHRoaXMucGFydGljbGVzRW1wdHkoKSx0aGlzLmxpYnJhcnkuY2FudmFzQ2xlYXIoKSx0aGlzLmxpYnJhcnkuc3RhcnQoKX19XSkmJm4odC5wcm90b3R5cGUsaSksbyYmbih0LG8pLGV9KCk7dC5kZWZhdWx0PW99LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUsdCl7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBuPXRbaV07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcj1pKDIpLGE9aSgzMyksbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLmltYWdlTWFuYWdlcj1uZXcgYS5JbWFnZU1hbmFnZXIsdGhpcy5yZXRpbmE9ITEsdGhpcy5vbldpbmRvd1Jlc2l6ZT10aGlzLm9uV2luZG93UmVzaXplLmJpbmQodGhpcyksdGhpcy5sb2FkUGFyYW1ldGVycyh0KSx0aGlzLmludGVyYWN0aXZpdHk9bmV3IHIuSW50ZXJhY3Rpdml0eSh0aGlzKSx0aGlzLm1vZGVzPW5ldyByLk1vZGVzKHRoaXMpLHRoaXMudmVuZG9ycz1uZXcgci5WZW5kb3JzKHRoaXMuaW1hZ2VNYW5hZ2VyLHRoaXMucGFyYW1zLHRoaXMpLHRoaXMubWFuYWdlcj1uZXcgci5QYXJ0aWNsZU1hbmFnZXIodGhpcyksdGhpcy5wb2x5Z29uTWFzaz1uZXcgci5Qb2x5Z29uTWFzayh0aGlzKX12YXIgdCxpLG87cmV0dXJuIHQ9ZSwoaT1be2tleTpcImdldFBhcmFtZXRlclwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlKHRoaXMucGFyYW1zKX19LHtrZXk6XCJzZXRQYXJhbWV0ZXJzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5wYXJhbXM9ci5kZWVwQXNzaWduKE9iamVjdC5hc3NpZ24oe30sdGhpcy5wYXJhbXMpLGUpfX0se2tleTpcImxvYWRQYXJhbWV0ZXJzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9ci5kZWVwQXNzaWduKHt9LHIuZ2V0RGVmYXVsdFBhcmFtcygpLGUpO3RoaXMucGFyYW1zPXR9fSx7a2V5OlwibG9hZENhbnZhc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuY2FudmFzPXtlbGVtZW50OmUsd2lkdGg6ZS5vZmZzZXRXaWR0aCxoZWlnaHQ6ZS5vZmZzZXRIZWlnaHR9fX0se2tleTpcInN0YXJ0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmludGVyYWN0aXZpdHkuYXR0YWNoRXZlbnRIYW5kbGVycygpLHRoaXMudmVuZG9ycy5zdGFydCgpfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuZGV0YWNoTGlzdGVuZXJzKCksdGhpcy5pbnRlcmFjdGl2aXR5LmRldGFjaEV2ZW50SGFuZGxlcnMoKSxjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmRyYXdBbmltRnJhbWUpLHRoaXMuY2FudmFzQ2xlYXIoKX19LHtrZXk6XCJkZXRhY2hMaXN0ZW5lcnNcIix2YWx1ZTpmdW5jdGlvbigpe3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdGhpcy5vbldpbmRvd1Jlc2l6ZSl9fSx7a2V5OlwicmV0aW5hSW5pdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9d2luZG93LmRldmljZVBpeGVsUmF0aW87aWYodGhpcy5wYXJhbXMucmV0aW5hX2RldGVjdCYmZT4xKXt0aGlzLmNhbnZhcy5weHJhdGlvPWUsdGhpcy5jYW52YXMud2lkdGg9dGhpcy5jYW52YXMuZWxlbWVudC5vZmZzZXRXaWR0aCp0aGlzLmNhbnZhcy5weHJhdGlvLHRoaXMuY2FudmFzLmhlaWdodD10aGlzLmNhbnZhcy5lbGVtZW50Lm9mZnNldEhlaWdodCp0aGlzLmNhbnZhcy5weHJhdGlvLHRoaXMucmV0aW5hPSEwO3ZhciB0PXRoaXMuZ2V0UGFyYW1ldGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlfSk7dGhpcy5zZXRQYXJhbWV0ZXJzKHtpbnRlcmFjdGl2aXR5Onttb2Rlczp7YnViYmxlOntkaXN0YW5jZTp0LmludGVyYWN0aXZpdHkubW9kZXMuYnViYmxlLmRpc3RhbmNlKmUsc2l6ZTp0LmludGVyYWN0aXZpdHkubW9kZXMuYnViYmxlLnNpemUqZX0sZ3JhYjp7ZGlzdGFuY2U6dC5pbnRlcmFjdGl2aXR5Lm1vZGVzLmdyYWIuZGlzdGFuY2UqZX0scmVwdWxzZTp7ZGlzdGFuY2U6dC5pbnRlcmFjdGl2aXR5Lm1vZGVzLnJlcHVsc2UuZGlzdGFuY2UqZX19fSxwYXJ0aWNsZXM6e2xpbmVfbGlua2VkOntkaXN0YW5jZTp0LnBhcnRpY2xlcy5saW5lX2xpbmtlZC5kaXN0YW5jZSplLHdpZHRoOnQucGFydGljbGVzLmxpbmVfbGlua2VkLndpZHRoKmV9LG1vdmU6e3NwZWVkOnQucGFydGljbGVzLm1vdmUuc3BlZWQqZX0sc2l6ZTp7dmFsdWU6dC5wYXJ0aWNsZXMuc2l6ZS52YWx1ZSplLGFuaW06e3NwZWVkOnQucGFydGljbGVzLnNpemUuYW5pbS5zcGVlZCplfX19fSl9ZWxzZSB0aGlzLmNhbnZhcy5weHJhdGlvPTEsdGhpcy5yZXRpbmE9ITF9fSx7a2V5OlwiY2FudmFzSW5pdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jYW52YXM7ZS5jdHg9ZS5lbGVtZW50LmdldENvbnRleHQoXCIyZFwiKX19LHtrZXk6XCJjYW52YXNTaXplXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNhbnZhcztlLmVsZW1lbnQud2lkdGg9ZS53aWR0aCxlLmVsZW1lbnQuaGVpZ2h0PWUuaGVpZ2h0LHRoaXMucGFyYW1zJiZ0aGlzLnBhcmFtcy5pbnRlcmFjdGl2aXR5LmV2ZW50cy5yZXNpemUmJndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdGhpcy5vbldpbmRvd1Jlc2l6ZSl9fSx7a2V5OlwiY2FudmFzUGFpbnRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuY2FudmFzO2lmKGUmJmUuY3R4KXRyeXtlLmN0eC5maWxsUmVjdCgwLDAsZS53aWR0aCxlLmhlaWdodCl9Y2F0Y2goZSl7Y29uc29sZS53YXJuKGUpfX19LHtrZXk6XCJjYW52YXNDbGVhclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jYW52YXM7aWYoZSYmZS5jdHgpdHJ5e2UuY3R4LmNsZWFyUmVjdCgwLDAsZS53aWR0aCxlLmhlaWdodCl9Y2F0Y2goZSl7Y29uc29sZS53YXJuKGUpfX19LHtrZXk6XCJvbldpbmRvd1Jlc2l6ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jYW52YXMsdD10aGlzLm1hbmFnZXIsaT10aGlzLnZlbmRvcnM7ZS53aWR0aD1lLmVsZW1lbnQub2Zmc2V0V2lkdGgsZS5oZWlnaHQ9ZS5lbGVtZW50Lm9mZnNldEhlaWdodCx0aGlzLnJldGluYSYmKGUud2lkdGgqPWUucHhyYXRpbyxlLmhlaWdodCo9ZS5weHJhdGlvKSxlLmVsZW1lbnQud2lkdGg9ZS53aWR0aCxlLmVsZW1lbnQuaGVpZ2h0PWUuaGVpZ2h0LCF0aGlzLnBhcmFtcy5wYXJ0aWNsZXMubW92ZS5lbmFibGV8fHRoaXMucGFyYW1zLnBvbHlnb24uZW5hYmxlPyh0LnBhcnRpY2xlc0VtcHR5KCksdGhpcy5wb2x5Z29uTWFzay5pbml0aWFsaXplKHRoaXMuZ2V0UGFyYW1ldGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLnBvbHlnb259KSkudGhlbihmdW5jdGlvbigpe3QucGFydGljbGVzQ3JlYXRlKCksdC5wYXJ0aWNsZXNEcmF3KCl9KSk6aS5kZW5zaXR5QXV0b1BhcnRpY2xlcygpfX1dKSYmbih0LnByb3RvdHlwZSxpKSxvJiZuKHQsbyksZX0oKTt0LmRlZmF1bHQ9b30sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0KXtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG49dFtpXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByLGE9aSgxKSxvPWkoNCk7IWZ1bmN0aW9uKGUpe2UuU0lOR0xFPVwic2luZ2xlXCIsZS5NVUxUSVBMRT1cIm11bHRpcGxlXCJ9KHI9dC5JbWFnZU1vZGV8fCh0LkltYWdlTW9kZT17fSkpO3ZhciBzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpeyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5zaW5nbGVJbWFnZT1udWxsLHRoaXMubXVsdGlwbGVJbWFnZXM9W10sdGhpcy5tb2RlPXIuU0lOR0xFfXZhciB0LGkscztyZXR1cm4gdD1lLChpPVt7a2V5OlwiZ2V0SW1hZ2VcIix2YWx1ZTpmdW5jdGlvbihlKXtpZih2b2lkIDAhPT1lKXtpZigwPT09dGhpcy5tdWx0aXBsZUltYWdlcy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiTm8gaW1hZ2VzIGxvYWRlZC4gWW91IG1heSBuZWVkIHRvIGRlZmluZSAnc2hhcGUudHlwZScgPSAnaW1hZ2VzJy5cIik7cmV0dXJuIHRoaXMubXVsdGlwbGVJbWFnZXNbZSV0aGlzLm11bHRpcGxlSW1hZ2VzLmxlbmd0aF19cmV0dXJuIHRoaXMuc2luZ2xlSW1hZ2V9fSx7a2V5OlwicGFyc2VTaGFwZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aWYoby5pc0VxdWFsKGEuU2hhcGVUeXBlLklNQUdFLGUudHlwZSkpcmV0dXJuIHRoaXMubW9kZT1yLlNJTkdMRSx0aGlzLnBhcnNlU2luZ2xlSW1hZ2UoZS5pbWFnZSkudGhlbihmdW5jdGlvbihpKXtyZXR1cm4gdC5zaW5nbGVJbWFnZT1pLE9iamVjdC5hc3NpZ24oe30sZSx7aW1hZ2U6aX0pfSk7aWYoby5pc0VxdWFsKGEuU2hhcGVUeXBlLklNQUdFUyxlLnR5cGUpKXt0aGlzLm1vZGU9ci5NVUxUSVBMRTt2YXIgaT1lLmltYWdlcy5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHQucGFyc2VTaW5nbGVJbWFnZShlKX0pO3JldHVybiBQcm9taXNlLmFsbChpKS50aGVuKGZ1bmN0aW9uKGkpe3JldHVybiB0Lm11bHRpcGxlSW1hZ2VzPWksT2JqZWN0LmFzc2lnbih7fSxlLHtpbWFnZXM6aX0pfSl9cmV0dXJuIFByb21pc2UucmVzb2x2ZShlKX19LHtrZXk6XCJwYXJzZVNpbmdsZUltYWdlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQsaT10aGlzLmJ1aWxkSW1hZ2VPYmplY3Qoe2hlaWdodDplLmhlaWdodCx3aWR0aDplLndpZHRoLHNyYzplLnNyY30pLG49ZS53aWR0aC9lLmhlaWdodDtyZXR1cm4gbiE9PTEvMCYmMCE9PW58fChuPTEpLGkucmF0aW89biwodD0vXmRhdGE6aW1hZ2VcXC8oXFx3ezN9KVxcK3htbDsoLio/KWJhc2U2NCwoLiopJC8uZXhlYyhlLnNyYykpPyhpLnR5cGU9dFsxXSxpLnN2Z0RhdGE9YXRvYih0WzNdKSk6KHQ9L14uKihcXHd7M30pJC8uZXhlYyhlLnNyYykpJiYoaS50eXBlPXRbMV0pLHRoaXMubG9hZEltYWdlKGkpfX0se2tleTpcImxvYWRJbWFnZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVyblwiXCIhPShlPU9iamVjdC5hc3NpZ24oe30sZSkpLnNyYz9cInN2Z1wiPT1lLnR5cGU/ZS5zdmdEYXRhP1Byb21pc2UucmVzb2x2ZShlKTp0aGlzLmRvd25sb2FkSW1hZ2UoZS5zcmMpLnRoZW4oZnVuY3Rpb24odCl7cmV0dXJuIGUuc3ZnRGF0YT10LnJlc3BvbnNlLGV9KTpuZXcgUHJvbWlzZShmdW5jdGlvbih0KXt2YXIgaT1uZXcgSW1hZ2U7aS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLGZ1bmN0aW9uKCl7ZS5lbGVtZW50RGF0YT1pLHQoZSl9KSxpLnNyYz1lLnNyY30pOlByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkVycm9yIHJlYWN0LXBhcnRpY2xlcy1qcyAtIG5vIGltYWdlLnNyY1wiKSl9fSx7a2V5OlwiZG93bmxvYWRJbWFnZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbih0LGkpe3ZhciBuPW5ldyBYTUxIdHRwUmVxdWVzdDtuLm9wZW4oXCJHRVRcIixlKSxuLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbihlKXs0PT1uLnJlYWR5U3RhdGUmJigyMDA9PW4uc3RhdHVzP3Qoe3Jlc3BvbnNlOmUuY3VycmVudFRhcmdldC5yZXNwb25zZSx4aHI6bn0pOmkobmV3IEVycm9yKFwiRXJyb3IgcmVhY3QtcGFydGljbGVzLWpzIC0gU3RhdHVzIGNvZGUgXCIuY29uY2F0KG4ucmVhZHlTdGF0ZSkpKSl9LG4uc2VuZCgpfSl9fSx7a2V5OlwiY3JlYXRlU3ZnSW1hZ2VcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBpPWUucmVwbGFjZSgvIyhbMC05QS1GXXszLDZ9KXxyZ2JcXChbMC05LF0rXFwpL2dpLGZ1bmN0aW9uKGUsaSxuLHIpe3ZhciBhO2lmKHQuY29sb3IucmdiKXt2YXIgbz10LmNvbG9yLnJnYixzPW8ucixjPW8uZyxsPW8uYjthPVwicmdiYSggXCIuY29uY2F0KHMsXCIsIFwiKS5jb25jYXQoYyxcIiwgXCIpLmNvbmNhdChsLFwiLCBcIikuY29uY2F0KHQub3BhY2l0eSxcIiApXCIpfWVsc2V7dmFyIHU9dC5jb2xvci5oc2wsaD11LmgseT11LnMscD11Lmw7YT1cInJnYmEoIFwiLmNvbmNhdChoLFwiLCBcIikuY29uY2F0KHksXCIsIFwiKS5jb25jYXQocCxcIiwgXCIpLmNvbmNhdCh0Lm9wYWNpdHksXCIgKVwiKX1yZXR1cm4gYX0pLG49bmV3IEJsb2IoW2ldLHt0eXBlOlwiaW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0Zi04XCJ9KSxyPXdpbmRvdy5VUkx8fHdpbmRvdyxhPXIuY3JlYXRlT2JqZWN0VVJMKG4pO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihlKXt2YXIgdD1uZXcgSW1hZ2U7dC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLGZ1bmN0aW9uKCl7ci5yZXZva2VPYmplY3RVUkwoYSksZSh0KX0pLHQuc3JjPWF9KX19LHtrZXk6XCJidWlsZEltYWdlT2JqZWN0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307cmV0dXJuIE9iamVjdC5hc3NpZ24oe3N2Z0RhdGE6bnVsbCxoZWlnaHQ6MCx3aWR0aDowLHJhdGlvOjAsc3JjOlwiXCIsdHlwZTpcIlwifSxlKX19XSkmJm4odC5wcm90b3R5cGUsaSkscyYmbih0LHMpLGV9KCk7dC5JbWFnZU1hbmFnZXI9c30sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0KXtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG49dFtpXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByPWkoMiksYT1pKDEpLG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsaSxuKXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMuaW1hZ2VNYW5hZ2VyPXQsdGhpcy5pbml0aWFsaXplZD0hMSx0aGlzLnBhcmFtcz1pLHRoaXMubGlicmFyeT1uLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBwZXJmb3JtYW5jZSYmKHRoaXMubGFzdERyYXc9cGVyZm9ybWFuY2Uubm93KCkpLHRoaXMuZHJhdz10aGlzLmRyYXcuYmluZCh0aGlzKX12YXIgdCxpLG87cmV0dXJuIHQ9ZSwoaT1be2tleTpcImRlbnNpdHlBdXRvUGFydGljbGVzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmxpYnJhcnksdD1lLmNhbnZhcyxpPWUubW9kZXMsbj10aGlzLnBhcmFtcy5wYXJ0aWNsZXMscj1uLm51bWJlci5kZW5zaXR5LGE9ci52YWx1ZV9hcmVhO2lmKHIuZW5hYmxlKXt2YXIgbz10LmVsZW1lbnQud2lkdGgqdC5lbGVtZW50LmhlaWdodC8xZTM7dGhpcy5saWJyYXJ5LnJldGluYSYmKG8vPTIqdC5weHJhdGlvKTt2YXIgcz1vKm4ubnVtYmVyLnZhbHVlL2EsYz1uLmFycmF5Lmxlbmd0aC1zO2M8MD9pLnB1c2hQYXJ0aWNsZXMoTWF0aC5hYnMoYykpOmkucmVtb3ZlUGFydGljbGVzKGMpfX19LHtrZXk6XCJjaGVja092ZXJsYXBcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBpPXRoaXMsbj10aGlzLmxpYnJhcnkscj1uLmNhbnZhcyxvPW4udmVuZG9ycztyLndpZHRoJiZyLmhlaWdodCYmdGhpcy5wYXJhbXMucGFydGljbGVzLmFycmF5LmZvckVhY2goZnVuY3Rpb24obil7dmFyIHM9bixjPWUueC1zLngsbD1lLnktcy55O2lmKE1hdGguc3FydChjKmMrbCpsKTw9ZS5yYWRpdXMrcy5yYWRpdXMpaWYoaS5saWJyYXJ5LnBhcmFtcy5wb2x5Z29uLmVuYWJsZSlzd2l0Y2goaS5saWJyYXJ5LnBhcmFtcy5wb2x5Z29uLmlubGluZS5hcnJhbmdlbWVudCl7Y2FzZSBhLlBvbHlnb25JbmxpbmVBcnJhbmdlbWVudFR5cGUuUkFORE9NX0xFTkdUSDpjYXNlIGEuUG9seWdvbklubGluZUFycmFuZ2VtZW50VHlwZS5SQU5ET01fUE9JTlQ6fWVsc2UgZS54PXQ/dC54Ok1hdGgucmFuZG9tKCkqci53aWR0aCxlLnk9dD90Lnk6TWF0aC5yYW5kb20oKSpyLmhlaWdodCxvLmNoZWNrT3ZlcmxhcChlKX0pfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe2NhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMubGlicmFyeS5kcmF3QW5pbUZyYW1lKSx0aGlzLmxpYnJhcnkuY2FudmFzLmVsZW1lbnQucmVtb3ZlKCl9fSx7a2V5OlwiZHJhd1NoYXBlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LGksbixyLGEpe3ZhciBvPXIqYSxzPXIvYSxjPTE4MCoocy0yKS9zLGw9TWF0aC5QSS1NYXRoLlBJKmMvMTgwO2Uuc2F2ZSgpLGUuYmVnaW5QYXRoKCksZS50cmFuc2xhdGUodCxpKSxlLm1vdmVUbygwLDApO2Zvcih2YXIgdT0wO3U8bzt1KyspZS5saW5lVG8obiwwKSxlLnRyYW5zbGF0ZShuLDApLGUucm90YXRlKGwpO2UuZmlsbCgpLGUucmVzdG9yZSgpfX0se2tleTpcImV4cG9ydEltZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5saWJyYXJ5LmNhbnZhczt3aW5kb3cub3BlbihlLmVsZW1lbnQudG9EYXRhVVJMKFwiaW1hZ2UvcG5nXCIpLFwiX2JsYW5rXCIpfX0se2tleTpcImRyYXdcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPSEwLHQ9dGhpcy5saWJyYXJ5LGk9dC5tYW5hZ2VyLG49dC52ZW5kb3JzLHI9dGhpcy5wYXJhbXMucGFydGljbGVzO3ZvaWQgMCE9PXBlcmZvcm1hbmNlJiYocGVyZm9ybWFuY2Uubm93KCktdGhpcy5sYXN0RHJhdzwxZTMvdGhpcy5wYXJhbXMuZnBzX2xpbWl0P2U9ITE6dGhpcy5sYXN0RHJhdz1wZXJmb3JtYW5jZS5ub3coKSk7ZSYmaS5wYXJ0aWNsZXNEcmF3KCksci5tb3ZlLmVuYWJsZT90aGlzLmxpYnJhcnkuZHJhd0FuaW1GcmFtZT1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobi5kcmF3KTpjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmxpYnJhcnkuZHJhd0FuaW1GcmFtZSl9fSx7a2V5OlwiaW5pdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZighdGhpcy5pbml0aWFsaXplZCl7dGhpcy5pbml0aWFsaXplZD0hMDt2YXIgdD10aGlzLmxpYnJhcnksaT10Lm1hbmFnZXIsbj10LnZlbmRvcnMsYT10aGlzLnBhcmFtcy5wYXJ0aWNsZXM7dC5yZXRpbmFJbml0KCksdC5jYW52YXNJbml0KCksdC5jYW52YXNTaXplKCksdC5wb2x5Z29uTWFzay5pbml0aWFsaXplKHRoaXMubGlicmFyeS5nZXRQYXJhbWV0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUucG9seWdvbn0pKS50aGVuKGZ1bmN0aW9uKCl7aS5wYXJ0aWNsZXNDcmVhdGUoKSxuLmRlbnNpdHlBdXRvUGFydGljbGVzKCksZS5saWJyYXJ5LnNldFBhcmFtZXRlcnMoe3BhcnRpY2xlczp7bGluZV9saW5rZWQ6e2NvbG9yX3JnYl9saW5lOnIuaGV4VG9SZ2IoYS5saW5lX2xpbmtlZC5jb2xvcil9fX0pLGUuZHJhdygpfSl9fX0se2tleTpcInN0YXJ0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy5wYXJhbXMucGFydGljbGVzO3RoaXMuaW1hZ2VNYW5hZ2VyLnBhcnNlU2hhcGUodC5zaGFwZSkudGhlbihmdW5jdGlvbih0KXtlLmluaXQoKX0pfX1dKSYmbih0LnByb3RvdHlwZSxpKSxvJiZuKHQsbyksZX0oKTt0LmRlZmF1bHQ9b30sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWkoMSkscj1pKDQpLGE9e3BhcnRpY2xlczp7bnVtYmVyOnt2YWx1ZTo0MCxtYXg6LTEsZGVuc2l0eTp7ZW5hYmxlOiExLHZhbHVlX2FyZWE6MTIwMH19LGNvbG9yOnt2YWx1ZTpcIiNGRkZcIn0sc2hhcGU6e3R5cGU6bi5TaGFwZVR5cGUuQ0lSQ0xFLHN0cm9rZTp7d2lkdGg6MCxjb2xvcjpcIiMwMDAwMDBcIn0scG9seWdvbjp7bmJfc2lkZXM6NX0saW1hZ2U6e3NyYzpcIlwiLHdpZHRoOjEwMCxoZWlnaHQ6MTAwfSxpbWFnZXM6W119LG9wYWNpdHk6e3ZhbHVlOi41LHJhbmRvbTohMSxhbmltOntlbmFibGU6ITAsc3BlZWQ6MSxvcGFjaXR5X21pbjouMSxzeW5jOiExfX0sc2l6ZTp7dmFsdWU6MSxyYW5kb206ITEsYW5pbTp7ZW5hYmxlOiExLHNwZWVkOjQwLHNpemVfbWluOjAsc3luYzohMX19LGxpbmVfbGlua2VkOntlbmFibGU6ITAsZGlzdGFuY2U6MTUwLGNvbG9yOlwiI0ZGRlwiLG9wYWNpdHk6LjYsd2lkdGg6MSxzaGFkb3c6e2VuYWJsZTohMSxibHVyOjUsY29sb3I6XCJsaW1lXCJ9fSxtb3ZlOntlbmFibGU6ITAsc3BlZWQ6MyxkaXJlY3Rpb246bi5Nb3ZlRGlyZWN0aW9uLk5PTkUscmFuZG9tOiExLHN0cmFpZ2h0OiExLG91dF9tb2RlOm4uTW92ZU91dE1vZGUuQk9VTkNFLGJvdW5jZTohMCxhdHRyYWN0OntlbmFibGU6ITEscm90YXRlWDozZTMscm90YXRlWTozZTN9fSxhcnJheTpbXX0saW50ZXJhY3Rpdml0eTp7ZGV0ZWN0X29uOlwiY2FudmFzXCIsZXZlbnRzOntvbmhvdmVyOntlbmFibGU6ITEsbW9kZTpuLkludGVyYWN0aXZpdHlNb2RlLkdSQUJ9LG9uY2xpY2s6e2VuYWJsZTohMSxtb2RlOm4uSW50ZXJhY3Rpdml0eU1vZGUuUkVQVUxTRX0scmVzaXplOiEwfSxtb2Rlczp7Z3JhYjp7ZGlzdGFuY2U6MTgwLGxpbmVfbGlua2VkOntvcGFjaXR5Oi4zNX19LGJ1YmJsZTp7ZGlzdGFuY2U6MjAwLHNpemU6ODAsZHVyYXRpb246LjR9LHJlcHVsc2U6e2Rpc3RhbmNlOjEwMCxkdXJhdGlvbjo1fSxwdXNoOntwYXJ0aWNsZXNfbmI6NH0scmVtb3ZlOntwYXJ0aWNsZXNfbmI6Mn19fSxyZXRpbmFfZGV0ZWN0OiEwLGZwc19saW1pdDo5OTkscG9seWdvbjp7ZW5hYmxlOiExLHNjYWxlOjEsdHlwZTpuLlBvbHlnb25UeXBlLklOTElORSxpbmxpbmU6e2FycmFuZ2VtZW50Om4uUG9seWdvbklubGluZUFycmFuZ2VtZW50VHlwZS5PTkVfUEVSX1BPSU5UfSxkcmF3OntlbmFibGU6ITEsc3Ryb2tlOnt3aWR0aDouNSxjb2xvcjpcInJnYmEoMjU1LCAyNTUsIDI1NSwgLjEpXCJ9fSxtb3ZlOntyYWRpdXM6MTAsdHlwZTpuLlBvbHlnb25Nb3ZlVHlwZS5QQVRIfSx1cmw6XCJcIn19O3QuZ2V0RGVmYXVsdFBhcmFtcz1mdW5jdGlvbigpe3JldHVybiByLmRlZXBBc3NpZ24oe30sYSl9fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlLHQpe3JldHVybiBmdW5jdGlvbihlKXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlfShlKXx8ZnVuY3Rpb24oZSx0KXt2YXIgaT1bXSxuPSEwLHI9ITEsYT12b2lkIDA7dHJ5e2Zvcih2YXIgbyxzPWVbU3ltYm9sLml0ZXJhdG9yXSgpOyEobj0obz1zLm5leHQoKSkuZG9uZSkmJihpLnB1c2goby52YWx1ZSksIXR8fGkubGVuZ3RoIT09dCk7bj0hMCk7fWNhdGNoKGUpe3I9ITAsYT1lfWZpbmFsbHl7dHJ5e258fG51bGw9PXMucmV0dXJufHxzLnJldHVybigpfWZpbmFsbHl7aWYocil0aHJvdyBhfX1yZXR1cm4gaX0oZSx0KXx8ZnVuY3Rpb24oKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKX0oKX1mdW5jdGlvbiByKGUsdCl7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBuPXRbaV07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLmxpYnJhcnk9dCx0aGlzLnBvbHlnb25QYXRoTGVuZ3RoPTAsdGhpcy5pbml0aWFsaXplZD0hMSx0aGlzLnBhdGgyRFN1cHBvcnRlZD0hIXdpbmRvdy5QYXRoMkQsdGhpcy5kZWJvdW5jZVRpbWU9MjUwLHRoaXMucGFyc2VTdmdQYXRoVG9Qb2x5Z29uPXRoaXMucGFyc2VTdmdQYXRoVG9Qb2x5Z29uLmJpbmQodGhpcyl9dmFyIHQsaSxhO3JldHVybiB0PWUsKGk9W3trZXk6XCJpbml0aWFsaXplXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gdGhpcy5wb2x5Z29uPWUsZS5lbmFibGU/dGhpcy5pbml0aWFsaXplZD9uZXcgUHJvbWlzZShmdW5jdGlvbihlKXt0LmRlYm91bmNlVGltZXImJmNsZWFyVGltZW91dCh0LmRlYm91bmNlVGltZXIpLHQuZGVib3VuY2VUaW1lcj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5wYXJzZVN2Z1BhdGhUb1BvbHlnb24oKS50aGVuKGZ1bmN0aW9uKHQpe2UoKX0pfSx0LmRlYm91bmNlVGltZSl9KTp0aGlzLnBhcnNlU3ZnUGF0aFRvUG9seWdvbigpLnRoZW4oZnVuY3Rpb24oZSl7dC5pbml0aWFsaXplZD0hMH0pOlByb21pc2UucmVzb2x2ZSgpfX0se2tleTpcImdldFZlcnRpY2VzTnVtYmVyXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0aWFsaXplZD90aGlzLnBvbHlnb25SYXcubGVuZ3RoOjB9fSx7a2V5OlwicGFyc2VTdmdQYXRoVG9Qb2x5Z29uXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztlPWV8fHRoaXMucG9seWdvbi51cmw7dmFyIGk9dGhpcy5saWJyYXJ5LmNhbnZhcy53aWR0aD09PXRoaXMubGFzdENhbnZhc1dpZHRoJiZ0aGlzLmxpYnJhcnkuY2FudmFzLmhlaWdodD09PXRoaXMubGFzdENhbnZhc0hlaWdodDtyZXR1cm4gdGhpcy5wb2x5Z29uUmF3JiZ0aGlzLnBvbHlnb25SYXcubGVuZ3RoJiZpP1Byb21pc2UucmVzb2x2ZSh0aGlzLnBvbHlnb25SYXcpOnRoaXMucGFyc2VTdmdQYXRoKGUpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIHQucG9seWdvbkRhdGE9ZSx0LnBvbHlnb25XaWR0aD1wYXJzZUludCh0LnBvbHlnb25EYXRhLnN2Zy5nZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiKSkqdC5wb2x5Z29uLnNjYWxlLHQucG9seWdvbkhlaWdodD1wYXJzZUludCh0LnBvbHlnb25EYXRhLnN2Zy5nZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIikpKnQucG9seWdvbi5zY2FsZSx0LnBvbHlnb25PZmZzZXRYPXQubGlicmFyeS5jYW52YXMud2lkdGgvMi10LnBvbHlnb25XaWR0aC8yLHQucG9seWdvbk9mZnNldFk9dC5saWJyYXJ5LmNhbnZhcy5oZWlnaHQvMi10LnBvbHlnb25IZWlnaHQvMix0LnBvbHlnb25EYXRhLnBhdGhzLmxlbmd0aCYmKHQucG9seWdvblBhdGhMZW5ndGg9dC5wb2x5Z29uRGF0YS5wYXRoc1swXS5nZXRUb3RhbExlbmd0aCgpKSx0LnBvbHlnb25SYXc9W10sdC5wb2x5Z29uRGF0YS5wYXRocy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2Zvcih2YXIgaT1lLnBhdGhTZWdMaXN0Lm51bWJlck9mSXRlbXMsbj0wO248aTtuKyspe3ZhciByPXt4OjAseTowfSxhPWUucGF0aFNlZ0xpc3QuZ2V0SXRlbShuKTtzd2l0Y2goYS5wYXRoU2VnVHlwZSl7Y2FzZSBTVkdQYXRoU2VnLlBBVEhTRUdfQVJDX0FCUzpjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX0FCUzpjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9BQlM6Y2FzZSBTVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfQUJTOmNhc2UgU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1NNT09USF9BQlM6Y2FzZSBTVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX0FCUzpjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fQUJTOnIueD1hLngsci55PWEueTtjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fSE9SSVpPTlRBTF9BQlM6ci54PWEueDticmVhaztjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fVkVSVElDQUxfQUJTOnIueT1hLnk7YnJlYWs7Y2FzZSBTVkdQYXRoU2VnLlBBVEhTRUdfQVJDX1JFTDpjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1JFTDpjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9SRUw6Y2FzZSBTVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfUkVMOmNhc2UgU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1NNT09USF9SRUw6Y2FzZSBTVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX1JFTDpjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fUkVMOnIueD1hLngsci55PWEueTtjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fSE9SSVpPTlRBTF9SRUw6ci54PWEueDticmVhaztjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fVkVSVElDQUxfUkVMOnIueT1hLnk7YnJlYWs7Y2FzZSBTVkdQYXRoU2VnLlBBVEhTRUdfVU5LTk9XTjpjYXNlIFNWR1BhdGhTZWcuUEFUSFNFR19DTE9TRVBBVEg6ZGVmYXVsdDpjb250aW51ZX10LnBvbHlnb25SYXcucHVzaChbci54KnQucG9seWdvbi5zY2FsZSt0LnBvbHlnb25PZmZzZXRYLHIueSp0LnBvbHlnb24uc2NhbGUrdC5wb2x5Z29uT2Zmc2V0WV0pfX0pLHQubGFzdENhbnZhc1dpZHRoPXQubGlicmFyeS5jYW52YXMud2lkdGgsdC5sYXN0Q2FudmFzSGVpZ2h0PXQubGlicmFyeS5jYW52YXMuaGVpZ2h0LHQuY3JlYXRlUGF0aDJEKCksdC5wb2x5Z29uUmF3fSl9fSx7a2V5OlwicGFyc2VTdmdQYXRoXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucG9seWdvbkRhdGEmJnRoaXMucG9seWdvbkRhdGEucGF0aHMmJnRoaXMucG9seWdvbkRhdGEucGF0aHMubGVuZ3RoJiZ0aGlzLnBvbHlnb25EYXRhLnN2Zz9Qcm9taXNlLnJlc29sdmUodGhpcy5wb2x5Z29uRGF0YSk6dGhpcy5saWJyYXJ5LmltYWdlTWFuYWdlci5kb3dubG9hZEltYWdlKGUpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJue3BhdGhzOltlLnhoci5yZXNwb25zZVhNTC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInBhdGhcIilbMF1dLHN2ZzplLnhoci5yZXNwb25zZVhNTC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN2Z1wiKVswXX19KX19LHtrZXk6XCJnZXRSYW5kb21Qb2ludE9uUG9seWdvblBhdGhcIix2YWx1ZTpmdW5jdGlvbigpe2lmKCF0aGlzLmluaXRpYWxpemVkKXRocm93IG5ldyBFcnJvcihcIk5vIHBvbHlnb24gZGF0YSBsb2FkZWQuXCIpO3ZhciBlPW4odGhpcy5wb2x5Z29uUmF3W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSp0aGlzLnBvbHlnb25SYXcubGVuZ3RoKV0sMik7cmV0dXJue3g6ZVswXSx5OmVbMV19fX0se2tleTpcImdldFJhbmRvbVBvaW50T25Qb2x5Z29uUGF0aEJ5TGVuZ3RoXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZighdGhpcy5pbml0aWFsaXplZCl0aHJvdyBuZXcgRXJyb3IoXCJObyBwb2x5Z29uIGRhdGEgbG9hZGVkLlwiKTt2YXIgZT10aGlzLnBvbHlnb25EYXRhLnBhdGhzWzBdLmdldFBvaW50QXRMZW5ndGgoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKnRoaXMucG9seWdvblBhdGhMZW5ndGgpKzEpO3JldHVybnt4OmUueCp0aGlzLnBvbHlnb24uc2NhbGUrdGhpcy5wb2x5Z29uT2Zmc2V0WCx5OmUueSp0aGlzLnBvbHlnb24uc2NhbGUrdGhpcy5wb2x5Z29uT2Zmc2V0WX19fSx7a2V5OlwiZ2V0UmFuZG9tUG9pbnRJbnNpZGVQb2x5Z29uUGF0aFwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYoIXRoaXMuaW5pdGlhbGl6ZWQpdGhyb3cgbmV3IEVycm9yKFwiTm8gcG9seWdvbiBkYXRhIGxvYWRlZC5cIik7dmFyIGU9e3g6TWF0aC5yYW5kb20oKSp0aGlzLmxpYnJhcnkuY2FudmFzLndpZHRoLHk6TWF0aC5yYW5kb20oKSp0aGlzLmxpYnJhcnkuY2FudmFzLmhlaWdodH07cmV0dXJuIHRoaXMuaXNQb2ludEluc2lkZVBvbHlnb24oZSk/ZTp0aGlzLmdldFJhbmRvbVBvaW50SW5zaWRlUG9seWdvblBhdGgoKX19LHtrZXk6XCJnZXRSYW5kb21Qb2ludE91dHNpZGVQb2x5Z29uUGF0aFwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYoIXRoaXMuaW5pdGlhbGl6ZWQpdGhyb3cgbmV3IEVycm9yKFwiTm8gcG9seWdvbiBkYXRhIGxvYWRlZC5cIik7dmFyIGU9e3g6TWF0aC5yYW5kb20oKSp0aGlzLmxpYnJhcnkuY2FudmFzLndpZHRoLHk6TWF0aC5yYW5kb20oKSp0aGlzLmxpYnJhcnkuY2FudmFzLmhlaWdodH07cmV0dXJuIHRoaXMuaXNQb2ludEluc2lkZVBvbHlnb24oZSk/dGhpcy5nZXRSYW5kb21Qb2ludE91dHNpZGVQb2x5Z29uUGF0aCgpOmV9fSx7a2V5OlwiaXNQb2ludEluc2lkZVBvbHlnb25cIix2YWx1ZTpmdW5jdGlvbihlKXtpZih0aGlzLnBhdGgyRFN1cHBvcnRlZCYmdGhpcy5wb2x5Z29uUGF0aClyZXR1cm4gdGhpcy5saWJyYXJ5LmNhbnZhcy5jdHguaXNQb2ludEluUGF0aCh0aGlzLnBvbHlnb25QYXRoLGUueCxlLnkpO2Zvcih2YXIgdD0hMSxpPTAsbj10aGlzLnBvbHlnb25SYXcubGVuZ3RoLTE7aTx0aGlzLnBvbHlnb25SYXcubGVuZ3RoO249aSsrKXt2YXIgcj10aGlzLnBvbHlnb25SYXdbaV1bMF0sYT10aGlzLnBvbHlnb25SYXdbaV1bMV0sbz10aGlzLnBvbHlnb25SYXdbbl1bMF0scz10aGlzLnBvbHlnb25SYXdbbl1bMV07YT5lLnkhPXM+ZS55JiZlLng8KG8tcikqKGUueS1hKS8ocy1hKStyJiYodD0hdCl9cmV0dXJuIHR9fSx7a2V5OlwiZ2V0UG9pbmdPblBvbHlnb25QYXRoQnlJbmRleFwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKCF0aGlzLmluaXRpYWxpemVkKXRocm93IG5ldyBFcnJvcihcIk5vIHBvbHlnb24gZGF0YSBsb2FkZWQuXCIpO3ZhciB0PW4odGhpcy5wb2x5Z29uUmF3W2UldGhpcy5wb2x5Z29uUmF3Lmxlbmd0aF0sMik7cmV0dXJue3g6dFswXSx5OnRbMV19fX0se2tleTpcImdldEVxdWlkaXN0YW50UG9pbmdPblBvbHlnb25QYXRoQnlJbmRleFwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKCF0aGlzLmluaXRpYWxpemVkKXRocm93IG5ldyBFcnJvcihcIk5vIHBvbHlnb24gZGF0YSBsb2FkZWQuXCIpO3ZhciB0PXRoaXMucG9seWdvbkRhdGEucGF0aHNbMF0uZ2V0UG9pbnRBdExlbmd0aCh0aGlzLnBvbHlnb25QYXRoTGVuZ3RoL3RoaXMubGlicmFyeS5nZXRQYXJhbWV0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFydGljbGVzLm51bWJlci52YWx1ZX0pKmUpO3JldHVybnt4OnQueCp0aGlzLnBvbHlnb24uc2NhbGUrdGhpcy5wb2x5Z29uT2Zmc2V0WCx5OnQueSp0aGlzLnBvbHlnb24uc2NhbGUrdGhpcy5wb2x5Z29uT2Zmc2V0WX19fSx7a2V5OlwiZHJhd1BvbHlnb25cIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMubGlicmFyeS5jYW52YXMuY3R4O2lmKCF0aGlzLnBhdGgyRFN1cHBvcnRlZCl7aWYoIXRoaXMuaW5pdGlhbGl6ZWQpcmV0dXJuO2UuYmVnaW5QYXRoKCksZS5tb3ZlVG8odGhpcy5wb2x5Z29uUmF3WzBdWzBdLHRoaXMucG9seWdvblJhd1swXVsxXSksdGhpcy5wb2x5Z29uUmF3LmZvckVhY2goZnVuY3Rpb24odCxpKXt2YXIgcj1uKHQsMiksYT1yWzBdLG89clsxXTtpPjAmJmUubGluZVRvKGEsbyl9KSxlLmNsb3NlUGF0aCgpfWUuc3Ryb2tlU3R5bGU9dGhpcy5wb2x5Z29uLmRyYXcuc3Ryb2tlLmNvbG9yLGUubGluZVdpZHRoPXRoaXMucG9seWdvbi5kcmF3LnN0cm9rZS53aWR0aCx0aGlzLnBvbHlnb25QYXRoP2Uuc3Ryb2tlKHRoaXMucG9seWdvblBhdGgpOmUuc3Ryb2tlKCl9fSx7a2V5OlwiY3JlYXRlUGF0aDJEXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMucGF0aDJEU3VwcG9ydGVkJiYodGhpcy5wb2x5Z29uUGF0aD1uZXcgUGF0aDJELHRoaXMucG9seWdvblBhdGgubW92ZVRvKHRoaXMucG9seWdvblJhd1swXVswXSx0aGlzLnBvbHlnb25SYXdbMF1bMV0pLHRoaXMucG9seWdvblJhdy5mb3JFYWNoKGZ1bmN0aW9uKHQsaSl7dmFyIHI9bih0LDIpLGE9clswXSxvPXJbMV07aT4wJiZlLnBvbHlnb25QYXRoLmxpbmVUbyhhLG8pfSksdGhpcy5wb2x5Z29uUGF0aC5jbG9zZVBhdGgoKSl9fV0pJiZyKHQucHJvdG90eXBlLGkpLGEmJnIodCxhKSxlfSgpO3QuUG9seWdvbk1hc2s9YX0sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoMzgpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBuKGUsdCl9fSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSgzOSkscj1pKDEwKTtlLmV4cG9ydHM9ZnVuY3Rpb24gZSh0LGksYSxvLHMpe3JldHVybiB0PT09aXx8KG51bGw9PXR8fG51bGw9PWl8fCFyKHQpJiYhcihpKT90IT10JiZpIT1pOm4odCxpLGEsbyxlLHMpKX19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDQwKSxyPWkoMjIpLGE9aSg3NSksbz1pKDc5KSxzPWkoMTAxKSxjPWkoMTMpLGw9aSgyMyksdT1pKDI1KSxoPTEseT1cIltvYmplY3QgQXJndW1lbnRzXVwiLHA9XCJbb2JqZWN0IEFycmF5XVwiLHY9XCJbb2JqZWN0IE9iamVjdF1cIixmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxpLGQsYixnKXt2YXIgbT1jKGUpLF89Yyh0KSxQPW0/cDpzKGUpLHg9Xz9wOnModCksdz0oUD1QPT15P3Y6UCk9PXYsTz0oeD14PT15P3Y6eCk9PXYsTT1QPT14O2lmKE0mJmwoZSkpe2lmKCFsKHQpKXJldHVybiExO209ITAsdz0hMX1pZihNJiYhdylyZXR1cm4gZ3x8KGc9bmV3IG4pLG18fHUoZSk/cihlLHQsaSxkLGIsZyk6YShlLHQsUCxpLGQsYixnKTtpZighKGkmaCkpe3ZhciBFPXcmJmYuY2FsbChlLFwiX193cmFwcGVkX19cIiksUz1PJiZmLmNhbGwodCxcIl9fd3JhcHBlZF9fXCIpO2lmKEV8fFMpe3ZhciBrPUU/ZS52YWx1ZSgpOmUsVD1TP3QudmFsdWUoKTp0O3JldHVybiBnfHwoZz1uZXcgbiksYihrLFQsaSxkLGcpfX1yZXR1cm4hIU0mJihnfHwoZz1uZXcgbiksbyhlLHQsaSxkLGIsZykpfX0sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoNSkscj1pKDQ2KSxhPWkoNDcpLG89aSg0OCkscz1pKDQ5KSxjPWkoNTApO2Z1bmN0aW9uIGwoZSl7dmFyIHQ9dGhpcy5fX2RhdGFfXz1uZXcgbihlKTt0aGlzLnNpemU9dC5zaXplfWwucHJvdG90eXBlLmNsZWFyPXIsbC5wcm90b3R5cGUuZGVsZXRlPWEsbC5wcm90b3R5cGUuZ2V0PW8sbC5wcm90b3R5cGUuaGFzPXMsbC5wcm90b3R5cGUuc2V0PWMsZS5leHBvcnRzPWx9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7dGhpcy5fX2RhdGFfXz1bXSx0aGlzLnNpemU9MH19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDYpLHI9QXJyYXkucHJvdG90eXBlLnNwbGljZTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fX2RhdGFfXyxpPW4odCxlKTtyZXR1cm4hKGk8MHx8KGk9PXQubGVuZ3RoLTE/dC5wb3AoKTpyLmNhbGwodCxpLDEpLC0tdGhpcy5zaXplLDApKX19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDYpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9fZGF0YV9fLGk9bih0LGUpO3JldHVybiBpPDA/dm9pZCAwOnRbaV1bMV19fSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSg2KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG4odGhpcy5fX2RhdGFfXyxlKT4tMX19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDYpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciBpPXRoaXMuX19kYXRhX18scj1uKGksZSk7cmV0dXJuIHI8MD8oKyt0aGlzLnNpemUsaS5wdXNoKFtlLHRdKSk6aVtyXVsxXT10LHRoaXN9fSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSg1KTtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt0aGlzLl9fZGF0YV9fPW5ldyBuLHRoaXMuc2l6ZT0wfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fX2RhdGFfXyxpPXQuZGVsZXRlKGUpO3JldHVybiB0aGlzLnNpemU9dC5zaXplLGl9fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoZSl9fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoZSl9fSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSg1KSxyPWkoMTEpLGE9aSgyMSksbz0yMDA7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIGk9dGhpcy5fX2RhdGFfXztpZihpIGluc3RhbmNlb2Ygbil7dmFyIHM9aS5fX2RhdGFfXztpZighcnx8cy5sZW5ndGg8by0xKXJldHVybiBzLnB1c2goW2UsdF0pLHRoaXMuc2l6ZT0rK2kuc2l6ZSx0aGlzO2k9dGhpcy5fX2RhdGFfXz1uZXcgYShzKX1yZXR1cm4gaS5zZXQoZSx0KSx0aGlzLnNpemU9aS5zaXplLHRoaXN9fSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSgxNykscj1pKDU1KSxhPWkoMTkpLG89aSgyMCkscz0vXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvLGM9RnVuY3Rpb24ucHJvdG90eXBlLGw9T2JqZWN0LnByb3RvdHlwZSx1PWMudG9TdHJpbmcsaD1sLmhhc093blByb3BlcnR5LHk9UmVnRXhwKFwiXlwiK3UuY2FsbChoKS5yZXBsYWNlKC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZyxcIlxcXFwkJlwiKS5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLFwiJDEuKj9cIikrXCIkXCIpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4hKCFhKGUpfHxyKGUpKSYmKG4oZSk/eTpzKS50ZXN0KG8oZSkpfX0sZnVuY3Rpb24oZSx0KXt2YXIgaTtpPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KCk7dHJ5e2k9aXx8bmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKX1jYXRjaChlKXtcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiYoaT13aW5kb3cpfWUuZXhwb3J0cz1pfSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSgxMikscj1PYmplY3QucHJvdG90eXBlLGE9ci5oYXNPd25Qcm9wZXJ0eSxvPXIudG9TdHJpbmcscz1uP24udG9TdHJpbmdUYWc6dm9pZCAwO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1hLmNhbGwoZSxzKSxpPWVbc107dHJ5e2Vbc109dm9pZCAwO3ZhciBuPSEwfWNhdGNoKGUpe312YXIgcj1vLmNhbGwoZSk7cmV0dXJuIG4mJih0P2Vbc109aTpkZWxldGUgZVtzXSkscn19LGZ1bmN0aW9uKGUsdCl7dmFyIGk9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGkuY2FsbChlKX19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbixyPWkoNTYpLGE9KG49L1teLl0rJC8uZXhlYyhyJiZyLmtleXMmJnIua2V5cy5JRV9QUk9UT3x8XCJcIikpP1wiU3ltYm9sKHNyYylfMS5cIituOlwiXCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiEhYSYmYSBpbiBlfX0sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoMClbXCJfX2NvcmUtanNfc2hhcmVkX19cIl07ZS5leHBvcnRzPW59LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG51bGw9PWU/dm9pZCAwOmVbdF19fSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSg1OSkscj1pKDUpLGE9aSgxMSk7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7dGhpcy5zaXplPTAsdGhpcy5fX2RhdGFfXz17aGFzaDpuZXcgbixtYXA6bmV3KGF8fHIpLHN0cmluZzpuZXcgbn19fSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSg2MCkscj1pKDYxKSxhPWkoNjIpLG89aSg2Mykscz1pKDY0KTtmdW5jdGlvbiBjKGUpe3ZhciB0PS0xLGk9bnVsbD09ZT8wOmUubGVuZ3RoO2Zvcih0aGlzLmNsZWFyKCk7Kyt0PGk7KXt2YXIgbj1lW3RdO3RoaXMuc2V0KG5bMF0sblsxXSl9fWMucHJvdG90eXBlLmNsZWFyPW4sYy5wcm90b3R5cGUuZGVsZXRlPXIsYy5wcm90b3R5cGUuZ2V0PWEsYy5wcm90b3R5cGUuaGFzPW8sYy5wcm90b3R5cGUuc2V0PXMsZS5leHBvcnRzPWN9LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDgpO2UuZXhwb3J0cz1mdW5jdGlvbigpe3RoaXMuX19kYXRhX189bj9uKG51bGwpOnt9LHRoaXMuc2l6ZT0wfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5oYXMoZSkmJmRlbGV0ZSB0aGlzLl9fZGF0YV9fW2VdO3JldHVybiB0aGlzLnNpemUtPXQ/MTowLHR9fSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSg4KSxyPVwiX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfX1wiLGE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fX2RhdGFfXztpZihuKXt2YXIgaT10W2VdO3JldHVybiBpPT09cj92b2lkIDA6aX1yZXR1cm4gYS5jYWxsKHQsZSk/dFtlXTp2b2lkIDB9fSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSg4KSxyPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX19kYXRhX187cmV0dXJuIG4/dm9pZCAwIT09dFtlXTpyLmNhbGwodCxlKX19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDgpLHI9XCJfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fXCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIGk9dGhpcy5fX2RhdGFfXztyZXR1cm4gdGhpcy5zaXplKz10aGlzLmhhcyhlKT8wOjEsaVtlXT1uJiZ2b2lkIDA9PT10P3I6dCx0aGlzfX0sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoOSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PW4odGhpcyxlKS5kZWxldGUoZSk7cmV0dXJuIHRoaXMuc2l6ZS09dD8xOjAsdH19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXR5cGVvZiBlO3JldHVyblwic3RyaW5nXCI9PXR8fFwibnVtYmVyXCI9PXR8fFwic3ltYm9sXCI9PXR8fFwiYm9vbGVhblwiPT10P1wiX19wcm90b19fXCIhPT1lOm51bGw9PT1lfX0sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoOSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuKHRoaXMsZSkuZ2V0KGUpfX0sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoOSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuKHRoaXMsZSkuaGFzKGUpfX0sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoOSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIGk9bih0aGlzLGUpLHI9aS5zaXplO3JldHVybiBpLnNldChlLHQpLHRoaXMuc2l6ZSs9aS5zaXplPT1yPzA6MSx0aGlzfX0sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoMjEpLHI9aSg3MSksYT1pKDcyKTtmdW5jdGlvbiBvKGUpe3ZhciB0PS0xLGk9bnVsbD09ZT8wOmUubGVuZ3RoO2Zvcih0aGlzLl9fZGF0YV9fPW5ldyBuOysrdDxpOyl0aGlzLmFkZChlW3RdKX1vLnByb3RvdHlwZS5hZGQ9by5wcm90b3R5cGUucHVzaD1yLG8ucHJvdG90eXBlLmhhcz1hLGUuZXhwb3J0cz1vfSxmdW5jdGlvbihlLHQpe3ZhciBpPVwiX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfX1wiO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fX2RhdGFfXy5zZXQoZSxpKSx0aGlzfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGUpfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIGk9LTEsbj1udWxsPT1lPzA6ZS5sZW5ndGg7KytpPG47KWlmKHQoZVtpXSxpLGUpKXJldHVybiEwO3JldHVybiExfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5oYXModCl9fSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSgxMikscj1pKDc2KSxhPWkoMTYpLG89aSgyMikscz1pKDc3KSxjPWkoNzgpLGw9MSx1PTIsaD1cIltvYmplY3QgQm9vbGVhbl1cIix5PVwiW29iamVjdCBEYXRlXVwiLHA9XCJbb2JqZWN0IEVycm9yXVwiLHY9XCJbb2JqZWN0IE1hcF1cIixmPVwiW29iamVjdCBOdW1iZXJdXCIsZD1cIltvYmplY3QgUmVnRXhwXVwiLGI9XCJbb2JqZWN0IFNldF1cIixnPVwiW29iamVjdCBTdHJpbmddXCIsbT1cIltvYmplY3QgU3ltYm9sXVwiLF89XCJbb2JqZWN0IEFycmF5QnVmZmVyXVwiLFA9XCJbb2JqZWN0IERhdGFWaWV3XVwiLHg9bj9uLnByb3RvdHlwZTp2b2lkIDAsdz14P3gudmFsdWVPZjp2b2lkIDA7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxpLG4seCxPLE0pe3N3aXRjaChpKXtjYXNlIFA6aWYoZS5ieXRlTGVuZ3RoIT10LmJ5dGVMZW5ndGh8fGUuYnl0ZU9mZnNldCE9dC5ieXRlT2Zmc2V0KXJldHVybiExO2U9ZS5idWZmZXIsdD10LmJ1ZmZlcjtjYXNlIF86cmV0dXJuIShlLmJ5dGVMZW5ndGghPXQuYnl0ZUxlbmd0aHx8IU8obmV3IHIoZSksbmV3IHIodCkpKTtjYXNlIGg6Y2FzZSB5OmNhc2UgZjpyZXR1cm4gYSgrZSwrdCk7Y2FzZSBwOnJldHVybiBlLm5hbWU9PXQubmFtZSYmZS5tZXNzYWdlPT10Lm1lc3NhZ2U7Y2FzZSBkOmNhc2UgZzpyZXR1cm4gZT09dCtcIlwiO2Nhc2Ugdjp2YXIgRT1zO2Nhc2UgYjp2YXIgUz1uJmw7aWYoRXx8KEU9YyksZS5zaXplIT10LnNpemUmJiFTKXJldHVybiExO3ZhciBrPU0uZ2V0KGUpO2lmKGspcmV0dXJuIGs9PXQ7bnw9dSxNLnNldChlLHQpO3ZhciBUPW8oRShlKSxFKHQpLG4seCxPLE0pO3JldHVybiBNLmRlbGV0ZShlKSxUO2Nhc2UgbTppZih3KXJldHVybiB3LmNhbGwoZSk9PXcuY2FsbCh0KX1yZXR1cm4hMX19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDApLlVpbnQ4QXJyYXk7ZS5leHBvcnRzPW59LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PS0xLGk9QXJyYXkoZS5zaXplKTtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUsbil7aVsrK3RdPVtuLGVdfSksaX19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PS0xLGk9QXJyYXkoZS5zaXplKTtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2lbKyt0XT1lfSksaX19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDgwKSxyPTEsYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsaSxvLHMsYyl7dmFyIGw9aSZyLHU9bihlKSxoPXUubGVuZ3RoO2lmKGghPW4odCkubGVuZ3RoJiYhbClyZXR1cm4hMTtmb3IodmFyIHk9aDt5LS07KXt2YXIgcD11W3ldO2lmKCEobD9wIGluIHQ6YS5jYWxsKHQscCkpKXJldHVybiExfXZhciB2PWMuZ2V0KGUpO2lmKHYmJmMuZ2V0KHQpKXJldHVybiB2PT10O3ZhciBmPSEwO2Muc2V0KGUsdCksYy5zZXQodCxlKTtmb3IodmFyIGQ9bDsrK3k8aDspe3ZhciBiPWVbcD11W3ldXSxnPXRbcF07aWYobyl2YXIgbT1sP28oZyxiLHAsdCxlLGMpOm8oYixnLHAsZSx0LGMpO2lmKCEodm9pZCAwPT09bT9iPT09Z3x8cyhiLGcsaSxvLGMpOm0pKXtmPSExO2JyZWFrfWR8fChkPVwiY29uc3RydWN0b3JcIj09cCl9aWYoZiYmIWQpe3ZhciBfPWUuY29uc3RydWN0b3IsUD10LmNvbnN0cnVjdG9yO18hPVAmJlwiY29uc3RydWN0b3JcImluIGUmJlwiY29uc3RydWN0b3JcImluIHQmJiEoXCJmdW5jdGlvblwiPT10eXBlb2YgXyYmXyBpbnN0YW5jZW9mIF8mJlwiZnVuY3Rpb25cIj09dHlwZW9mIFAmJlAgaW5zdGFuY2VvZiBQKSYmKGY9ITEpfXJldHVybiBjLmRlbGV0ZShlKSxjLmRlbGV0ZSh0KSxmfX0sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoODEpLHI9aSg4MyksYT1pKDg2KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG4oZSxhLHIpfX0sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoODIpLHI9aSgxMyk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxpKXt2YXIgYT10KGUpO3JldHVybiByKGUpP2E6bihhLGkoZSkpfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIGk9LTEsbj10Lmxlbmd0aCxyPWUubGVuZ3RoOysraTxuOyllW3IraV09dFtpXTtyZXR1cm4gZX19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDg0KSxyPWkoODUpLGE9T2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSxvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMscz1vP2Z1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP1tdOihlPU9iamVjdChlKSxuKG8oZSksZnVuY3Rpb24odCl7cmV0dXJuIGEuY2FsbChlLHQpfSkpfTpyO2UuZXhwb3J0cz1zfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgaT0tMSxuPW51bGw9PWU/MDplLmxlbmd0aCxyPTAsYT1bXTsrK2k8bjspe3ZhciBvPWVbaV07dChvLGksZSkmJihhW3IrK109byl9cmV0dXJuIGF9fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbigpe3JldHVybltdfX0sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoODcpLHI9aSg5NiksYT1pKDEwMCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBhKGUpP24oZSk6cihlKX19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDg4KSxyPWkoODkpLGE9aSgxMyksbz1pKDIzKSxzPWkoOTIpLGM9aSgyNSksbD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciBpPWEoZSksdT0haSYmcihlKSxoPSFpJiYhdSYmbyhlKSx5PSFpJiYhdSYmIWgmJmMoZSkscD1pfHx1fHxofHx5LHY9cD9uKGUubGVuZ3RoLFN0cmluZyk6W10sZj12Lmxlbmd0aDtmb3IodmFyIGQgaW4gZSkhdCYmIWwuY2FsbChlLGQpfHxwJiYoXCJsZW5ndGhcIj09ZHx8aCYmKFwib2Zmc2V0XCI9PWR8fFwicGFyZW50XCI9PWQpfHx5JiYoXCJidWZmZXJcIj09ZHx8XCJieXRlTGVuZ3RoXCI9PWR8fFwiYnl0ZU9mZnNldFwiPT1kKXx8cyhkLGYpKXx8di5wdXNoKGQpO3JldHVybiB2fX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIGk9LTEsbj1BcnJheShlKTsrK2k8ZTspbltpXT10KGkpO3JldHVybiBufX0sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoOTApLHI9aSgxMCksYT1PYmplY3QucHJvdG90eXBlLG89YS5oYXNPd25Qcm9wZXJ0eSxzPWEucHJvcGVydHlJc0VudW1lcmFibGUsYz1uKGZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c30oKSk/bjpmdW5jdGlvbihlKXtyZXR1cm4gcihlKSYmby5jYWxsKGUsXCJjYWxsZWVcIikmJiFzLmNhbGwoZSxcImNhbGxlZVwiKX07ZS5leHBvcnRzPWN9LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDcpLHI9aSgxMCksYT1cIltvYmplY3QgQXJndW1lbnRzXVwiO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gcihlKSYmbihlKT09YX19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7cmV0dXJuITF9fSxmdW5jdGlvbihlLHQpe3ZhciBpPTkwMDcxOTkyNTQ3NDA5OTEsbj0vXig/OjB8WzEtOV1cXGQqKSQvO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByPXR5cGVvZiBlO3JldHVybiEhKHQ9bnVsbD09dD9pOnQpJiYoXCJudW1iZXJcIj09cnx8XCJzeW1ib2xcIiE9ciYmbi50ZXN0KGUpKSYmZT4tMSYmZSUxPT0wJiZlPHR9fSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSg3KSxyPWkoMjYpLGE9aSgxMCksbz17fTtvW1wiW29iamVjdCBGbG9hdDMyQXJyYXldXCJdPW9bXCJbb2JqZWN0IEZsb2F0NjRBcnJheV1cIl09b1tcIltvYmplY3QgSW50OEFycmF5XVwiXT1vW1wiW29iamVjdCBJbnQxNkFycmF5XVwiXT1vW1wiW29iamVjdCBJbnQzMkFycmF5XVwiXT1vW1wiW29iamVjdCBVaW50OEFycmF5XVwiXT1vW1wiW29iamVjdCBVaW50OENsYW1wZWRBcnJheV1cIl09b1tcIltvYmplY3QgVWludDE2QXJyYXldXCJdPW9bXCJbb2JqZWN0IFVpbnQzMkFycmF5XVwiXT0hMCxvW1wiW29iamVjdCBBcmd1bWVudHNdXCJdPW9bXCJbb2JqZWN0IEFycmF5XVwiXT1vW1wiW29iamVjdCBBcnJheUJ1ZmZlcl1cIl09b1tcIltvYmplY3QgQm9vbGVhbl1cIl09b1tcIltvYmplY3QgRGF0YVZpZXddXCJdPW9bXCJbb2JqZWN0IERhdGVdXCJdPW9bXCJbb2JqZWN0IEVycm9yXVwiXT1vW1wiW29iamVjdCBGdW5jdGlvbl1cIl09b1tcIltvYmplY3QgTWFwXVwiXT1vW1wiW29iamVjdCBOdW1iZXJdXCJdPW9bXCJbb2JqZWN0IE9iamVjdF1cIl09b1tcIltvYmplY3QgUmVnRXhwXVwiXT1vW1wiW29iamVjdCBTZXRdXCJdPW9bXCJbb2JqZWN0IFN0cmluZ11cIl09b1tcIltvYmplY3QgV2Vha01hcF1cIl09ITEsZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBhKGUpJiZyKGUubGVuZ3RoKSYmISFvW24oZSldfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlKHQpfX19LGZ1bmN0aW9uKGUsdCxpKXsoZnVuY3Rpb24oZSl7dmFyIG49aSgxOCkscj10JiYhdC5ub2RlVHlwZSYmdCxhPXImJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlJiYhZS5ub2RlVHlwZSYmZSxvPWEmJmEuZXhwb3J0cz09PXImJm4ucHJvY2VzcyxzPWZ1bmN0aW9uKCl7dHJ5e3ZhciBlPWEmJmEucmVxdWlyZSYmYS5yZXF1aXJlKFwidXRpbFwiKS50eXBlcztyZXR1cm4gZXx8byYmby5iaW5kaW5nJiZvLmJpbmRpbmcoXCJ1dGlsXCIpfWNhdGNoKGUpe319KCk7ZS5leHBvcnRzPXN9KS5jYWxsKHRoaXMsaSgyNCkoZSkpfSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSg5Nykscj1pKDk4KSxhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCFuKGUpKXJldHVybiByKGUpO3ZhciB0PVtdO2Zvcih2YXIgaSBpbiBPYmplY3QoZSkpYS5jYWxsKGUsaSkmJlwiY29uc3RydWN0b3JcIiE9aSYmdC5wdXNoKGkpO3JldHVybiB0fX0sZnVuY3Rpb24oZSx0KXt2YXIgaT1PYmplY3QucHJvdG90eXBlO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLmNvbnN0cnVjdG9yO3JldHVybiBlPT09KFwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJnQucHJvdG90eXBlfHxpKX19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDk5KShPYmplY3Qua2V5cyxPYmplY3QpO2UuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihpKXtyZXR1cm4gZSh0KGkpKX19fSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSgxNykscj1pKDI2KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPWUmJnIoZS5sZW5ndGgpJiYhbihlKX19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDEwMikscj1pKDExKSxhPWkoMTAzKSxvPWkoMTA0KSxzPWkoMTA1KSxjPWkoNyksbD1pKDIwKSx1PWwobiksaD1sKHIpLHk9bChhKSxwPWwobyksdj1sKHMpLGY9YzsobiYmXCJbb2JqZWN0IERhdGFWaWV3XVwiIT1mKG5ldyBuKG5ldyBBcnJheUJ1ZmZlcigxKSkpfHxyJiZcIltvYmplY3QgTWFwXVwiIT1mKG5ldyByKXx8YSYmXCJbb2JqZWN0IFByb21pc2VdXCIhPWYoYS5yZXNvbHZlKCkpfHxvJiZcIltvYmplY3QgU2V0XVwiIT1mKG5ldyBvKXx8cyYmXCJbb2JqZWN0IFdlYWtNYXBdXCIhPWYobmV3IHMpKSYmKGY9ZnVuY3Rpb24oZSl7dmFyIHQ9YyhlKSxpPVwiW29iamVjdCBPYmplY3RdXCI9PXQ/ZS5jb25zdHJ1Y3Rvcjp2b2lkIDAsbj1pP2woaSk6XCJcIjtpZihuKXN3aXRjaChuKXtjYXNlIHU6cmV0dXJuXCJbb2JqZWN0IERhdGFWaWV3XVwiO2Nhc2UgaDpyZXR1cm5cIltvYmplY3QgTWFwXVwiO2Nhc2UgeTpyZXR1cm5cIltvYmplY3QgUHJvbWlzZV1cIjtjYXNlIHA6cmV0dXJuXCJbb2JqZWN0IFNldF1cIjtjYXNlIHY6cmV0dXJuXCJbb2JqZWN0IFdlYWtNYXBdXCJ9cmV0dXJuIHR9KSxlLmV4cG9ydHM9Zn0sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoMykoaSgwKSxcIkRhdGFWaWV3XCIpO2UuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQsaSl7dmFyIG49aSgzKShpKDApLFwiUHJvbWlzZVwiKTtlLmV4cG9ydHM9bn0sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoMykoaSgwKSxcIlNldFwiKTtlLmV4cG9ydHM9bn0sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoMykoaSgwKSxcIldlYWtNYXBcIik7ZS5leHBvcnRzPW59XSl9KTsiLCJjb25zdCBwYXJ0aWNsZXNDb25maWcgPSB7XG4gIHBhcnRpY2xlczoge2xpbmVfbGlua2VkOiB7c2hhZG93OiB7ZW5hYmxlOiB0cnVlLCBjb2xvcjogJyMzQ0E5RDEnLCBibHVyOiA1fX19LFxuICBudW1iZXI6IHt2YWx1ZTogMjAwLCBkZW5zaXR5OiB7ZW5hYmxlOiB0cnVlLCB2YWx1ZV9hcmVhOiA4MDB9fSxcbn1cblxuY29uc3QgcGFydGljbGVzU3R5bGUgPSB7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB6SW5kZXg6ICctMSdcbn1cblxuZXhwb3J0IHtcbiAgcGFydGljbGVzU3R5bGUsIHBhcnRpY2xlc0NvbmZpZ1xufSJdLCJzb3VyY2VSb290IjoiIn0=